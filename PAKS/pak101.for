C=======================================================================
C ......................................................................
C .
CE.   PROGRAM
CE.      TO SLOVE FOR THE SMALLEST EIGENVALUES AND CORRESPONDING
CE.      EIGENVECTORS IN THE GENERALIZED EIGENPROBLEM USING THE
CE.      SUBSPACE ITERATION METHOD
CS.   PROGRAM
CS.      RESAVANJE NAJMANJIH SOPSTVENIH VREDNOSTI I ODGOVARAJUCIH
CS.      SOPSTVENIH VEKTORA UPOTREBOM "SUBSPACE" ITERACIJA
C .
CE.-- INPUT VARIBLES --
CE.   A(NWK)       =STIFFNESS MATRIX IN COMACTED FORM (ASSUMED
CE.                 POSITIVE DEFINITE)
CE.   B(NWM)       =MASS MATRIX IN COMPAC TED FORM
CE.   MAXA(NNM)    =VECTOR CONTAINING ADDRESSES OF DIAGONAL
CE.                 ELEMENTS OF STIFFNESS MATRIX A
CE.   RR(NN,NC)    =EIGENVESTORS ON SOLUTION EXIT
CE.   EIGV(NC)     =EIGENVALUES ON SOLUTION EXIT
CE.   TT(NN)       =WORKING VECTOR
CE.   W(NN)        =WORKING VECTOR
CE.   AR(NNC)      =WORKING MATRIX STORIX STORING PROJECTION OF K
CE.   BR(NNC)      =WORKING MATRIX STORING PROJECTION OF M
CE.   VEC(NC,NC)   =WORKING MATRIX
CE.   D(NC)        =WORKING VECTOR
CE.   RTOLV(NC)    =WORKING VECTOR
CE.   BUP(NC)      =WORKING VECTOR
CE.   BLO(NC)      =WORKING VECTOR
CE.   BUPC(NC)     =WORKING VECTOR
CE.   NN           =ORDER OF STIFFNESS AND MASS MATRICES
CE.   NNM          =NN+1
CE.   NWK          =NUMBER OF ELEMENTS BELOW SKYLINE OF
CE.                 STIFFNESS MATRIX
CE.   NWM          =NUMBER OF ELEMENTS BELOW SKYLINE OF
CE.                 MASS MATRIX
CE.                 I.E. NWM=NWK FOR CONSISTENT MASS MATRIX
CE.                      NWM=NN  FOR LUMPED MASS MATRIX
CE.   NROOT        =NUMBER OF REQUIRED EIGENVALUES AND EIGENVECTORS
CE.   RTOL         =CONVERGENCE TOLERANCE ON EIGENVALUES
CE.                 (1.E-C6 OR SMALLER)
CE.   NC           =NUMBER OF ITERATION VECTORS USED
CE.                 (USUALLY SET TO MIN(2*NROOT,NROOT*8),BUT NC
CE.                 CANNDT BE LARGER THAN THE NUMBER OF MASS
CE.                 DEGREES OF FREEDCM)
CE.   NNC          =NC*(NC+2)/2 DIMENSION OF STORAGE VECTORS AR,BR
CE.   NITEM        =MAXIMUM NUMBER OF SUBSPACE ITERATIONS PERMITTED
CE.                 (USUALLY SET TO 16)
CE.                 THE PARAMETERS NO AND/OR NITEM MUST BE
CE.                 INCREASED IF A SOLUTION HAS NOT CONVERGED
CE.   IFSS         FLAG FOR STURM SEQUENCE CHECK
CE.                 EQ.0 NO CHECK
CE.                 EQ.1 CHECK
CE.   IFPR         FLAG FOR PRINTING DURING ITERATION
CE.                 EQ.0 NO PRINTING
CE.                 EQ.1 PRINT
CS.-- ULAZNE PROMENLJIVE --
CS.   A(NWK)       =MATRICA KRUTOSTI POZITIVNO DEFINITNA
CS.   B(NWM)       =MATRICA MASA
CS.   MAXA(NNM)    =VEKTOR ADRESA DIAJGONALNIH ELEMENATA MATRICA A I B
CS.   RR(NN,NC)    =SOPSTVENI VEKTORI NA IZLAZU
CS.   EIGV(NC)     =SOPSTVENE VREDNOSTI NA IZLAZU
CS.   TT(NN)       =RADNI VEKTOR
CS.   W(NN)        =RADNI VEKTOR
CS.   AR(NNC)      =RADNA MATRICA SADRZI PROJEKCIJE   K
CS.   BR(NNC)      =RADNA MATRICA SADRZI PROJEKCIJE   M
CS.   VEC(NC,NC)   =RADNA MATRICA
CS.   D(NC)        =RADNI VEKTOR
CS.   RTOLV(NC)    =RADNI VEKTOR
CS.   BUP(NC)      =RADNI VEKTOR
CS.   BLO(NC)      =RADNI VEKTOR
CS.   BUPC(NC)     =RADNI VEKTOR
CS.   NN           =RED MATRICE KRUTOSTI
CS.   NNM          =NN+1
CS.   NWK          =BROJ ELEMENATA ISPOD DIJAGONALE MATRICE KRUTOSTI
CS.   NWM          =BROJ ELEMENATA ISPOD DIJAGONALE MATRICE MASA
CS.                 NWM=NWK ZA KONZISTENTNU MATRICU MASA
CS.                 NWM=NN  ZA KONCETRISANE MASE
CS.   NROOT        =BROJ ZAHTEVANIH SOPST.VREDNOSTI I VEKTORA
CS.   RTOL         =TOLERANCIJA
CS.                 (1.E-06 ILI MANJE)
CS.   NC           =BROJ UPOTREBLJENIH ITERACIONIH VEKTORA
CS.                 (UOBICAJENO JE MIN(2*NROOT,NROOT+8), ALI NC
CS.                 NE MOZE BITI VECE OD BROJA STEPENI SLOBODE MASA)
CS.   NNC          =NC*(NC+1)/2 DIMENZIJA VEKTORA AR,BR
CS.   NITEM        =DOPUSTENI MAKSIMUM ITERACIJA
CS.                 (POSTAVLJENO NA 16)
CS.   IFSS         INDIKATOR PROVERE  STURM SEKVENCE
CS.                 EQ.0 NE PROVERAVA
CS.                 EQ.1 PROVERAVA
CS.   IFPR         INDIKATOR STAMPE TOKOM ITERACIJA
CS.                 EQ.0 NE STAMPA
CS.                 EQ.1 STAMPA
C .
CE.-- OUTPUT --
CE.   EIGV(NROOT)  =EIGENVALUES
CE.   R(NN,NROOT)  =EIGENVECTORS
CS.-- IZLAZ --
CS.   EIGV(NROOT)  =SOPSTVENE VREDNOSTI
CS.   R(NN,NROOT)  =SOPSTVENI VEKTORI
C .
C ......................................................................
C=======================================================================
      SUBROUTINE RSOPVR(INDR)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   PROGRAM
CE.      ZA FORMIRANJE REPERA ZA SOPSTVENE VREDNOSTI
CS.   PROGRAM
CS.      ZA FORMIRANJE REPERA ZA SOPSTVENE VREDNOSTI
C .
C ......................................................................
C
      include 'paka.inc'
      
      COMMON /DUPLAP/ IDVA
      COMMON /DUZINA/ LMAX,MTOT,LMAXM,LRAD,NRAD
      COMMON /REPERI/ LCORD,LID,LMAXA,LMHT
      COMMON /SISTEM/ LSK,LRTDT,NWK,JEDN,LFTDT
      COMMON /OPSTIP/ JPS,JPBR,NPG,JIDG,JCORG,JCVEL,JELCV,NGA,NGI,NPK,
     1                NPUP,LIPODS,IPODS,LMAX13,MAX13,JEDNG,JMAXA,JEDNP,
     1                NWP,NWG,IDF,JPS1
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      COMMON /DINAMI/ IMASS,IDAMP,PIP,DIP,MDVI
      COMMON /GLAVNI/ NP,NGELEM,NMATM,NPER,
     1                IOPGL(6),KOSI,NDIN,ITEST
      COMMON /CVOREL/ ICVEL,LCVEL,LELCV,NPA,NPI,LCEL,LELC,NMA,NMI
      COMMON /SOPSVR/ ISOPS,ISTYP,NSOPV,ISTSV,IPROV,IPROL
      COMMON /ECLANM/ AMAXK,AMINK,AMAXF,AMINF
      COMMON /LANCZO/ LA,LB,LTT,LW
      COMMON /RADIZA/ INDBG
      COMMON /SRPSKI/ ISRPS
      COMMON /CDEBUG/ IDEBUG
      
      write(*,*) 'sa pocetka rsop iz 101'
C
      IF(IDEBUG.GT.0) PRINT *, ' RSOPVR'
      IF(INDBG.EQ.0) THEN
         IF(NDIN.GT.0) THEN
      IF(ISRPS.EQ.0)
     1WRITE(*,2020)
      IF(ISRPS.EQ.1)
     1WRITE(*,6020)
         ELSE
      IF(ISRPS.EQ.0)
     1WRITE(*,2030)
      IF(ISRPS.EQ.1)
     1WRITE(*,6030)
         ENDIF
      ENDIF
      NROOT=NSOPV
      NN=JEDN
      NNM=NN+1
      NWM=NWK
      IF(NDIN.GT.0.AND.IMASS.EQ.2) NWM=NN
      RTOL=1.0D-06
      NC=MIN0(2*NROOT,NROOT+8)
      IF(NC.GT.NN) THEN
      NROT=NN/2
      NRO8=NROT
      IF(NN.GT.8) NRO8=NN-8
      NRO=MAX0(NROT,NRO8)
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2000) NROOT,NRO
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6000) NROOT,NRO
      STOP 'PROGRAM STOP - RSOPVR'
      ENDIF
      NITEM=30
      IFSS=IPROV
      IFPR=ISTSV
      NSTIF=ILISK
      IOUT = IZLAZ
      NNC = NC*(NC+1)/2
C
C     LID1=LMAXA+NNM
C     LCVE1=LID1+NP*6
C     LMAX=LCVE1
C     IF(ICVEL.GT.0) LMAX=LMAX+NP
C     IF(LMAX.GT.MTOT) CALL ERROR(1)
C     NNM1=NNM+NP*6
C     IF(ICVEL.GT.0) NNM1=NNM1+NP
C     CALL IJEDN1(A(LID1),A(LID),NP*6)
C     IF(ICVEL.GT.0) CALL IJEDN1(A(LCVE1),A(LCVEL),NP)
C     JP=(JPS1)*80
C     LMAX=LIPODS+JP
C     CALL IJEDN1(A(LMAX),A(LMAXA),NNM1)
C     LMAXA=LMAX
C     LID = LMAXA+NNM
C     LCVEL=LID+NP*6
C     LA=LCVEL
C     IF(ICVEL.GT.0) LA=LA+NP
C     CALL DELJIV(LA,2,INDL)
C     IF(INDL.EQ.0) LA=LA+1
CZILESK
      IF(INDR.EQ.1) THEN
      LA = LSK
      LB = LA + NWK*IDVA
      LMAX = LB + NWM*IDVA
      ENDIF
CZILESK
      IF(ISTYP.EQ.3) THEN
         MAXPRS=NSOPV
         N=JEDN
         LANMAX=NITEM
         NW=6*N+2*MAXPRS+LANMAX*(6+LANMAX)
         LW=LMAX
         LEIGV=LW+NW*IDVA
         LR=LEIGV+MAXPRS*IDVA
         LIW=LR+N*MAXPRS*IDVA
         LMAX =LIW+MAXPRS
         write(*,*) 'pre if u rsop iz 101'
         IF(LMAX.GT.MTOT) CALL ERROR(1)
         write(*,*) 'posle if u rsop iz 101'
         IF(INDR.EQ.0) RETURN
CZ
         NBRIS=(LIW-LW)/IDVA
         CALL CLEAR(A(LW),NBRIS)
CZ
         CALL RSTAZK(A(LIPODS),LA,35)
         IF(IMASS.NE.2) CALL RSTAZK(A(LIPODS),LB,54)
         IF(IMASS.EQ.2) CALL RSTAZ(A(LIPODS),LB,54)
C
CE       KORIGOVANJE MATRICA MAKSIMALNIM BROJEM NA DIAGONALI
CS       KORIGOVANJE MATRICA MAKSIMALNIM BROJEM NA DIAGONALI
         CALL MAKSIM(A(LA),A(LMAXA),NWK,N,AMAXK)
         CALL MAKSIM(A(LB),A(LMAXA),NWM,N,AMAXF)
         IF(AMAXK.GT.AMAXF) THEN
C           CALL MAXDEL(A(LA),AMAXK,NWK)
C           CALL MAXDEL(A(LB),AMAXK,NWM)
         ELSE
C           CALL MAXDEL(A(LA),AMAXF,NWK)
C           CALL MAXDEL(A(LB),AMAXF,NWK)
         ENDIF
         CALL SOPSVL(A(LA),A(LB),A(LMAXA),A(LW),A(LEIGV),A(LR),A(LIW),
     1               NW,MAXPRS,NWK,N,LANMAX)
      ELSE
         LR = LMAX
         LEIGV = LR + NN *NC*IDVA
         LTT = LEIGV + NC * IDVA
         LW = LTT + NN * IDVA
         LAR = LW + NN * IDVA
         LBR = LAR + NNC * IDVA
         LVEC = LBR + NNC * IDVA
         LD = LVEC + NC * IDVA
         LRTOLV = LD + NC * IDVA
         LBUP = LRTOLV + NC * IDVA
         LBLO = LBUP + NC * IDVA
         LBUPC = LBLO + NC * IDVA
         LMAX = LBUPC + NC * IDVA
         IF(LMAX.GT.MTOT) CALL ERROR(1)
         IF(INDR.EQ.0) RETURN
CGOSA
         OPEN (55,file='EGGOS',STATUS='UNKNOWN',
     1         FORM='UNFORMATTED',ACCESS='DIRECT',RECL=16)
CGOSA
CZ
         NBRIS=(LMAX-LR)/IDVA
         CALL CLEAR(A(LR),NBRIS)
CZ
C
         CALL SOPSTV(A(LA),A(LB),A(LMAXA),A(LR),A(LEIGV),A(LTT),A(LW)
     1               ,A(LAR),A(LBR),A(LVEC),A(LD),A(LRTOLV),A(LBUP)
     2               ,A(LBLO),A(LBUPC),NN,NWK,NWM,NROOT,RTOL,NC
     3               ,NITEM,IFSS,IFPR)
      ENDIF
      
      write(*,*) 'sa kraja rsop iz 101'
      
C
      RETURN
C-----------------------------------------------------------------------
 2000 FORMAT(//' GRESKA U ULAZNIM PODACIMA'/
     1'  TRAZENI BROJ SOPSTVENIH VREDNOSTI JE NSOPV =',I5/
     2'  A MOZE SE MAKSIMALNO NACI',I5//'  PROGRAM STOP'//)
 2020 FORMAT(' *** RACUNANJE SOPSTVENIH VREDNOSTI ***')
 2030 FORMAT(' *** RACUNANJE KRITICNIH SILA ***')
C-----------------------------------------------------------------------
 6000 FORMAT(//' ERROR IN INPUT DATA'/
     1'  TRAZENI BROJ SOPSTVENIH VREDNOSTI JE NSOPV =',I5/
     2'  A MOZE SE MAKSIMALNO NACI',I5//'  PROGRAM STOP'//)
 6020 FORMAT(' *** CALCULATE EIGEN VALUE ***')
 6030 FORMAT(' *** CALCULATE CRITICAL LOADS ***')
C-----------------------------------------------------------------------
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE TDTKTK(A,B,NWK)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   PROGRAM
CE.      ZA ODREDJIVANJE NELINEARNOG DELA MATRICE KRUTOSTI
CS.   PROGRAM
CS.      ZA ODREDJIVANJE NELINEARNOG DELA MATRICE KRUTOSTI
C .         IF(ISTYP.EQ.2.AND.NDIN.EQ.0)
C .            KNL = (T-DT)K - (T)K
C .
C ......................................................................
C
      DIMENSION A(*),B(*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' TDTKTK'
      DO 10 I=1,NWK
      BB=B(I)
      B(I)=B(I)-A(I)
      A(I)=BB
   10 CONTINUE
      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE MAKSIM(A,MAXA,NWK,NN,AMAX)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   PROGRAM
CE.      FOR ODREDJIVANJE NAJVECEG CLANA NA DIJAGONALI
CS.   PROGRAM
CS.      ZA ODREDJIVANJE NAJVECEG CLANA NA DIJAGONALI
C .
C ......................................................................
C
      DIMENSION A(*),MAXA(*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' MAKSIM'
      AMAX=A(1)
      IF(NWK.GT.NN) THEN
      DO 10 I=2,NN
      II=MAXA(I)
      IF(AMAX.LT.A(II)) AMAX=A(II)
   10 CONTINUE
      ELSE
      DO 20 I=2,NN
      IF(AMAX.LT.A(I)) AMAX=A(I)
   20 CONTINUE
      ENDIF
      AMAX=DABS(AMAX)
      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE MAXDEL(A,AMAX,NWK)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   PROGRAM
CE.      ZA DELJENJE VEKTORA SKALAROM
CS.   PROGRAM
CS.      ZA DELJENJE VEKTORA SKALAROM
C .
C ......................................................................
C
      DIMENSION A(*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' MAXDEL'
      DO 10 I=1,NWK
      A(I)=A(I)/AMAX
   10 CONTINUE
      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE MAKSIS(FTDT,ID,SIL)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   PROGRAM
CE.      ZA NORMIRANJE SOPSTVENIH VEKTORA NA VREDNOST JEDAN
CS.   PROGRAM
CS.      ZA NORMIRANJE SOPSTVENIH VEKTORA NA VREDNOST JEDAN
C .
C ......................................................................
C
      COMMON /GLAVNI/ NP,NGELEM,NMATM,NPER,
     1                IOPGL(6),KOSI,NDIN,ITEST
      DIMENSION FTDT(*),ID(NP,*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' MAKSIS'
CE    NALAZENJE MAKSIMALNE VREDNOSTI U SOPSTVENOM VEKTORU
CS    NALAZENJE MAKSIMALNE VREDNOSTI U SOPSTVENOM VEKTORU
      SIL=0.0D0
      DO 10 I=1,3
      IF(IOPGL(I).EQ.1) GO TO 10
      DO 20 J=1,NP
      NJ=ID(J,I)
      IF(NJ.LE.0) GO TO 20
      IF(SIL.LT.DABS(FTDT(NJ))) SIL=DABS(FTDT(NJ))
   20 CONTINUE
   10 CONTINUE
CE    DELJENJE VEKTORA SA MAKSIMALNOM VREDNOSCU U SOPSTVENOM VEKTORU
CS    DELJENJE VEKTORA SA MAKSIMALNOM VREDNOSCU U SOPSTVENOM VEKTORU
      DO 30 I=1,3
      IF(IOPGL(I).EQ.1) GO TO 30
      DO 40 J=1,NP
      NJ=ID(J,I)
      IF(NJ.LE.0) GO TO 40
      FTDT(NJ)=FTDT(NJ)/SIL
   40 CONTINUE
   30 CONTINUE
      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE SOPSTV(A9,B,MAXA,R,EIGV,TT,W,AR,BR,VEC,D,RTOLV,BUP,BLO,
     1BUPC,NN,NWK,NWM,NROOT,RTOL,NC,NITEM,IFSS,IFPR)
       IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   PROGRAM
CE.      ZA POZIVANJE PROGRAMA ZA: UCITAVANJE MATRICA,
CE.      RESAVANJE SOPSTVENIH VREDNOSTI I STAMPANJE REZULTATA
CS.   PROGRAM
CS.      ZA POZIVANJE PROGRAMA ZA: UCITAVANJE MATRICA,
CS.      RESAVANJE SOPSTVENIH VREDNOSTI I STAMPANJE REZULTATA
C .
C ......................................................................
C
      include 'paka.inc'
      
      COMMON /CVOREL/ ICVEL,LCVEL,LELCV,NPA,NPI,LCEL,LELC,NMA,NMI
      COMMON /REPERI/ LCORD,LID,LMAXA,LMHT
      COMMON /GLAVNI/ NP,NGELEM,NMATM,NPER,
     1                IOPGL(6),KOSI,NDIN,ITEST
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      COMMON /OPSTIP/ JPS,JPBR,NPG,JIDG,JCORG,JCVEL,JELCV,NGA,NGI,NPK,
     1                NPUP,LIPODS,IPODS,LMAX13,MAX13,JEDNG,JMAXA,JEDNP,
     1                NWP,NWG,IDF,JPS1
      COMMON /DINAMI/ IMASS,IDAMP,PIP,DIP,MDVI
      COMMON /SOPSVR/ ISOPS,ISTYP,NSOPV,ISTSV,IPROV,IPROL
      COMMON /POSTPR/ LNDTPR,LNDTGR,NBLPR,NBLGR,INDPR,INDGR
      COMMON /ECLANM/ AMAXK,AMINK,AMAXF,AMINF
      COMMON /IMPERF/ NMODS,LIDIM,LSCIM,MODES
      COMMON /LANCZO/ LA,LB,LTT,LW
      COMMON /PERKOR/ LNKDT,LDTDT,LVDT,NDT,DT,VREME,KOR
      COMMON /STAMKO/ ISTKO,NCVPR,LNCVP,LNCVZ,
     +                ISTEM,ISTVN,ISTSI,ISTDE,ISTNA
      DIMENSION A9(*),B(*),R(NN,*),TT(*),W(*),EIGV(*),
     1D(*),VEC(NC,*),AR(*),BR(*),RTOLV(*),BUP(*),BLO(*),BUPC(*),MAXA(*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' SOPSTV'
      CALL RSTAZK(A(LIPODS),LA,35)
      IF(IMASS.NE.2) CALL RSTAZK(A(LIPODS),LB,54)
      IF(IMASS.EQ.2) CALL RSTAZ(A(LIPODS),LB,54)
C
C      DO 111 I=1,NN
C         NJ=MAXA(I)
C         IF(IMASS.NE.2) WRITE(3,2111) I,A9(NJ),B(NJ)
C         IF(IMASS.EQ.2) WRITE(3,2111) I,A9(NJ),B(I)
C  111 CONTINUE
C 2111 FORMAT(I5,2(1PD13.5))
C
CE    SLUCAJ ISTYP=2 , SAMO ZA NDIN=0
CS    SLUCAJ ISTYP=2 , SAMO ZA NDIN=0
C           KNL = (T-DT)K - (T)K
C
      IF(ISTYP.EQ.2.AND.NDIN.EQ.0) CALL TDTKTK(A9,B,NWK)
C
CE    KORIGOVANJE MATRICA MAKSIMALNIM BROJEM NA DIAGONALI
CS    KORIGOVANJE MATRICA MAKSIMALNIM BROJEM NA DIAGONALI
      CALL MAKSIM(A9,MAXA,NWK,NN,AMAXK)
      CALL MAKSIM(B,MAXA,NWM,NN,AMAXF)
      IF(AMAXK.GT.AMAXF) THEN
         CALL MAXDEL(A9,AMAXK,NWK)
         CALL MAXDEL(B,AMAXK,NWM)
      ELSE
         CALL MAXDEL(A9,AMAXF,NWK)
         CALL MAXDEL(B,AMAXF,NWM)
      ENDIF
C
      CALL SSPACE (A9,B,MAXA,R,EIGV,TT,W,AR,BR,VEC,D,RTOLV,BUP,BLO,
     1BUPC,NN,NWK,NWM,NROOT,RTOL,NC,NITEM,IFSS,IFPR)
C     OPEN FILE  'ZMODES'
      CALL MODEOP(MODES)
      REWIND MODES
C
CE    PRINT RESULTS
CS    STAMPANJE REZULTATA
C
      KKOR=KOR
      IF(NDIN.GT.0) THEN
         PI=4.0D0*ATAN(1.0D0)
         DO 10 I=1,NC
   10    EIGV(I)=DSQRT(EIGV(I))/PI/2.0D0
         IF(NBLGR.GE.0)
     1   CALL NEUTRS(EIGV,NROOT)
         DO 580 J=1,NROOT
            CALL MAKSIS(R(1,J),A(LID),SIL)
            CALL STAPSV(R(1,J),A(LID),A(LCVEL),ICVEL,NP,J,EIGV(J),SIL,0)
            IF(NBLGR.GE.0)
     1    CALL STAGSV(R(1,J),A(LID),A(LCVEL),ICVEL,NP,J,EIGV(J),IGRAF,0)
	      KOR=J
            IF(NBLGR.GE.0)
     1      CALL STAU09(R(1,J),A(LID),A(LCVEL),ICVEL,NP,49,1,
     +                  A(LNCVP),NCVPR)
C
CE          SAVE FOR INITIAL IMPERFECTION
CS          PODACI ZA INICIJALNU IMPERFEKCIJU
C
            WRITE(MODES) EIGV(J),(R(I,J),I=1,NN)
  580    CONTINUE
      ELSE
C
CE       SLUCAJ ISTYP=1 , RADI PREKO GAMA
CS       SLUCAJ ISTYP=1 , RADI PREKO GAMA
C
         IF(ISTYP.EQ.1)THEN
            DO 20 I=1,NC
   20       EIGV(I)=1.0D0/(1.0D0-EIGV(I))
         ENDIF
C
         CALL RSTAZ(A(LIPODS),LTT,53)
         CALL RSTAZ(A(LIPODS),LW,39)
C
         DO 30 J=1,NROOT
            B1=EIGV(J)
            A1=1.0D0-B1
            CALL ZBIR2(B,TT,W,A1,B1,NN)
            CALL STAPSV(B,A(LID),A(LCVEL),ICVEL,NP,J,EIGV(J),SIL,1)
            CALL SUMSIL(B,A(LID),IOPGL,NP,IZLAZ,1)
            CALL MAKSIS(R(1,J),A(LID),SIL)
            CALL STAPSV(R(1,J),A(LID),A(LCVEL),ICVEL,NP,J,EIGV(J),SIL,2)
            IF(NBLGR.GE.0)
     1    CALL STAGSV(R(1,J),A(LID),A(LCVEL),ICVEL,NP,J,EIGV(J),IGRAF,1)
C
CE          SAVE FOR INITIAL IMPERFECTION
CS          PODACI ZA INICIJALNU IMPERFEKCIJU
C
            WRITE(MODES) EIGV(J),(R(I,J),I=1,NN)
C
   30    CONTINUE
      ENDIF
	KOR=KKOR
      CLOSE (MODES,STATUS='KEEP')
      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE SSPACE(A9,B,MAXA,R,EIGV,TT,W,AR,BR,VEC,D,RTOLV,BUP,BLO,
     1BUPC,NN,NWK,NWM,NROOT,RTOL,NC,NITEM,IFSS,IFPR)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C ......................................................................
C .
CE.   PROGRAM
CE.      TO SLOVE FOR THE SMALLEST EIGENVALUES AND CORRESPONDING
CE.      EIGENVECTORS IN THE GENERALIZED EIGENPROBLEM USING THE
CE.      SUBSPACE ITERATION METHOD
CS.   PROGRAM
CS.      RESAVANJE NAJMANJIH SOPSTVENIH VREDNOSTI I ODGOVARAJUCIH
CS.      SOPSTVENIH VEKTORA UPOTREBOM "SUBSPACE" ITERACIJA
C .
C ......................................................................
      include 'paka.inc'
      
      COMMON /CVOREL/ ICVEL,LCVEL,LELCV,NPA,NPI,LCEL,LELC,NMA,NMI
      COMMON /REPERI/ LCORD,LID,LMAXA,LMHT
      COMMON /GLAVNI/ NP,NGELEM,NMATM,NPER,
     1                IOPGL(6),KOSI,NDIN,ITEST
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      COMMON /SRPSKI/ ISRPS
      DIMENSION A9(*),B(*),R(NN,*),TT(*),W(*),EIGV(*),
     1D(*),VEC(NC,*),AR(*),BR(*),RTOLV(*),BUP(*),BLO(*),BUPC(*),MAXA(*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' SSPACE'
CE    SET TOLERANCE FOR JACOBI ITERATION
CS    TOLERANCIJA ZA JACOBI ITERACIJE
      TOLJ=0.000000000001D0
C
CE    INITIALIZATION
CS    INICIJALIZACIJA
      ICONV=0
      NSCH=0
      NSMAX=12
      N1=NC+1
      NC1=NC-1
      DO 60 I=1,NC
   60 D(I)=0.0D0
C
CE    ESTABLISH STARTING ITERATION VECTORS
CS    POCETNI VEKTORI
C
      ND=NN/NC
      IF(NWM.GT.NN) GO TO 4
      J=0
      DO 2 I=1,NN
      II=MAXA(I)
      R(I,1)=B(I)
      IF(B(I).GT.0.0D0) J=J+1
    2 W(I)=B(I)/A9(II)
      IF(NC.LE.J) GO TO 16
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2007)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6007)
      STOP
    4 DO 10 I=1,NN
      II=MAXA(I)
      R(I,1)=B(II)
   10 W(I)=B(II)/A9(II)
   16 DO 20 J=2,NC
      DO 20 I=1,NN
   20 R(I,J)=0.0D0
C
      L=NN-ND
      DO 30 J=2,NC
      RT=0.0D0
      DO 40 I=1,L
      IF(W(I).LT.RT)GO TO 40
      RT=W(I)
      IJ=I
   40 CONTINUE
      DO 50 I=L,NN
      IF(W(I).LE.RT)GO TO 50
      RT=W(I)
      IJ=I
   50 CONTINUE
      TT(J)=FLOAT(IJ)
      W(IJ)=0.0D0
      L=L-ND
   30 R(IJ,J)=1.0D0
C
CZILE IF(ISRPS.EQ.0)
CZILE1WRITE(IZLAZ,2008)
CZILE IF(ISRPS.EQ.1)
CZILE1WRITE(IZLAZ,6008)
CZILE WRITE(IZLAZ,5002)(TT(J),J=2,NC)
C
CE    FACROTIZE MATRIX A INTO (L)*(D)*(L(T))
CS    FAKTORIZACIJA MATRICE A9  (L)*(D)*(L(T))
C
      ISH=0
      CALL DECOMP(A9,MAXA,NN,ISH)
C
CE--- START OF ITERATION LOOP
CS--- PETLJA ITERACIJA
      NITE=0
  100 NITE=NITE+1
      IF(IFPR.EQ.0)GO TO 90
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2010)NITE
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6010)NITE
C
CE    CALCULATE THE PROJECTIONS OF A AND B
CS    RACUNANJE PROJEKCIJA A9 I B
   90 IJ=0
      DO 110 J=1,NC
      DO 120 K=1,NN
  120 TT(K)=R(K,J)
      CALL REDBAK(A9,TT,MAXA,NN)
      DO 130 I=J,NC
      ART=0.0D0
      DO 140 K=1,NN
  140 ART=ART+R(K,I)*TT(K)
      IJ=IJ+1
  130 AR(IJ)=ART
      DO 150 K=1,NN
  150 R(K,J)=TT(K)
  110 CONTINUE
      IJ=0
      DO 160 J=1,NC
      CALL MULT(TT,B,R(1,J),MAXA,NN,NWM)
      DO 180 I=J,NC
      BRT=0.0D0
      DO 190 K=1,NN
  190 BRT=BRT+R(K,I)*TT(K)
      IJ=IJ+1
  180 BR(IJ)=BRT
      IF(ICONV.GT.0) GO TO 160
      DO 200 K=1,NN
  200 R(K,J)=TT(K)
  160 CONTINUE
C
CE     SOLVE FOR EIGENSYSTEM OF SUBSPACE OPERATORS
CS     SUBSPACE OPERACIJE
C
      IF(IFPR.EQ.0) GO TO 320
      IND=1
  210 CONTINUE
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2020)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6020)
      II=1
      DO 300 I=1,NC
      ITEMP=II+NC-I
      WRITE(IZLAZ,5005)(AR(J),J=II,ITEMP)
  300 II=II+N1-I
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2030)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6030)
      II=1
      DO 310 I=1,NC
      ITEMP=II+NC-I
      WRITE(IZLAZ,5005)(BR(J),J=II,ITEMP)
  310 II=II+N1-I
      IF(IND.EQ.2)GO TO 350
C
  320 CALL JACOBI(AR,BR,VEC,EIGV,W,NC,TOLJ,NSMAX,IFPR)
      IF(IFPR.EQ.0)GO TO 350
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2040)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6040)
      IND=2
      GO TO 210
C
CE    ARRANGE EGINVALUES IN ASCENDING ORDER
CS    ARANZIRANJE SOPSTVENIH VREDNOSTI RASTUCE
C
  350 IS=0
      II=1
      DO 360 I=1,NC1
      ITEMP=II+N1-I
      IF(EIGV(I+1).GE.EIGV(I))GO TO 360
      IS=IS+1
      EIGVT=EIGV(I+1)
      EIGV(I+1)=EIGV(I)
      EIGV(I)=EIGVT
      BT=BR(ITEMP)
      BR(ITEMP)=BR(II)
      BR(II)=BT
      DO 370 K=1,NC
      RT=VEC(K,I+1)
      VEC(K,I+1)=VEC(K,I)
  370 VEC(K,I)=RT
  360 II=ITEMP
      IF(IS.GT.0)GO TO 350
      IF(IFPR.EQ.0)GO TO 375
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2035)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6035)
      WRITE(IZLAZ,5006)(EIGV(I),I=1,NC)
C
CE    CALCULATE B TIMES APROXIMATE EIGENVECTORS(ICONV.EQ.0)
CE    OR FINAL EIGENVECTOR APPROXIMATIONS (ICONV.GT.0)
CS    SRACUNAVANJE B PUTA APROKSIMATIVNI SOPSTVENI VEKTORI (ICONV.EQ.0)
CS    ILI FINALNE APROKSIMACIJE SOPSTVENIH VEKTORA (ICONV.GT.0)
C
  375 DO 420 I=1,NN
      DO 422 J=1,NC
  422 TT(J)=R(I,J)
      DO 424 K=1,NC
      RT=0.0D0
      DO 430 L=1,NC
  430 RT=RT+TT(L)*VEC(L,K)
  424 R(I,K)=RT
  420 CONTINUE
      IF (ICONV.GT.0) GO TO 500
C
CE    CHECK FOR CONVERGENCE OF EIGENVALUES
CS    PROVERA KONVERGENCIJE
C
      DO 380 I=1,NC
      DIF=DABS(EIGV(I)-D(I))
  380 RTOLV(I)=DIF/EIGV(I)
C
C     H.G.MATTHIES  COVERGENCE CRITERIA
C
C*      DO 380 I=1,NC
C*        QTQ=0.D0
C*        DO 377 II=1,NN
C*  377   QTQ=QTQ+R(II,I)*R(II,I)
C*  380 RTOLV(I)=DSQRT(1.D0-EIGV(I)*EIGV(I)/QTQ)
      IF(IFPR.EQ.0) GO TO 385
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2050)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6050)
      WRITE(IZLAZ,5005)(RTOLV(I),I=1,NC)
C
  385 DO 390 I=1,NROOT
      IF(RTOLV(I).GT.RTOL)GO TO 400
  390 CONTINUE
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2060)RTOL
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6060)RTOL
      ICONV=1
      GO TO 100
  400 IF(NITE.LT.NITEM)GO TO 410
CZILE IF(ISRPS.EQ.0)
CZILE1WRITE(IZLAZ,2070)
CZILE IF(ISRPS.EQ.1)
CZILE1WRITE(IZLAZ,6070)
      ICONV=2
      IFSS=0
      GO TO 100
C
  410 DO 440 I=1,NC
  440 D(I)=EIGV(I)
      GO TO 100
C
CE--- END OF ITERATION LOOP
CS--- KRAJ PETLJE ITERACIJA
C
CE    CALCULATE AND PRINT ERROR NORMS
CS    SRACUNAVANJE I STAMPANJE NORME GRESAKA
C
  500 DO 580 L=1,NROOT
      RT=EIGV(L)
      CALL MULT(TT,A9,R(1,L),MAXA,NN,NWK)
      VNORM=0.0D0
      DO 590 I=1,NN
  590 VNORM=VNORM+TT(I)*TT(I)
      CALL MULT(W,B,R(1,L),MAXA,NN,NWM)
      WNORM=0.0D0
      DO 600 I=1,NN
      TT(I)=TT(I)-RT*W(I)
  600 WNORM=WNORM+TT(I)*TT(I)
      VNORM=DSQRT(VNORM)
      WNORM=DSQRT(WNORM)
      D(L)=WNORM/VNORM
  580 CONTINUE
CZILE IF(ISRPS.EQ.0)
CZILE1WRITE(IZLAZ,2115)
CZILE IF(ISRPS.EQ.1)
CZILE1WRITE(IZLAZ,6115)
CZILE WRITE(IZLAZ,5006)(D(I),I=1,NROOT)
C
CE    APPLY STURM SEQUENCE CHECK
CS    STURM SEKVENCE - PROVERA
C
      IF(IFSS.EQ.0)GO TO 700
      CALL SCHECK(EIGV,RTOLV,BUP,BLO,BUPC,D,NC,NEI,RTOL,SHIFT)
C
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2120)SHIFT
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6120)SHIFT
C
CE    SHIFT MATRIXA
CS    SHIFTOVANJE  MATRICE A9
C
      IF(NWM.GT.NN)GO TO 645
      DO 640 I=1,NN
      II=MAXA(I)
  640 A9(II)=A9(II)-B(I)*SHIFT
      GO TO 660
  645 DO 650 I=1,NWK
  650 A9(I)=A9(I)-B(I)*SHIFT
C
CE    FACTORIZE SHIFTED MATRIX
CS    FAKTORIZACIJA SHIFTOVANE MATRCE
C
  660 ISH=1
      CALL DECOMP(A9,MAXA,NN,ISH)
C
CE    COUNT NUMBER OF NEGATIVE DIAGONAL ELEMENTS
CS    BROJ NEGATVNIH DIJAGONALNIH ELEMENATA
C
      NSCH=0
      DO 664 I=1,NN
      II=MAXA(I)
      IF(A9(II).LT.0.0D0)NSCH=NSCH+1
  664 CONTINUE
      IF(NSCH.EQ.NEI) GO TO 670
      NMIS=NSCH-NEI
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2130)NMIS
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6130)NMIS
      GO TO 700
  670 CONTINUE
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2140)NSCH
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6140)NSCH
  700 RETURN
C
C 5002 FORMAT(/' ',10F10.0)
 5005 FORMAT(' ',12(1PD11.4))
 5006 FORMAT(/' ',6(1PD22.14))
C-----------------------------------------------------------------------
 2007 FORMAT(///' STOP, NC JE VECE OD BROJA STEPENI SLOBODE MASA')
C 2008 FORMAT(///' STEPENI SLOBODE POBUDJENI POCETNIM ITERACIONIM ',
C     1'VEKTORIMA')
 2010 FORMAT(/'1'/' I T E R A C I J A   B R O J ',I4)
 2020 FORMAT(/' PROJEKCIJA MATRICE A (MATRICA AR)')
 2030 FORMAT(/' PROJEKCIJA MATRICE B (MATRICA BR)')
 2035 FORMAT(/' SOPSTVENE VREDNOSTI  AR-LAMBDA*BR')
 2040 FORMAT(/' AR  I  BR POSLE JACOBI DIJAGONALIZACIJE')
 2050 FORMAT(/' RELATIVNA TOLERANCIJA PREKORACENA KOD SOPSTVENIH VRED.')
 2060 FORMAT(///,' KONVERGENCIJA POSTIGNUTA ZA RTOL ',1PD10.3)
C 2070 FORMAT(/'1'/' *** NE KONVERGIRA U MAKSIMALNOM BROJU ITERACIJA',
C     1          /' USVAJAJU SE VREDNOSTI IZ TEKUCE ITERACIJE'/
C     2           ' PROVERA STURM SEKVENCE SE NE VRSI')
C 2115 FORMAT(//' NORME GRESAKA SOPSTVENIH VREDNOSTI')
 2120 FORMAT(///' PROVERA PRIMENJENA U OBRTU ',1PD22.14)
 2130 FORMAT(//' NEDOSTAJE ',I4,' SOPSTVENIH VREDNOSTI')
 2140 FORMAT(//' PRONADJENE SU NAJNIZE ',I4,' SOPSTVENE VREDNOSTI')
C-----------------------------------------------------------------------
 6007 FORMAT(///' ',' STOP, NC IS LARGER THAN THE NUMBER OF MASS ',
     1'DEGREES OF FREEDOM')
C 6008 FORMAT(///' ',' DEGREES OF FREEDOM EXCITED BY UNIT ',
C     1'STARTING ITERATION XECTORS')
 6010 FORMAT('1','ITERATION NUMBER',I4)
 6020 FORMAT(28H0 PROJECTION OF A(MATRIX AR))
 6030 FORMAT(28H0 PROJECTION OF B(MATRIX BR))
 6035 FORMAT('0',' EIGENVALUES OF AR-LAMBDA*BR')
 6040 FORMAT(40H0 AR AND BR AFTER JACOBI DIAGONALIZATION)
 6050 FORMAT(43H0 RELATIVE TOLERANCE REACHNED ONEIGENVALUES)
 6060 FORMAT(///,' CONVERGENCE REACHED FOR RTOL',E10.3)
C 6070 FORMAT(1H1,'*** NO CONVERGENCE IN MAXIMUM NUMBER OF ITERATIONS',
C     1          ' PERMITTED'/' WE ACCEPT CURRENT ITERATION VALUES'/
C     2           ' THE STURM SEQUENCE CHECK IS NOT PERFORMED')
C 6115 FORMAT(//1X,36HPRINT ERROR NORMS ON THE EIGENVALUES)
 6120 FORMAT(///,' CHECK APPLIED AT SHIFT',E22.14)
 6130 FORMAT(//' THERE ARE',I4,'EIGENVALUES MISSING')
 6140 FORMAT(//' WE FOUND THE LOWEST',I4,' EIGENVALUES')
C-----------------------------------------------------------------------
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE DECOMP(A,MAXA,NN,ISH)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   PROGRAM
CE.      TO CALCULATE (L)*(D)*(L)(T) FACTORIZATION OF
CE.      STIFFNESS MATRIX
CS.   PROGRAM
CS.      ZA IZRACUNAVANJE (L)*(D)*(L)(T) FAKTORIZACIJE MATRICE KRUTOSTI
C .
C ......................................................................
C
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      COMMON /SRPSKI/ ISRPS
      DIMENSION A(*),MAXA(*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' DECOMP'
      IF(NN.EQ.1)RETURN
C
      DO 200 N=1,NN
      KN=MAXA(N)
      KL=KN+1
      KU=MAXA(N+1)-1
      KH=KU-KL
      IF(KH)304,240,210
  210 K=N-KH
      IC=0
      KLT=KU
      DO 260 J=1,KH
      IC=IC+1
      KLT=KLT-1
      KI=MAXA(K)
      ND=MAXA(K+1)-KI-1
      IF(ND)260,260,270
  270 KK=MIN0(IC,ND)
      C=0.0D0
      DO 280 L=1,KK
  280 C=C+A(KI+L)*A(KLT+L)
      A(KLT)=A(KLT)-C
  260 K=K+1
  240 K=N
      B=0.0D0
      DO 300 KK=KL,KU
      K=K-1
      KI=MAXA(K)
      C=A(KK)/A(KI)
      IF(DABS(C).LT.1.D07) GO TO 290
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2010)N,C
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6010)N,C
      STOP
  290 B=B+C*A(KK)
  300 A(KK)=C
      A(KN)=A(KN)-B
  304 IF(A(KN))310,310,200
  310 IF(ISH.EQ.0)GO TO 320
      IF(DABS(A(KN)).LT.1.0D-20) A(KN)=-1.0D-16
      GO TO 200
  320 CONTINUE
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2000)N,A(KN)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6000)N,A(KN)
      STOP
  200 CONTINUE
C
      RETURN
C-----------------------------------------------------------------------
 2000 FORMAT(//' STOP - MATRICA KRUTOSTI NIJE POZITIVNO DEFINITNA'//
     1         ' NEGATIVAN PIVOT ZA JEDNACINU ',I4//
     2         ' PIVOT = ',1PD20.12)
 2010 FORMAT(//' STOP - STURM SEKVENCE PROVERA -',
     1' RAST MNOZIOCA  KOLONA ',I4//' MNOZIOC=',1PD20.8)
C-----------------------------------------------------------------------
 6000 FORMAT(//' STOP-STIFFNESS MATRIX NOT POSITIVE ',
     1        'DEFINITE',//' NONPOSITIVE PIVOT FOR ',
     2        'EQUATION',I4,//' PIVOT=',D20.12)
 6010 FORMAT(//' STOP-STURM SEQUENCE CHECK FAILED BECAUSE OF ',
     1'MULTIPLIER GROWTH FOR COLUMN NUMBER',I4,//' MULTIPLIER=',D20.8)
C-----------------------------------------------------------------------
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE REDBAK(A,V,MAXA,NN)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   PROGRAM
CE.      TO REDUCE AND BACK-SUBSTITUTE ITERATION VECTORS		
CS.   PROGRAM
CS.      ZA REDUKCIJU I ZAMENU U NAZAD ZAMENA UNAZAD
C.....................................................................
C
      DIMENSION A(*),V(*),MAXA(*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' REDBAK'
      DO 400 N=1,NN
      KL=MAXA(N)+1
      KU=MAXA(N+1)-1
      IF(KU-KL)400,410,410
  410 K=N
      C=0.0D0
      DO 420 KK=KL,KU
      K=K-1
  420 C=C+A(KK)*V(K)
      V(N)=V(N)-C
  400 CONTINUE
C
      DO 480 N=1,NN
      K=MAXA(N)
  480 V(N)=V(N)/A(K)
      IF(NN.EQ.1)RETURN
      N=NN
      DO 500 L=2,NN
      KL=MAXA(N)+1
      KU=MAXA(N+1)-1
      IF(KU-KL)500,510,510
  510 K=N
      DO 520 KK=KL,KU
      K=K-1
  520 V(K)=V(K)-A(KK)*V(N)
  500 N=N-1
      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE MULT(TT,B,RR,MAXA,NN,NWM)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   PROGRAM
CE.      TO EVALUATE OF B TIMES RR AND STORE RESULT IN TT
CS.   PROGRAM
CS.      SRACUNAVA B PUTA RR , REZULTAT U TT
C .
C ......................................................................
C
      DIMENSION TT(*),B(*),RR(*),MAXA(*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' MULT'
      IF(NWM.GT.NN) GO TO 20
      DO 10 I=1,NN
   10 TT(I)=B(I)*RR(I)
      RETURN
C
   20 DO 40 I=1,NN
   40 TT(I)=0.0D0
      DO 100 I=1,NN
      KL=MAXA(I)
      KU=MAXA(I+1)-1
      II=I+1
      CC=RR(I)
      DO 100 KK=KL,KU
      II=II-1
  100 TT(II)=TT(II)+B(KK)*CC
      IF(NN.EQ.1)RETURN
      DO 200 I=2,NN
      KL=MAXA(I)+1
      KU=MAXA(I+1)-1
      IF(KU-KL)200,210,210
  210 II=I
      AA=0.0D0
      DO 220 KK=KL,KU
      II=II-1
  220 AA=AA+B(KK)*RR(II)
      TT(I)=TT(I)+AA
  200 CONTINUE
      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE SCHECK(EIGV,RTOLV,BUP,BLO,BUPC,NEIV,NC,NEI,RTOL,SHIFT)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   PROGRAM
CE.      TO EVALUATE SHIFT FOR STURM SEQUENCE CHECK
CS.   PROGRAM
CS.      RESAVA OBRT ZA PROVERU STURM SEKVENCE
C .
C ......................................................................
C
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      DIMENSION EIGV(*),RTOLV(*),BUP(*),BLO(*),BUPC(*),NEIV(*)
      COMMON /SRPSKI/ ISRPS
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' SCHECK'
      FTOL=0.01D0
C
      DO 100 I=1,NC
      BUP(I)=EIGV(I)*(1.0D0+FTOL)
  100 BLO(I)=EIGV(I)*(1.0D0-FTOL)
      NROOT=0
      DO 120 I=1,NC
  120 IF(RTOLV(I).LT.RTOL) NROOT=NROOT+1
      IF(NROOT.GE.1)GO TO 200
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2010)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6010)
      STOP
C
CE    FIND UPPER BOUNOS ON EIGENVALUE CLUSTERS
CS    FIND UPPER BOUNOS ON EIGENVALUE CLUSTERS
C
  200 DO 240 I=1,NROOT
  240 NEIV(I)=1
      IF(NROOT.NE.1)GO TO 260
      BUPC(1)=BUP(1)
      LM=1
      L=1
      I=2
      GO TO 295
  260 L=1
      I=2
  270 IF(BUP(I-1).LE.BLO(I))GO TO 280
      NEIV(L)=NEIV(L)+1
      I=I+1
      IF(I.LE.NROOT)GO TO 270
  280 BUPC(L)=BUP(I-1)
      IF(I.GT.NROOT)GO TO 290
      L=L+1
      I=I+1
      IF(I.LE.NROOT)GO TO 270
      BUPC(L)=BUP(I-1)
  290 LM=L
      IF(NROOT.EQ.NC)GO TO 300
  295 IF(BUP(I-1).LE.BLO(I)) GO TO 300
      IF(RTOLV(I).GT.RTOL)GO TO 300
      BUPC(L)=BUP(I)
      NEIV(L)=NEIV(L)+1
      NROOT=NROOT+1
      IF(NROOT.EQ.NC)GO TO 300
      I=I+1
      GO TO 295
C
CE    FIND SHIFT
CS    FIND SHIFT
C
  300 CONTINUE
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2020)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6020)
      WRITE(IZLAZ,5005)(BUPC(I),I=1,LM)
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2030)
      IF(ISRPS.EQ.15)
     1WRITE(IZLAZ,6030)
      WRITE(IZLAZ,5006)(NEIV(I),I=1,LM)
      LL=LM-1
      IF(LM.EQ.1) GO TO 310
  330 DO 320 I=1,LL
  320 NEIV(L)=NEIV(L)+NEIV(I)
      L=L-1
      LL=LL-1
      IF(L.NE.1)GO TO 330
  310 CONTINUE
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2040)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6040)
      WRITE(IZLAZ,5006)(NEIV(I),I=1,LM)
      L=0
      DO 340 I=1,LM
      L=L+1
      IF(NEIV(I).GE.NROOT)GO TO 350
  340 CONTINUE
  350 SHIFT=BUPC(L)
      NEI=NEIV(L)
      RETURN
C
 5005 FORMAT(/6(1PD22.14))
 5006 FORMAT(/6I22)
C-----------------------------------------------------------------------
 2010 FORMAT(/' ***ERROR SOLUTION STOP IN *SCHECK*'/12X,
     1        ' NO EIGENVALUES FOUND.'/1X)
 2020 FORMAT(///' UPPER BOUNDS ON EIGENVALUE CLUSTERS')
 2030 FORMAT(/' NO OF EIGENVALUES IN EACH CLUSTER')
 2040 FORMAT(/' NO OF EIGENVALUES LESS THAN UPPER BOUNDS')
C-----------------------------------------------------------------------
 6010 FORMAT(/' ***ERROR SOLUTION STOP IN *SCHECK*'/12X,
     1        ' NO EIGENVALUES FOUND.'/1X)
 6020 FORMAT(///' UPPER BOUNDS ON EIGENVALUE CLUSTERS')
 6030 FORMAT(/' NO OF EIGENVALUES IN EACH CLUSTER')
 6040 FORMAT(/' NO OF EIGENVALUES LESS THAN UPPER BOUNDS')
C-----------------------------------------------------------------------
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE JACOBI(A,B,X,EIGV,D,N,RTOL,NSMAX,IFPR)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.    PROGRAM
CE.       TO SOLVE THE GENERALIZED EIGENPROBLEM USING THE
CE.       GENERALIZED JACOBI ITERATION
CS.    PROGRAM
CS.       TO SOLVE THE GENERALIZED EIGENPROBLEM USING THE
CS.       GENERALIZED JACOBI ITERATION
C .
C ......................................................................
C
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      DIMENSION A(*),B(*),X(N,*),EIGV(*),D(*)
      COMMON /SRPSKI/ ISRPS
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' JACOBI'
CE    INITIALIZE EIGENVALUE AND EIGENVECTOR MATRICES
CS    INICIALIZACIJA MATRICA SOPSTVENIH VREDNOSTI I SOPSTVENIH VEKTORA
C
      N1=N+1
      II=1
      DO 10 I=1,N
      IF(A(II).GT.0.0D0.AND.B(II).GT.0.0D0)GO TO 4
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2020)II,A(II),B(II)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6020)II,A(II),B(II)
      STOP
    4 D(I)=A(II)/B(II)
      EIGV(I)=D(I)
   10 II=II+N1-I
      DO 30 I=1,N
      DO 20 J=1,N
   20 X(I,J)=0.0D0
   30 X(I,I)=1.0D0
      IF(N.EQ.1)RETURN
C
CE    INITIALIZE SWEEP COUNTER AND BEGIN ITERATION
CS    INICIALIZACIJA SWEEP BROJACA I POCETAK ITERACIJA
C
      NSWEEP=0
      NR=N-1
   40 NSWEEP=NSWEEP+1
      IF(IFPR.EQ.1) THEN
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2000)NSWEEP
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6000)NSWEEP
      ENDIF
C
CE    CHECK IF PRESENT OFF-DIAGONAL ELEMENT ISLARGE
CE    ENOUGH TO REQUIRE ZEROING
CS    CHECK IF PRESENT OFF-DIAGONAL ELEMENT ISLARGE
CS    ENOUGH TO REQUIRE ZEROING
      EPS=(.01D0**NSWEEP)**2
      DO 210 J=1,NR
      JP1=J+1
      JM1=J-1
      LJK=JM1*N-JM1*J/2
      JJ=LJK+J
      DO 210 K=JP1,N
      KP1=K+1
      KM1=K-1
      JK=LJK+K
      KK=KM1*N-KM1*K/2+K
      EPTOLA=(A(JK)*A(JK))/(A(JJ)*A(KK))
      EPTOLB=(B(JK)*B(JK))/(B(JJ)*B(KK))
      IF((EPTOLA.LT.EPS).AND.(EPTOLB.LT.EPS))GO TO 210
C
C     IF ZEROING IS REQIRED,CALCULATE THE ROTATION MATRIX ELEMENTS
C     CA AND CG
C
      AKK=A(KK)*B(JK)-B(KK)*A(JK)
      AJJ=A(JJ)*B(JK)-B(JJ)*A(JK)
      AB=A(JJ)*B(KK)-A(KK)*B(JJ)
      CHECK=(AB*AB+4.0D0*AKK*AJJ)/4.0D0
      IF(CHECK)50,60,60
   50 CONTINUE
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2020)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6020)
      STOP
   60 SQCH=DSQRT(CHECK)
      D1=AB/2.0D0+SQCH
      D2=AB/2.0D0-SQCH
      DEN=D1
      IF(DABS(D2).GT.DABS(D1))DEN=D2
      IF(DEN)80,70,80
   70 CA=0.0D0
      CG=-A(JK)/A(KK)
      GO TO 90
   80 CA=AKK/DEN
      CG=-AJJ/DEN
C
C     PERFORM THE GENERALIZED ROTATION TO ZERO THE
C     PRESENT OFF-DIAGONAL ELEMENT
C
   90 IF(N-2)100,190,100
  100 IF(JM1-1)130,110,110
  110 DO 120 I=1,JM1
      IM1=I-1
      IJ=IM1*N-IM1*I/2+J
      IK=IM1*N-IM1*I/2+K
      AJ=A(IJ)
      BJ=B(IJ)
      AK=A(IK)
      BK=B(IK)
      A(IJ)=AJ+CG*AK
      B(IJ)=BJ+CG*BK
      A(IK)=AK+CA*AJ
  120 B(IK)=BK+CA*BJ
  130 IF(KP1-N)140,140,160
  140 LJI=JM1*N-JM1*J/2
      LKI=KM1*N-KM1*K/2
      DO 150 I=KP1,N
      JI=LJI+I
      KI=LKI+I
      AJ=A(JI)
      BJ=B(JI)
      AK=A(KI)
      BK=B(KI)
      A(JI)=AJ+CG*AK
      B(JI)=BJ+CG*BK
      A(KI)=AK+CA*AJ
  150 B(KI)=BK+CA*BJ
  160 IF(JP1-KM1)170,170,190
  170 LJI=JM1*N-JM1*J/2
      DO 180 I=JP1,KM1
      JI=LJI+I
      IM1=I-1
      IK=IM1*N-IM1*I/2+K
      AJ=A(JI)
      BJ=B(JI)
      AK=A(IK)
      BK=B(IK)
      A(JI)=AJ+CG*AK
      B(JI)=BJ+CG*BK
      A(IK)=AK+CA*AJ
  180 B(IK)=BK+CA*BJ
  190 AK=A(KK)
      BK=B(KK)
      A(KK)=AK+2.0D0*CA*A(JK)+CA*CA*A(JJ)
      B(KK)=BK+2.0D0*CA*B(JK)+CA*CA*B(JJ)
      A(JJ)=A(JJ)+2.0D0*CG*A(JK)+CG*CG*AK
      B(JJ)=B(JJ)+2.0D0*CG*B(JK)+CG*CG*BK
      A(JK)=0.0D0
      B(JK)=0.0D0
C
C     UPDATE THE EIGENVECTOR MATRIX AFTEREACH ROTATION
C
      DO 200 I=1,N
      XJ=X(I,J)
      XK=X(I,K)
      X(I,J)=XJ+CG*XK
  200 X(I,K)=XK+CA*XJ
  210 CONTINUE
C
CE    UPDATE THE EIGENVALUES AFTER EACH SWEEP
CS    KORIGOVANJE SOPSTVENIH VREDNOSTI POSLE SVAKOG SWEEP
C
      II=1
      DO 220 I=1,N
      IF(A(II).GT.0.0D0.AND.B(II).GT.0.0D0)GO TO 215
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2020)II,A(II),B(II)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6020)II,A(II),B(II)
      STOP
  215 EIGV(I)=A(II)/B(II)
  220 II=II+N1-I
      IF(IFPR.EQ.0)GO TO 230
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2030)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6030)
      WRITE(IZLAZ,5010)(EIGV(I),I=1,N)
C
CE    CHECK FOR CONVERGENCE
CS    PROVERA KONVERGENCIJE
  230 DO 240 I=1,N
      TOL=RTOL*D(I)
      DIF=DABS(EIGV(I)-D(I))
      IF(DIF.GT.TOL)GO TO 280
  240 CONTINUE
CE    CHECK ALL OFF-DIAGONAL ELEMENTS TO SEE IF ANOTHER
CE    SWEEP IS REQUIRED
CS    CHECK ALL OFF-DIAGONAL ELEMENTS TO SEE IF ANOTHER
CS    SWEEP IS REQUIRED
C
      EPS=RTOL**2
      DO 250 J=1,NR
      JM1=J-1
      JP1=J+1
      LJK=JM1*N-JM1*J/2
      JJ=LJK+J
      DO 250 K=JP1,N
      KM1=K-1
      JK=LJK+K
      KK=KM1*N-KM1*K/2+K
      EPSA=(A(JK)*A(JK))/(A(JJ)*A(KK))
      EPSB=(B(JK)*B(JK))/(B(JJ)*B(KK))
      IF((EPSA.LT.EPS).AND.(EPSB.LT.EPS))GO TO 250
      GO TO 280
  250 CONTINUE
C
CE    FILL OUT BOTTOM TRIANGLE OF RESULTANT MATRICES
CE    AND SCALE EIGENVECTORS
CS    FILL OUT BOTTOM TRIANGLE OF RESULTANT MATRICES
CS    AND SCALE EIGENVECTORS
C
  255 II=1
      DO 275 I=1,N
      BB=DSQRT(B(II))
      DO 270 K=1,N
  270 X(K,I)=X(K,I)/BB
  275 II=II+N1-I
      RETURN
C
CE    UPDATE D MATRIX AND START NEW SWEEP,IF ALLOWED
CS    UPDATE D MATRIX AND START NEW SWEEP,IF ALLOWED
C
  280 DO 290 I=1,N
  290 D(I)=EIGV(I)
      IF(NSWEEP.LT.NSMAX) GO TO 40
      GO TO 255
C
 5010 FORMAT(/6(1PD20.12))
C-----------------------------------------------------------------------
 2000 FORMAT(/' SWEEP NUMBER IN *JACOBI* = ',I4)
 2020 FORMAT(/' *** EROR SOLUTION STOP'/
     1        ' MATRICES NOT POSITIVE DEFINITE'/
     2' II = ',I4,'   A(II) = ',1PD20.12,'   B(II) = ',1PD20.12)
 2030 FORMAT(/' CURRENT EIGENVALUES IN *JACOBI* ARE'/)
C-----------------------------------------------------------------------
 6000 FORMAT(/' SWEEP NUMBER IN *JACOBI* = ',I4)
 6020 FORMAT(/' *** EROR SOLUTION STOP'/
     1        ' MATRICES NOT POSITIVE DEFINITE'/
     2' II = ',I4,'   A(II) = ',1PD20.12,'   B(II) = ',1PD20.12)
 6030 FORMAT(/' CURRENT EIGENVALUES IN *JACOBI* ARE'/)
C-----------------------------------------------------------------------
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE STAPSV(RTH,ID,NCVEL,ICVEL,NP,KOR,VREME,SIL,IND)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   PROGRAM
CE.      ZA STAMPANJE SOPSTVENIH VREDNOSTI I SOPSTVENIH VEKTORA
CS.   PROGRAM
CS.      ZA STAMPANJE SOPSTVENIH VREDNOSTI I SOPSTVENIH VEKTORA
C .
C ......................................................................
C
      COMMON /ITERBR/ ITER
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      DIMENSION RTH(*),ID(NP,*),NCVEL(*),FSP(6)
      COMMON /SRPSKI/ ISRPS
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' STAPSV'
      IF(IND.EQ.0.AND.KOR.EQ.1) THEN
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2000)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6000)
      ENDIF
      IF(IND.EQ.0) THEN
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2020) KOR,VREME
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6020) KOR,VREME
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2230) SIL
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6230) SIL
      ENDIF
      IF(IND.EQ.1) THEN
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2110)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6110)
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2120) KOR,VREME
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6120) KOR,VREME
      ENDIF
      IF(IND.EQ.2) THEN
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2210)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6210)
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2220) KOR,VREME
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6220) KOR,VREME
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2230) SIL
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6230) SIL
      ENDIF
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2010)
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6010)
      DO 20 I=1,NP
C         INULA=0
         INULA=1
         DO 10 J=1,6
            FSP(J) = 0.0D0
            IF(ID(I,J).EQ.0) GO TO 10
            K = ID(I,J)
            FSP(J) = RTH(K)
            IF(DABS(FSP(J)).GT.1.0D-10) INULA=1
   10    CONTINUE
         IF(INULA.EQ.0) GO TO 20
         IF(ICVEL.EQ.0) THEN
            NI=I
         ELSE
            NI=NCVEL(I)
         ENDIF
         WRITE(IZLAZ,5100) NI,(FSP(J),J=1,6)
CGOSA
C         WRITE(55) NI,(REAL(FSP(J)),J=1,3)
CGOSA
   20 CONTINUE
      RETURN
C
 5100 FORMAT(' ',I5,6(1PD12.4))
C-----------------------------------------------------------------------
 2000 FORMAT(///'1'/' S O P S T V E N E     F R E K V E N C I J E     I
     1    V E K T O R I'/' ',67('-'))
 2020 FORMAT(//' SOPSTVENA FREKVENCIJA BROJ =',I5,7X,
     1'SOP. FREKVENCIJA =',1PD12.5)
 2110 FORMAT(///'1'/' K R I T I C N E     S I L E'/' ',27('-'))
 2120 FORMAT(//' KRITICNA SILA BROJ =',I5,8X,
     1' SOPSTVENA VREDNOST =',1PD12.5)
 2210 FORMAT(///'1'/' S O P S T V E N I     V E K T O R I'/' ',35('-'))
 2220 FORMAT(//' SOPSTVENI VEKTOR BROJ =',I5,8X,
     1' SOPSTVENA VREDNOST =',1PD12.5)
 2230 FORMAT(//' POMERANJA SU NORMIRANA SA, MAXPOM =',1PD12.5)
 2010 FORMAT(//
     1' ',' CVOR',5X,'X',11X,'Y',11X,'Z',11X,'XT',10X,'YT',10X,'ZT')
C-----------------------------------------------------------------------
 6000 FORMAT(///'1'/' E I G E N     F R E Q U E N C I E S     A N D      
     1V E C T O R S'/' ',63('-'))
 6020 FORMAT(//' EIGEN FREQUENCY NUMBER =',I5,7X,
     1'EIGEN FREQUENCY =',1PD12.5)
 6110 FORMAT(///'1'/' C R I T I C A L     L O A D'/' ',27('-'))
 6120 FORMAT(//' CRITICAL LOAD NUMBER =',I5,8X,
     1' CRITICAL LOAD VALUE =',1PD12.5)
 6210 FORMAT(///'1'/' E I G E N     V E C T O R S'/' ',27('-'))
 6220 FORMAT(//' EIGEN VECTOR NUMBER =',I5,8X,
     1' EIGEN VALUE =',1PD12.5)
 6230 FORMAT(//' VALUES ARE NORMALIZED BY MAXPOM =',1PD12.5)
 6010 FORMAT(//
     1' ',' NODE',5X,'X',11X,'Y',11X,'Z',11X,'XT',10X,'YT',10X,'ZT')
C-----------------------------------------------------------------------
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE STAGSV(RTH,ID,NCVEL,ICVEL,NP,KOR,VREME,II,IND)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   PROGRAM
CE.      TO PRINT EIGENVALUES IN UNIVERZAL FILE
CS.   PROGRAM
CS.      ZA STAMPANJE SOPSTVENIH VREDNOSTI U UNIVERZALNI FILE
C .
C ......................................................................
C
      CHARACTER*250 NASLOV
      COMMON /NASLOV/ NASLOV
      COMMON /SRPSKI/ ISRPS
      COMMON /CDEBUG/ IDEBUG
      DIMENSION RTH(*),ID(NP,*),NCVEL(*)
      DIMENSION FSP(6)
C
      IF(IDEBUG.GT.0) PRINT *, ' STAGSV'
CE    STRUCTURAL ANALYSIS = 1
CS    STRUKTURNA ANALIZA = 1
      IMOTY=1
CE    STEADY STATE = 1; TRANSIENT = 4
CS    STACIONARAN = 1; NESTACIONARAN = 4
      IFAT2=1
      IANTY=4
      IFAT1=2
      FATY8=VREME
      IDACH=3
CE    EIGENVALUES = 4
CS    SOPSTVENE VREDNOSTI = 4
      ISDTY=6
C      IF(IND.EQ.1) ISDTY=4
CE    SINGLE PRECISION = 2; DOUBLE PRECISION = 4
CS    PRECIZNOST JEDNOSTRUKA = 2; DVOSTRUKA = 4
      IDATY=2
CE    NUMBER DATA = 6
CS    BROJ PODATAKA = 6
      NDVPN=6
      IND1=-1
      ITYP=55
      WRITE(II,5100) IND1
      WRITE(II,5100) ITYP
      WRITE(II,5003) NASLOV
      IF(IND.EQ.0) THEN
      IF(ISRPS.EQ.0)
     1WRITE(II,2005)
      IF(ISRPS.EQ.1)
     1WRITE(II,6005)
      ENDIF
      IF(IND.EQ.1) THEN
      IF(ISRPS.EQ.0)
     1WRITE(II,2006)
      IF(ISRPS.EQ.1)
     1WRITE(II,6006)
      ENDIF
      IF(ISRPS.EQ.0)
     1WRITE(II,2004) KOR
      IF(ISRPS.EQ.1)
     1WRITE(II,6004) KOR
      WRITE(II,5000) IMOTY,IANTY,IDACH,ISDTY,IDATY,NDVPN
      WRITE(II,5000) IFAT1,IFAT2,KOR
      WRITE(II,5200) FATY8
      DO 10 I=1,NP
         IF(ICVEL.EQ.0) THEN
            WRITE(II,5000) I
         ELSE
            WRITE(II,5000) NCVEL(I)
         ENDIF
         DO 20 J=1,6
            FSP(J) = 0.0D0
            IF(ID(I,J).EQ.0) GO TO 20
            K = ID(I,J)
            FSP(J) = RTH(K)
   20    CONTINUE
         WRITE(II,5200) (FSP(J),J=1,6)
   10 CONTINUE
      WRITE(II,5100) IND1
      RETURN
C
 5100 FORMAT(I6)
 5003 FORMAT(A80)
 5000 FORMAT(8I10)
 5200 FORMAT(6(1PE13.5))
C-----------------------------------------------------------------------
 2005 FORMAT(' SOPSTVENE VREDNOSTI I VEKTORI')
 2006 FORMAT(' KRITICNE SILE')
 2004 FORMAT('DATUM I VREME'/
     1       'PRAZNA'/
     1       'SLUCAJ OPTERECENJA:',I10)
C-----------------------------------------------------------------------
 6005 FORMAT(' EIGEN VALUES AND VECTORS')
 6006 FORMAT(' CRITICAL LOAD')
 6004 FORMAT('DATE AND TIME'/
     1       'EMPTY '/
     1       'LOAD CASE NUMBER  :',I10)
C-----------------------------------------------------------------------
      END
C=======================================================================
      SUBROUTINE SUMSIL(B,ID,IOPGL,NP,IZLAZ,IND)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
CS  SUMA SILA ZA POJEDINE STEPENE SLOBODE
CE  FORCES SUM ON EVERY D.O.F.
C
      DIMENSION B(*),ID(NP,*),IOPGL(*),SUM(6)
      DO 10 J=1,6
      SUM(J)=0.D0
       IF(IOPGL(J).EQ.0)THEN
        DO 5 I=1,NP
        K=ID(I,J)
    5   IF(K.GT.0)SUM(J)=SUM(J)+B(K)
       ENDIF
   10 CONTINUE
      IF(IND.EQ.1) WRITE(IZLAZ,1000) SUM      
 1000 FORMAT(//
     16X,'SUM FX =',1PD12.5,'  SUM FY =',1PD12.5,'  SUM FZ =',1PD12.5/
     16X,'SUM MX =',1PD12.5,'  SUM MY =',1PD12.5,'  SUM MZ =',1PD12.5)
      END
