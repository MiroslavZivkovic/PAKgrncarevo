C=======================================================================
C
C        INTEGRALJENJE MATRICA 3/D ELEMENATA
C
C   SUBROUTINE K21EGL
C              READE3
C              SIST3E
C              ELTE3
C              MEL31
C              MEL32
C              MEL33
C              MEL34
C              MEL35
C              BETBE3
C              JACTE3
C              JACGA3
C              GRGSG3
C              GRAD3T
C              BE30TE
C              MAMOD3
C              STERM3
C              MDMAT3
C
C=======================================================================
      SUBROUTINE K21EGL
      USE PLAST3D
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   P R O G R A M
CE.       TO CALL ROUTINES FOR CALCULATION OF 3-D ELEMENT MATRICES
CS.   P R O G R A M
CS.       ZA POZIVANJE PROGRAMA ZA FORMIRANJE MATRICA I VEKTORA 3-D 
CS.       ELEMENATA 
C .
CE.    P O I N T E R S
CE.       LAU   - POINTER FOR ARRAY AU(*) USED FOR READING OF ELEMENT
CE.               INPUT DATA AND INITIALIZATION
CE.       LAE   - POINTER FOR WORKING SPACE USED FOR INTEGRATION OF
CE.               ELEMENT MATRICES AND VECTORS 
C .
CE.    V A R I A B L E S
CE.       NCVE  - MAXIMUM NUMBER OF NODES PER ELEMENT
CE.       ND    - NUMBER OF D.O.F PER 3D ELEMENT
C .
C ......................................................................
C
      include 'paka.inc'
      
      COMMON /IZOL4B/ NGS12,ND,MSLOJ,MXS,MSET,LNSLOJ,LMATSL,LDSLOJ,LBBET
      COMMON /DUZINA/ LMAX,MTOT,LMAXM,LRAD,NRAD
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      COMMON /ELEMAE/ MXAE,LAE,LMXAE,LHE,LBET,LBED,LRTHE,LSKE,LLM
      COMMON /ELEMAU/ MXAU,LAU,LLMEL,LNEL,LNMAT,LTHID,LIPGC,LIPRC,LISNA,
     1 LMXAU,LAPRS
      COMMON /DUPLAP/ IDVA
      COMMON /SRPSKI/ ISRPS
      COMMON /OBNOVA/ IRUSI
      COMMON /ELEALL/ NETIP,NE,IATYP,NMODM,NGE,ISKNP,LMAX8
C
      LAU=LMAX
CE    READING DATA FROM RECORDS OF THE FILE (ZIELEM) WRITTEN IN ROUTINE
CE    (UL3EK)
      CALL READE3(A(LAU))
      CALL DELJIV(LMAX,2,INDL)
      IF(INDL.EQ.0) LMAX=LMAX+1
      LAE=LMAX
CE    SPACE USED FOR INTEGRATION OF ELEMENT VECTORS AND MATRICES
      MXAE = ND+(52*NCVE+ND*(ND+1)/2+30*6)*IDVA
      LMAX = LAE + MXAE
      IF(LMAX.LT.MTOT) GO TO 70
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2009) LMAX,MTOT
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6009) LMAX,MTOT
      STOP
C
CE    FORM POINTERS FOR ELEMENT MATRICES AND VECTORS
CS    FORMIRANJE MATRICE KRUTOSTI ELEMENATA I PAKOVANJE U SISTEM
C
   70 CALL SIST3E(A(LAE),A(LAU))
C
      IF ((NMODM.GE.5) .AND. (IATYP.GT.0)) THEN
      DEALLOCATE(PLAST)
      DEALLOCATE(PLAS1)
      IF(IRUSI.EQ.1) DEALLOCATE(PLAS0)
      ENDIF
      RETURN
C-----------------------------------------------------------------------
 2009 FORMAT(/1X,'NEDOVOLJNA DIMENZIJA U OSNOVNOM RADNOM VEKTORU A ZA UC
     1ITAVANJE ULAZNIH PODATAKA'/1X,'POTREBNA DIMENZIJA, LMAX=',I10/1X,'
     2RASPOLOZIVA DIMENZIJA, MTOT=',I10)
C-----------------------------------------------------------------------
 6009 FORMAT(///' NOT ENOUGH SPACE IN WORKING VECTOR  A'
     1/' REQUESTED DIMENSION , LMAX=',I10
     2/' AVAILABLE DIMENSION , MTOT=',I10)
C-----------------------------------------------------------------------
      END
C======================================================================
      SUBROUTINE READE3(AU)
      USE PLAST3D
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   P R O G R A M
CE.       TO READ DATA FROM RECORDS OF THE FILE (ZIELEM) IN ARRAY AU(*)
CS.   P R O G R A M
CS.       ZA UCITAVANJE ULAZNIH PODATAKA U AU
C .
C ......................................................................
C
      include 'paka.inc'
      
      COMMON /IZOL4B/ NGS12,ND,MSLOJ,MXS,MSET,LNSLOJ,LMATSL,LDSLOJ,LBBET
      COMMON /ELEMAU/ MXAU,LAU,LLMEL,LNEL,LNMAT,LTHID,LIPGC,LIPRC,LISNA,
     1 LMXAU,LAPRS
      COMMON /SIMO2D/ LALFE,LHAEM,LHINV,LGEEK,IALFA
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /ELEALL/ NETIP,NE,IATYP,NMODM,NGE,ISKNP,LMAX8
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      COMMON /DUZINA/ LMAX,MTOT,LMAXM,LRAD,NRAD
      COMMON /DUPLAP/ IDVA
      COMMON /restap/ irestp,lplas0,lstaz0
      COMMON /PLASTI/ LPLAST,LPLAS1,LSIGMA
      COMMON /BTHDTH/ INDBTH,INDDTH,LTBTH,LTDTH
      COMMON /INCONF/ LINDBEL,LBIRTHC
      COMMON /CVOREL/ ICVEL,LCVEL,LELCV,NPA,NPI,LCEL,LELC,NMA,NMI
      COMMON /ORIENT/ CPP(3,3),XJJ(3,3),TSG(6,6),BETA,LBET0,IBB0
      COMMON /INTGRA/ INCOTX,INCOTY,INCOTZ
      COMMON /ZAPISI/ LSTAZA(5)
      COMMON /PODTIP/ IPODT
      COMMON /VELIKE/ LCOR0,LGM0,JG,NGR,NGS,NGT,NGS4
      COMMON /GAUSVR/ LTEMGT,LCORGT,ICORGT
      COMMON /CVSILE/ NSILA,LESILA
      COMMON /COEFSM/ COEF(3),ICOEF
      COMMON /IKOVAR/ INDKOV
      COMMON /CEPMAT/ INDCEP
      COMMON /LEVDES/ ILEDE,NLD,ICPM1
      COMMON /OBNOVA/ IRUSI
      COMMON /ITERBR/ ITER
      COMMON /CRACKS/ CONTE,SINTE,FK123(10,3),NODCR(10,14),NCRACK,LQST,
     1                LNERING,LMIE,LPSI,LQ,N100,IRING,NSEG,MAXRIN,MAXSEG
     1                ,MAXNOD,LXL,LYL,LZL,LSIF1,LXGG,LYGG,LZGG,LNNOD
C
      DIMENSION AU(*)
      REAL AU
C
C     POZIVANJE PROGRAMA ZA ULAZNE PODATKE .
      LSTAZA(1)=LMAX8
      READ(IELEM,REC=LMAX8)
     1NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,ICORGT,LCEL,LELC,NMA,NMI,
     1MXAU,LNEL,LNMAT,LIPGC,LIPRC,LISNA,LTHID,LLMEL,IPODT,LNNOD,
     1ND,NGS12,MSLOJ,MXS,MSET,LNSLOJ,LMATSL,LDSLOJ,LBBET,NSILA,LESILA,
     1INCOTX,INCOTY,INCOTZ,LBET0,((CPP(J,I),J=1,3),I=1,3),
     1((TSG(J,I),J=1,6),I=1,6),BETA,IBB0,LALFE,LHAEM,LHINV,LGEEK,IALFA,
     1INDBTH,INDDTH,LTBTH,LTDTH,INDKOV,INDCEP,ILEDE,NLD,ICPM1,
     1COEF(3),ICOEF,LINDBEL,LBIRTHC
      LSTAZA(2)=LMAX8+1
      CALL READDD(AU,MXAU/IDVA,IELEM,LMAX8,LDUZI)
      LMAX=LAU+MXAU
      CALL DELJIV(LMAX,2,INDL)
      IF(INDL.EQ.0) LMAX=LMAX+1
CS     PLASTICNOST
CE     PLASTICITY
      LPLAST=LMAX
      LPLAS1=LMAX
      LSIGMA=LMAX
      lplas0=lmax
      LCOR0 =LMAX
      LTEMGT=LMAX
      LCORGT=LMAX
      IF(IATYP.EQ.0) GO TO 10
      IF(NMODM.LE.4) GO TO 10
CE    MEMORY ALLOCATION FOR MATERIAL MODELS (NMODM.GE.5),SEE /13/, /11/
CE    TOTAL SPACE USED FOR ALL INTEGRATION POINTS
      NPROS=NE*NGS12*MODPRO( NMODM )*IDVA
!      LPLAS1=LPLAST+NPROS
!      LMAX=LPLAS1+NPROS
!                   )
!      DEALLOCATE (PLAS1)
      ALLOCATE (PLAST(NPROS/IDVA), STAT = iAllocateStatus)
      IF (iAllocateStatus /= 0) write(3,*)'PLAST* Not enough memory ***'
     1                                    ,ITER     
      IF (iAllocateStatus /= 0) STOP '*** Not enough memory ***'
      ALLOCATE (PLAS1(NPROS/IDVA), STAT = iAllocateStatus)
      IF (iAllocateStatus /= 0) write(3,*)'PLAS1* Not enough memory ***'
      IF (iAllocateStatus /= 0) STOP '*** Not enough memory ***'
      if(irusi.eq.1) then
!         LPLAS0=LMAX
!         LMAX=LPLAS0+NPROS
         ALLOCATE (PLAS0(NPROS/IDVA), STAT = iAllocateStatus)
         IF (iAllocateStatus /= 0) write(3,*)'PLAS0* Not enough memory*'
         IF (iAllocateStatus /= 0) STOP '*** Not enough memory ***'
      endif
      IF(LMAX.GT.MTOT) CALL ERROR(1)
      LSTAZA(3)=LMAX8+1
!      CALL READDD(A(LPLAST),NPROS/IDVA,IELEM,LMAX8,LDUZI)
      CALL READDD(PLAST,NPROS/IDVA,IELEM,LMAX8,LDUZI)
      LSTAZA(4)=LMAX8+1
!      CALL READDD(A(LPLAS1),NPROS/IDVA,IELEM,LMAX8,LDUZI)
      CALL READDD(PLAS1,NPROS/IDVA,IELEM,LMAX8,LDUZI)
      if(irusi.eq.1) then
        LSTAZ0=LMAX8+1
!        CALL READDD(A(LPLAS0),NPROS/IDVA,IELEM,LMAX8,LDUZI)
        CALL READDD(PLAS0,NPROS/IDVA,IELEM,LMAX8,LDUZI)
      endif
      IF(IATYP.GE.4) GO TO 10
      NPROS=0
      LSIGMA=LMAX
      IF(ITERME.EQ.1) GO TO 20
      IF(ICORGT.EQ.1) GO TO 30
      RETURN
C
CE    POINTER FOR STRESSES AT INTEGRATION POINTS FOR ALL ELEMENTS,
CE    USED FOR LINEAR ANALYSIS
   10 LSIGMA=LMAX
      NPROS=NE*NGS12*NLD*MXS*IDVA
      IF(NMODM.LE.4) NPROS=NPROS*2
      LMAX=LSIGMA+NPROS
CE    POINTER FOR COORDINATES IN TIME (T) USED FOR LARGE STRAIN ANALYSIS
      LCOR0=LMAX
      IF(IATYP.GE.4) THEN
         NPRO1=NE*NCVE*3*IDVA
         LMAX=LCOR0+NPRO1
         NPROS=NPROS+NPRO1
      ENDIF
CE    POINTER FOR TEMPERATURES AT INTEGRATION POINTS
   20 LTEMGT=LMAX
      IF(ITERME.EQ.1) THEN
         NPRO1=NE*NGS12*MXS*IDVA
         LMAX=LTEMGT+NPRO1
         NPROS=NPROS+NPRO1
      ENDIF
CE    POINTER FOR INTEGRATION POINTS COORDINATES
   30 LCORGT=LMAX
      IF(ICORGT.EQ.1) THEN
         NPRO1=NE*NGS12*3*MXS*IDVA
         LMAX=LCORGT+NPRO1
         NPROS=NPROS+NPRO1
      ENDIF
      IF(LMAX.GT.MTOT) CALL ERROR(1)
      LSTAZA(5)=LMAX8+1
      CALL READDD(A(LSIGMA),NPROS/IDVA,IELEM,LMAX8,LDUZI)
      RETURN
      END
C======================================================================
      SUBROUTINE SIST3E(AE,AU)
      USE PLAST3D
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   P R O G R A M
CE.       TO FORM POINTERS FOR ELEMENT MATRICES AND VECTORS
CS.   P R O G R A M
CS.       ZA FORMIRANJE REPERA ZA MATRICE I VEKTORE ELEMENTA
C .
CE.    P O I N T E R S
CE.       LHE   - MATRIX OF INTERPOLATION FUNCTIONS AND ITS DERIVATIVES 
CE.               WITH RESPECT TO NATURAL COORDINTES  
CE.       LBET  - STRAIN-DISPLACEMENT MATRIX
CE.       LSKE  - SYMMETRIC PART OF ELEMENT STIFFNESS MATRIX
CE.       LUEL  - VECTOR OF TOTAL ELEMENT NODAL DISPLACEMENTS
CE.       LLM   - VECTOR OF EQUATION NUMBERS FOR ELEMENT
C .
CE.    V A R I A B L E S
CE.       NCVE  - MAXIMUM NUMBER OF NODES PER ELEMENT
CE.       ND    - NUMBER OF D.O.F PER 3D ELEMENT
C .
C ......................................................................
C
      include 'paka.inc'
      
      COMMON /IZOL4B/ NGS12,ND,MSLOJ,MXS,MSET,LNSLOJ,LMATSL,LDSLOJ,LBBET
      COMMON /REPERI/ LCORD,LID,LMAXA,LMHT
      COMMON /SISTEM/ LSK,LRTDT,NWK,JEDN,LFTDT
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /ELEALL/ NETIP,NE,IATYP,NMODM,NGE,ISKNP,LMAX8
      COMMON /PLASTI/ LPLAST,LPLAS1,LSIGMA
      COMMON /ELEMAU/ MXAU,LAU,LLMEL,LNEL,LNMAT,LTHID,LIPGC,LIPRC,LISNA,
     1 LMXAU,LAPRS
      COMMON /SIMO2D/ LALFE,LHAEM,LHINV,LGEEK,IALFA
      COMMON /ELEMAE/ MXAE,LAE,LMXAE,LHE,LBET,LBED,LRTHE,LSKE,LLM
      COMMON /ELEMEN/ ELAST(6,6),XJ(3,3),ALFA(6),TEMP0,DET,NLM,KK
      COMMON /ITERAC/ METOD,MAXIT,TOLE,TOLS,TOLM,KONVE,KONVS,KONVM
      COMMON /PERKOR/ LNKDT,LDTDT,LVDT,NDT,DT,VREME,KOR
      COMMON /ZAPISI/ LSTAZA(5)
      COMMON /UPRIRI/ LUPRI
      COMMON /DUPLAP/ IDVA
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      COMMON /UPDLAG/ LUL,LCORUL
      COMMON /PROBAS/ IILS
      COMMON /VELIKE/ LCOR0,LGM0,JG,NGR,NGS,NGT,NGS4
      COMMON /GAUSVR/ LTEMGT,LCORGT,ICORGT
      COMMON /ITERBR/ ITER
      COMMON /INDKON/ IKONV
      COMMON /INDNAP/ NAPON
      COMMON /MATERM/ LMODEL,LGUSM
      COMMON /ZAPSIL/ UBXYZ(3,10),NVFUB(10),INDZS,LZAPS,LNPRZ
      COMMON /CVSILE/ NSILA,LESILA
      COMMON /OBNOVA/ IRUSI
      COMMON /restap/ irestp,lplas0,lstaz0
      COMMON /LEVDES/ ILEDE,NLD,ICPM1
      COMMON /BOBAN3/ IBOB,IC69
      COMMON /CRACKS/ CONTE,SINTE,FK123(10,3),NODCR(10,14),NCRACK,LQST,
     1                LNERING,LMIE,LPSI,LQ,N100,IRING,NSEG,MAXRIN,MAXSEG
     1                ,MAXNOD,LXL,LYL,LZL,LSIF1,LXGG,LYGG,LZGG,LNNOD
      COMMON /CVOREL/ ICVEL,LCVEL,LELCV,NPA,NPI,LCEL,LELC,NMA,NMI
      COMMON /BTHDTH/ INDBTH,INDDTH,LTBTH,LTDTH
      COMMON /INCONF/ LINDBEL,LBIRTHC
C
      DIMENSION AE(*),AU(*)
      REAL AE,AU
C
CE    NUMBER OF INCOMPATIBLE DISPLACEMENTS
      LA=1
      IF(IALFA.EQ.1) LA=9
      IF(IALFA.EQ.2) LA=18
      IF(IALFA.EQ.3) LA=12
      IF(IALFA.EQ.6) LA=30
      LALFT=LALFE+LA*NE*IDVA
C
C     REPERI U VEKTORU ELEMENATA AE
C
      KK=6
      NWE=ND*(ND+1)/2
      LHE=1
      LBET=LHE+4*NCVE*IDVA
      LSKE=LBET+6*ND*IDVA
      LUEL=LSKE+NWE*IDVA
      LCEGE=LUEL+ND*IDVA
      LLM=LCEGE+LA*6*IDVA
      MXAE1=LLM+ND
C      
      LDEFOR=LSIGMA
      IF(NMODM.LT.5) LDEFOR=LSIGMA+NE*NGS12*NLD*MXS*IDVA
C
CE    LCORD - POINTER FOR INITIAL COORDINATES 
CE    LCORUL- POINTER FOR CURRENT COORDINATES IF(IATYP.GE.3), SEE /13/
C
      KORD=LCORD
      IF(IATYP.GE.3) KORD=LCORUL
C
CE    STRAIN AND STRESS CALCULATION AND INTEGRATION OF ELEMENT STIFFNESS
CE    MATRIX AND INTERNAL FORCES
C
      IF(IBOB.EQ.0) THEN
      CALL ELTE3(AE(LBET),AE(LSKE),AE(LUEL),AE(LLM),AU(LNEL),AU(LNMAT),
     1AU(LTHID),AE(LHE),A(KORD),A(LUPRI),A(LRTDT),A(LFTDT),A(LSIGMA),
     2AU(LISNA),AU(LIPGC),AU(LLMEL),
     3AU(LALFE),AU(LHAEM),AU(LHINV),AU(LGEEK),IALFA,
     3A(LCOR0),A(LTEMGT),A(LCORGT),A(LAU),A(LZAPS),A(LNPRZ),INDZS,
     1A(LGUSM),LA,AE(LCEGE),AU(LESILA),A(LID),A(LDEFOR),
     8AU(LNNOD),AU(LALFT),AU(LINDBEL),AU(LBIRTHC),AU(LTBTH),AU(LCEL))
      ELSE
      CALL ELTE3B(AE(LBET),AE(LSKE),AE(LUEL),AE(LLM),AU(LNEL),AU(LNMAT),
     1AU(LTHID),AE(LHE),A(KORD),A(LUPRI),A(LRTDT),A(LFTDT),A(LSIGMA),
     2AU(LISNA),AU(LIPGC),AU(LLMEL),
     3AU(LALFE),AU(LHAEM),AU(LHINV),AU(LGEEK),IALFA,
     3A(LCOR0),A(LTEMGT),A(LCORGT),A(LAU),A(LZAPS),A(LNPRZ),INDZS,
     1A(LGUSM),LA,AE(LCEGE),AU(LESILA))
      ENDIF
C
      IF(((IALFA.GE.0.OR.NSILA.GT.0).AND.IILS.NE.-1).or.indbth.eq.1)THEN
C
C       PRIPREMA ZA RESTART CAM-CLY (SOPSTVENA TEZINA)
C
        IF(IRUSI.EQ.1.AND.IRESTP.EQ.0.AND.KOR.EQ.NDT.AND.NAPON.EQ.1)THEN
           KBR=NE*LA*(2+LA+ND)
           call clear(au(lalfe),KBR)
        endif
        LMA8=LSTAZA(2)-1
        CALL WRITDD(AU,MXAU/IDVA,IELEM,LMA8,LDUZI)
      ENDIF
      IF(IATYP.EQ.0) GO TO 10
      IF(NMODM.LE.4) GO TO 10
      IF(IILS.NE.-1) THEN
        NPROS=NE*NGS12*MODPRO( NMODM )*IDVA
        LMA8=LSTAZA(4)-1
!        CALL WRITDD(A(LPLAS1),NPROS/IDVA,IELEM,LMA8,LDUZI)
        CALL WRITDD(PLAS1,NPROS/IDVA,IELEM,LMA8,LDUZI)
        IF(IATYP.GE.4) GO TO 10
        NPROS=0
        IF(ITERME.EQ.1) GO TO 20
        IF(ICORGT.EQ.1) GO TO 30
      ENDIF
      RETURN
C
   10 NPROS=NE*NGS12*NLD*MXS*IDVA
      IF(NMODM.LE.4) NPROS=NPROS*2
      IF(IATYP.GE.4) THEN
         NPRO1=NE*NCVE*3*IDVA
         NPROS=NPROS+NPRO1
         IF(NAPON.EQ.0.AND.ITER.GT.0) RETURN
      ENDIF
   20 IF(ITERME.EQ.1) THEN
         NPRO1=NE*NGS12*MXS*IDVA
         NPROS=NPROS+NPRO1
      ENDIF
   30 IF(ICORGT.EQ.1) THEN
         NPRO1=NE*NGS12*3*MXS*IDVA
         NPROS=NPROS+NPRO1
      ENDIF
      LMA8=LSTAZA(5)-1
      IF(IILS.NE.-1) 
     1CALL WRITDD(A(LSIGMA),NPROS/IDVA,IELEM,LMA8,LDUZI)
      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE ELTE3(BLT,SKE,UEL,LM,NOP,NMAT,TSGE,HE,CORD,UPRI,RTDT,
     1                FTDT,TAU,ISNA,IPGC,LMEL,ALFE,HAEM,HINV,GEEK,IALFA,
     1                COR0,TEMGT,CORGT,AU,ZAPS,NPRZ,INDZS,GUSM,LA,CEGE,
     1                ESILA,ID,DEF,NNOD,ALFT,INDBEL,BIRTHC,TBTH,MCVEL)
      USE PLAST3D
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   P R O G R A M
CE.       FOR STRAIN AND STRESS CALCULATION AND INTEGRATION OF ELEMENT 
CE.       STIFFNESS MATRIX AND INTERNAL FORCES
C .
CE.    V A R I A B L E S
CE.       NGAUSX- NUMBER OF INTEGRATION POINTS IN R-DIRECTION, /13-3/(A)
CE.       NGAUSY- NUMBER OF INTEGRATION POINTS IN S-DIRECTION, /13-3/(A)
CE.       NGAUSZ- NUMBER OF INTEGRATION POINTS IN T-DIRECTION, /13-3/(A)
C .
CE.    V E C T O R S
CE.    STRAIN(6)- VECTOR OF STRAIN COMPONENTS, E=B*U  
CE.        TA(6)- VECTOR OF STRESS COMPONENTS, S=C*E  
C .
C ......................................................................
C
      include 'paka.inc'
      
      COMMON /IZOL4B/ NGS12,ND,MSLOJ,MXS,MSET,LNSLOJ,LMATSL,LDSLOJ,LBBET
      COMMON /GLAVNI/ NP,NGELEM,NMATM,NPER,
     1                IOPGL(6),KOSI,NDIN,ITEST
      COMMON /SISTEM/ LSK,LRTDT,NWK,JEDN,LFTDT
      COMMON /REPERI/ LCORD,LID,LMAXA,LMHT
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /ELEALL/ NETIP,NE,IATYP,NMODM,NGE,ISKNP,LMAX8
      COMMON /ELEMAU/ MXAU,LAU,LLMEL,LNEL,LNMAT,LTHID,LIPGC,LIPRC,LISNA,
     1 LMXAU,LAPRS
      COMMON /GRUPEE/ NGEL,NGENL,LGEOM,NGEOM,ITERM
      COMMON /ITERAC/ METOD,MAXIT,TOLE,TOLS,TOLM,KONVE,KONVS,KONVM
      COMMON /PERKOR/ LNKDT,LDTDT,LVDT,NDT,DT,VREME,KOR
      COMMON /REPERM/ MREPER(4)
      COMMON /TEMPCV/ LTECV,ITEMP
      COMMON /restap/ irestp,lplas0,lstaz0
      COMMON /PLASTI/ LPLAST,LPLAS1,LSIGMA
      COMMON /ANALIZ/ LINEAR,ITERGL,INDDIN
      COMMON /ELEMEN/ ELAST(6,6),XJ(3,3),ALFA(6),TEMP0,DET,NLM,KK
      COMMON /ORIENT/ CPP(3,3),XJJ(3,3),TSG(6,6),BETA,LBET0,IBB0
      COMMON /BTHDTH/ INDBTH,INDDTH,LTBTH,LTDTH
      COMMON /INTGRA/ INCOTX,INCOTY,INCOTZ
      COMMON /VELIKE/ LCOR0,LGM0,JG,NGR,NGS,NGT,NGS4
      COMMON /GAUSVR/ LTEMGT,LCORGT,ICORGT
      COMMON /SOPSVR/ ISOPS,ISTYP,NSOPV,ISTSV,IPROV,IPROL
      COMMON /DUPLAP/ IDVA
      COMMON /ITERBR/ ITER
      COMMON /INDKON/ IKONV
      COMMON /INDNAP/ NAPON
      COMMON /FILTER/ TOLNAP,TOLPOM
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      COMMON /UGAOV6/ TE(6,6)
      COMMON /SRPSKI/ ISRPS
      COMMON /CRACKC/ CBTC(1000,2),NBTC(1000,3),KBTC,ICRACK,NBRCR
      COMMON /ZADATA/ LNZADJ,LNZADF,LZADFM,NZADP
      COMMON /VELIKD/ DETG,QP(3,3),IGLPR
      COMMON /PRINCI/ PRINC(3)
      COMMON /LEVDES/ ILEDE,NLD,ICPM1
      COMMON /GRADIJ/ GRAD(3,3),GRAE(3,3),GRAP(3,3)
      COMMON /BOJANA/ CTENS(3,3,3,3),P2KStress(3,3)
      COMMON /AKUSTI/ ROAKUS,IAKUS
      COMMON /RMISIC/ VMS(3,3),VMS1(3,3),RACGR(3,3)
      COMMON /MPOINC/ MMP,NMPC,NEZAV,LCMPC,LMPC,NEZA1
      COMMON /CRKLI/ MRTVI,MRTVIU
      COMMON /IKOVAR/ INDKOV
      COMMON /CRACKS/ CONTE,SINTE,FK123(10,3),NODCR(10,14),NCRACK,LQST,
     1                LNERING,LMIE,LPSI,LQ,N100,IRING,NSEG,MAXRIN,MAXSEG
     1                ,MAXNOD,LXL,LYL,LZL,LSIF1,LXGG,LYGG,LZGG,LNNOD
      COMMON /CVOREL/ ICVEL,LCVEL,LELCV,NPA,NPI,LCEL,LELC,NMA,NMI
      common /crklie/ icrkli(100000)
      COMMON /PODTIP/ IPODT      
      COMMON /MODELT/ TEMPC0,ALFAC,INDTEM
      COMMON /VRTEMP/ AVRTEMP 
      COMMON /ZAPREM/ ZAPREL
C
      DIMENSION AU(*)
      REAL AU
C
      DIMENSION BLT(6,*),SKE(*),UEL(*),LM(*),NOP(NE,*),NMAT(*),ISNA(*),
     1          CORD(NP,*),HE(NCVE,*),IPGC(*),TSGE(6,6,*),UPRI(*),
     1          LMEL(ND,*),RTDT(*),FTDT(*),TAU(NLD,NGS12,*),
     1          TEMGT(NGS12,*),CORGT(3,NGS12,*),ZAPS(*),NPRZ(*),
     1          GUSM(50,*),AMASC(21),TSS(6,6),TBETA(6,6),ESILA(ND,*),
     1          ALFE(LA,*),HAEM(LA,*),HINV(LA,LA,*),GEEK(LA,24,*),
     1          DEF(NLD,NGS12,*),NNOD(*),ID(NP,*),ALFT(LA,*)
      DIMENSION INDBEL(*),BIRTHC(NE,*),TBTH(*),MCVEL(*)
      DIMENSION STRAIN(6),STRESS(6),TA(6)
      DIMENSION XG(55),WGT(55),NREF(11),XNC(15),WNC(15)
      DIMENSION XG9(9),YG9(9),ZG9(9),WG9(9)
      DIMENSION COR(21,3),CORT(21,3),CON(21,3),COR0(NE,3,*),
     1          FOT(6,6),EKOR(6,30),GERS(6,30),LJA(30),MJA(30),
     1          CEGE(LA,*),HAEML(30),XJT(3,3),GRAN(3,3),XJ0(3,3),
     1          CT(3,3,3,3),FE(63),DUEL(63),GRADA(3,3),TED(6,6),BT(21,3)
C
      DIMENSION DEB(1000)
      DATA NREF/0,1,3,6,10,15,21,28,36,45,55/
      DATA WGT/            2.D0,               1.D0,               1.D0,
     1       .555555555555556D0, .888888888888889D0, .555555555555556D0,
     2       .347854845137454D0, .652145154862546D0, .652145154862546D0,
     3       .347854845137454D0, .236926885056189D0, .478628670499366D0,
     4       .568888888888889D0, .478628670499366D0, .236926885056189D0,
     5       .171324492379170D0, .360761573048139D0, .467913934572691D0,
     6       .467913934572691D0, .360761573048139D0, .171324492379170D0,
     7       .129484966168870D0, .279705391489277D0, .381830050505119D0,
     8       .417959183673469D0, .381830050505119D0, .279705391489277D0,
     9       .129484966168870D0, .101228536290376D0, .222381034453374D0,
     9       .313706645877887D0, .362683783378362D0, .362683783378362D0,
     1       .313706645877887D0, .222381034453374D0, .101228536290376D0,
     2       .081274388361574D0, .180648160694857D0, .260610696402935D0,
     3       .312347077040003D0, .330239355001260D0, .312347077040003D0,
     4       .260610696402935D0, .180648160694857D0, .081274388361574D0,
     5       .066671344308688D0, .149451349150581D0, .219086362515982D0,
     6       .269266719309996D0, .295524224714753D0, .295524224714753D0,
     7       .269266719309996D0, .219086362515982D0, .149451349150581D0,
     8       .066671344308688D0/
      DATA XG /            0.D0,-.577350269189626D0, .577350269189626D0,
     1      -.774596669241483D0,               0.D0, .774596669241483D0,
     2      -.861136311594053D0,-.339981043584856D0, .339981043584856D0,
     3       .861136311594053D0,-.906179845938664D0,-.538469310105683D0,
     4                     0.D0, .538469310105683D0, .906179845938664D0,
     5      -.932469514203152D0,-.661209386466265D0,-.238619186083197D0,
     6       .238619186083197D0, .661209386466265D0, .932469514203152D0,
     7      -.949107912342759D0,-.741531185599394D0,-.405845151377397D0,
     8                     0.D0, .405845151377397D0, .741531185599394D0,
     9       .949107912342759D0,-.960289856497536D0,-.796666477413627D0,
     9      -.525532409916329D0,-.183434642495650D0, .183434642495650D0,
     1       .525532409916329D0, .796666477413627D0, .960289856497536D0,
     2      -.968160239507626D0,-.836031107326636D0,-.613371432700590D0,
     3      -.324253423403809D0,               0.D0, .324253423403809D0,
     4       .613371432700590D0, .836031107326636D0, .968160239507626D0,
     5      -.973906528517172D0,-.865063366688985D0,-.679409568299024D0,
     6      -.433395394129247D0,-.148874338981631D0, .148874338981631D0,
     7       .433395394129247D0, .679409568299024D0, .865063366688985D0,
     8       .973906528517172D0/
C
      DATA WNC/            2.D0,               1.D0,               1.D0,
     1       .333333333333333D0,1.333333333333333D0, .333333333333333D0,
     2       .250000000000000D0, .750000000000000D0, .750000000000000D0,
     3       .250000000000000D0, .155555555555556D0, .711111111111111D0,
     4       .266666666666667D0, .711111111111111D0, .155555555555556D0/
C
      DATA XNC/            0.D0,              -1.D0,               1.D0,
     1                    -1.D0,               0.D0,               1.D0,
     2                    -1.D0,-.333333333333333D0, .333333333333333D0,
     3                     1.D0,              -1.D0,             -0.5D0,
     4                     0.D0,              0.5D0,               1.D0/
C
      DATA WG9/3.55555555555556D0,.555555555555556D0,.555555555555556D0,
     1         .555555555555556D0,.555555555555556D0,.555555555555556D0,
     1         .555555555555556D0,.555555555555556D0,.555555555555556D0/
      DATA XG9/            0.D0,-.774596669241483D0,-.774596669241483D0,
     1                          -.774596669241483D0,-.774596669241483D0,
     1                           .774596669241483D0, .774596669241483D0,
     1                           .774596669241483D0, .774596669241483D0/
      DATA YG9/            0.D0,-.774596669241483D0,-.774596669241483D0,
     1                           .774596669241483D0, .774596669241483D0,
     1                          -.774596669241483D0,-.774596669241483D0,
     1                           .774596669241483D0, .774596669241483D0/
      DATA ZG9/            0.D0,-.774596669241483D0, .774596669241483D0,
     1                          -.774596669241483D0, .774596669241483D0,
     1                          -.774596669241483D0, .774596669241483D0,
     1                          -.774596669241483D0, .774596669241483D0/
CE    DIMENSION OF ELEMENT STIFFNESS MATRIX - SKE(NWE)
      NWE=ND*(ND+1)/2
C      IF(IALFA.GE.0.AND.ITER.EQ.0.AND.IILS.NE.-1)
C     1   CALL JEDNA1(ALFT,ALFE,NE*LA)
C
CS            P E T L J A    P O    E L E M N T I M A
CE            L O O P    O V E R    E L E M E N T S
C
CE    INTGL: INTEGRATING INDICATOR FOR LARGE STRAINS
CE           (=0-IN PRINCIPAL DIRECTIONS (e.g. PAK3406.FOR);
CE            =1-IN GLOBAL CARTESIAN COORDINATE SYSTEM (e.g. PAK3406K.FOR))
CS    INDIKATOR ZA INTEGRACIJU: (0-U GL.PRAVCIMA; 1-U DEKARTOVOM) 
      INTGL=1
C
CE    IGLPR: INDICATOR FOR RECKONING OF PRINCIPAL DIRECTIONS FOR LARGE STRAINS
CE           (=0-NO; =1-YES)
CS    INDIKATOR ZA RACUNANJE GLAVNIH PRAVACA (=0-NE;=1-DA)
      IGLPR=1
C
CE    IATYP: INDICATOR FOR TYPE OF ANALYSIS FOR GROUP
CE           (=5; LARGE STRAIN - ROTATED LOGARITHMIC STRAIN)
CE    ILEDE: INDICATOR FOR LEFT-HAND OR RIGHT-HAND BASIS FOR LARGE STRAINS
CE           (=0-LEFT-HAND;=1-RIGHT-HAND)
CS    ILEDE: INDIKATOR ZA LEVU I DESNU BAZU ZA VELIKE DEFORMACIJE
CS           (=0-LEVA,=1-DESNA)
CE    ICPM1: INDICATOR FOR STORAGE OF MATRIX FOR LARGE STRAINS
CS    ICPM1: INDIKATOR ZA CUVANJE MATRICA ZA VELIKE DEFORMACIJE
C            [Be (ICPM1=0); Cp**-1 (ICPM1=1); Fp (ICPM1=2)]
CE    NLD  : DIMENSION OF MATRIX FOR STORAGE: 6=(Be, Cp**-1); 9=(Fp)
      IF(IATYP.EQ.5.OR.ILEDE.EQ.1.OR.ICPM1.EQ.2) IGLPR=1
C
CE    INDICATOR FOR CONTROL PRINTING (=0-NO;=1-YES)
CS    INDIKATOR KONTROLNE STAMPE (=0-NE;=1-DA)
      IST=0
C
CE    GRZAP: VOLUME OF ELEMENT GROUP (NGE)
      GRZAP=0.D0
C
CE    GRMAS: MASS OF ELEMENT GROUP (NGE)
      GRMAS=0.D0
C
CE    IBB0: INDICATOR FOR FIBER DIRECTION
CE    (=0-IN LOCAL R,S PLANE (BETA); =1-IN SPACE [CPP(3,3)],
CE     SEE CARDS /13-3/A AND /13-3/A1 IN USER MANUAL)
CE    TBETA(6,6): CONSTITUITIVE LAW TRANSFORMATION MATRIX  Qe (QeT*C*Qe)
CE    BETA: ANGLE BETWEEN FIBER AND LOCAL AXIS R IN R,S PLANE
      IF(IBB0.EQ.0) CALL STBETA(TBETA,BETA)
C
CE    PART OF CODE FOR CRACK OF CONCRETE
      IF(NBRCR.GT.0)THEN
        CALL CLEAR(CBTC,20)
        CALL ICLEAR(NBTC,30)
      ENDIF
      ICRACK=0
  900 IF(ICRACK.GT.0) ICRACK=-1
      KBTC=0
C
CE    DETGM: MAXIMUM DETERMINANT OF DEFORMATION GRADIENT MATRIX
      DETGM=0.D0
C
CE    DETGP: MAXIMUM DETERMINANT OF PLASTIC DEFORMATION GRADIENT MATRIX
      DETGP=0.D0
C
CE    PART OF CODE FOR DISUNION (CRACKS) OF ROCK MASS
      KOSOV=0
      IF(KOSOV.EQ.1) THEN
         MRTVI=0
         IF(KOR.EQ.1.AND.ITER.EQ.0) MRTVIU=0
         IF(MRTVIU.EQ.144.AND.ISKNP.NE.2) STOP 'PROGRAM STOP 144'
      ENDIF
C
CE	START LOOP OVER ELEM
CE	THIS LOOP COVERS THE WHOLE SUBROUTINE
C
      NNCVE=NCVE
      DO 10 NLM=1,NE
C         WRITE(3,*) 'NLM',NLM
C        PROMENLJIV BROJ CVOVORA ZA MEHANIKU LOMA
         NCVE=NNOD(NLM)
         ND=NCVE*3
C
CS       NASTAJANJE I NESTAJANJE ELEMENATA
CE       ELEMENT BIRTH AND DEATH OPTION
CE          LTBTH: POINTER FOR TIME OF ELEMENT BIRTH
CE          LTDTH: POINTER FOR TIME OF ELEMENT DEATH
CE          VREME: CURRENT TIME
CE          NLM:   CURRENT ELEMENT
CE          IBD:   INDICATOR FOR EXISTENCE OF ELEMENT (=0-YES; =1-NO)
C
         if(icrkli(nlm).eq.1) go to 10
         IBD=0
         CALL DTHBTH(AU(LTBTH),AU(LTDTH),VREME,NLM,IBD)
         IF(IBD.EQ.1) GO TO 10
C
CE       NNXYZ: AUXILIARY VARIABLE FOR MATERIAL MODELS (NMODM>4)
CE       [SEE CARD /13/ VARIABLE (NMODM) IN USER MANUAL]
CE       NGS12: TOTAL NUMBER OF INTEGRATED POINTS PER ELEMENT
CE       (NGS12=NGAUSX*NGAUSY*NGAUSZ, SEE CARD /13-3/A IN USER MANUAL)
         NNXYZ=(NLM-1)*NGS12-1
C
CE       INDICATOR FOR INTERNAL FORCE CALCULATION AT NODAL POINTS
CE       [SEE CARD /13-3/B VARIABLE (IPGS) IN USER MANUAL]
         IPG=IPGC(NLM)
         if(ipg.gt.0) CALL CLEAR(ESILA(1,IPG),ND)
C
CE       INDICATOR FOR STRESS PRINTOUT
CE       [SEE CARD /13-3/B VARIABLE (ISNA) IN USER MANUAL]
         ISN=ISNA(NLM)
         IF(ISN.GE.10)THEN
            ISN=ISN-10
         ENDIF
C
CE       LM(ND): LOCAL ELEMENT CONNECTIVITY MADE BY COPYING FROM
CE       LMEL(ND,NE): THE GLOBAL ELEMENT CONNECTIVITY ARRAY
         CALL IJEDN1(LM,LMEL(1,NLM),ND)
C
CE       COR(NCVE,3): THE CURRENT COORDINATE OF LOCAL NODES
         DO 1222 I=1,NCVE
         II=NOP(NLM,I)
         DO 1222 J=1,3
 1222    COR(I,J)=CORD(II,J)
C
CE    INITIAL CONFIGURATION FOR BIRDTH ELEMENT
C
         IF(INDBTH.EQ.1) THEN
            IF(INDBEL(NLM).EQ.0.AND.
     1         VREME.GE.TBTH(NLM).AND.TBTH(NLM).GT.1.E-10) THEN
               DO 241 I=1,ND
                  IF(LM(I).EQ.0) GO TO 241
                  J=LM(I)
                  if(j.lt.0) THEN
                     BIRTHC(NLM,I)=condof(rtdt,a(lcmpc),a(lmpc),j)
                  ELSE
                     BIRTHC(NLM,I)=RTDT(J)
                  ENDIF
  241          CONTINUE
               INDBEL(NLM)=1
               NMM=NLM
               IF(ICVEL.EQ.1) NMM=MCVEL(NLM)
c bocac               
c               IF(NMM.EQ.449189.OR.NMM.EQ.449229.OR.NMM.EQ.449273) THEN
c               write(3,1241) vreme,TBTH(nlm),NMM,(birthc(nlm,i),i=1,nd)
 1241          format(' T0',2F6.1,I9,8(1X,3(1PE8.1)))
c               ENDIF
c rakic bocac
c               IF(NMM.EQ.446771.OR.NMM.EQ.446781.OR.NMM.EQ.446792) THEN
c               write(3,1241) vreme,TBTH(nlm),NMM,(birthc(nlm,i),i=1,nd)
c                ENDIF
            ENDIF
         ENDIF
c bocac               
c               IF(NMM.EQ.449189.OR.NMM.EQ.449229.OR.NMM.EQ.449273) THEN
c               write(3,1240) vreme,TBTH(nlm),NMM,(birthc(nlm,i),i=1,nd),
c     1         (UEL(I),I=1,ND),INDBEL(NLM)
c 1240          format(' TU',2F6.1,I9,8(1X,3(1PE8.1))/8(1X,3(1PE8.1)),I5)
c               ENDIF
C rakic bocac
c               IF(NMM.EQ.446771.OR.NMM.EQ.446781.OR.NMM.EQ.446792) THEN
c               write(3,1240) vreme,TBTH(nlm),NMM,(birthc(nlm,i),i=1,nd),
c     1         (UEL(I),I=1,ND),INDBEL(NLM)
c               ENDIF

C
CE    LCMPC,LMPC: POINTERS FOR DEPENDENT DISPLACEMENTS
CE    (SEE CARD /10-02/ IN USER MANUAL)
CE    RTDT(JEDN): TOTAL DISPLACEMENT OF ALL NODES
CE    UEL(ND): TOTAL DISPLACEMENT OF NODES IN THE ELEMENT
CE    UPRI(JEDN): LAST DISPLACEMENT INCREASE OF ALL NODES AFTER AN ITERATION
CE    DUEL(ND): LAST DISPLACEMENT INCREASE OF NODES IN THE ELEMENT
      DO 242 I=1,ND
         UEL(I)=0.D0
         DUEL(I)=0.D0
         IF(LM(I).EQ.0) GO TO 242
         J=LM(I)
         if(j.lt.0) THEN
            uel(i)=condof(rtdt,a(lcmpc),a(lmpc),j)
            duel(i)=condof(upri,a(lcmpc),a(lmpc),j)
         ELSE
            UEL(I)=RTDT(J)
            DUEL(I)=UPRI(J)
         ENDIF
            IF(INDBTH.EQ.1) THEN
               IF(INDBEL(NLM).EQ.1) THEN 
                  UEL(I)=UEL(I)-BIRTHC(NLM,I)
               ENDIF
            ENDIF 
  242 CONTINUE
c
c            IF(INDBTH.EQ.1) THEN
c               IF(INDBEL(NLM).EQ.1) THEN 
cc               write(3,1242) vreme,TBTH(nlm),NLM,(birthc(nlm,i),i=1,nd)
c               write(3,1242) vreme,TBTH(nlm),NLM,(uel(i),i=1,nd)
c 1242          format(' K',2F6.1,I9,8(1X,3(1PE8.1)))
c               ENDIF
c            ENDIF
c
CE    PREPARATION OF CONFIGURATION FOR LARGE/FINITE STRAIN ANALYSIS
CE    CON(NCVE,3): UNDEFORMED CONFIGURATION, FOR IATYP>=3
      IF(IATYP.GE.3) THEN
C
CS          KOORDINATE U TRENUTKU - 0
CE          COORDINATE IN TIME - 0
C
            II=0
            DO 11 I=1,NCVE
            DO 11 K=1,3
               II=II+1
               CON(I,K)=COR(I,K)-UEL(II)
   11       CONTINUE
C         WRITE(3,9997) ((CON(I,J),J=1,3),I=1,NCVE)
C 9997 FORMAT(' CON',3(1PD12.5))
C         WRITE(3,9998) ((COR(I,J),J=1,3),I=1,NCVE)
C 9998 FORMAT(' COR',3(1PD12.5))
C         WRITE(3,9999) (UEL(I),I=1,3*NCVE)
C 9999 FORMAT(' UEL',3(1PD12.5))
      ENDIF
C
CE    PREPARATION OF CONFIGURATION FOR LARGE STRAIN ANALYSIS
CE    CORT(NCVE,3): ORIGINAL CONFIGURATION AT PREVIOUS TIME STEP
CE                  FOR IATYP>=4.
      IF(IATYP.GE.4) THEN
C
CS          KOORDINATE U TRENUTKU - T
CE          COORDINATE IN TIME - T
C
         DO 1224 I=1,NCVE
         DO 1224 J=1,3
            IF(ITER.EQ.0) COR0(NLM,J,I)=COR(I,J)
            CORT(I,J)=COR0(NLM,J,I)
 1224    CONTINUE
C         WRITE(3,9996) ((CORT(I,J),J=1,3),I=1,NCVE)
C 9996 FORMAT(' CORT',3(1PD12.5))
      ENDIF
CE    END OF PREPARING CONFIGURATION.
C
CE    FE(ND): ELEMENT INTERNAL FORCES VECTOR
CE    SKE(NWK): ELEMENT STIFFNESS MATRIX
CE    AMASC(NCVE): NODAL MASSES OF ELEMENT
CE    BLT(6,ND): STRAIN-DISPLACEMENT MATRIX
CE    HE(NCVE,4): SHAPE FUNCTIONS AND THEIR DERIVATIVES
      IF(ISKNP.NE.2) CALL CLEAR(SKE,NWE)
      CALL CLEAR(FE,ND)
      CALL CLEAR(AMASC,21)
      CALL CLEAR(BLT,6*ND)
      CALL CLEAR(HE,4*NCVE)
C
CE    COMPUTATION BLOCK FOR CENTER OF ELEMENT
      R=0.0D0
      S=0.0D0
      T=0.0D0
CELYK	   TREATMENT FOR IMCOMPATIBLE MODES
CELYK
CELYK	   IALFA: METHOD OF INCOMPATIBLE MODES
CELYK        =-1; NOT USED
CELYK        = 0; IALFA=1
CELYK        = 1; 9 PARAMETERS - TAYLOR
CELYK        = 2; 18 PARAMETERS
CELYK        = 3; 12 PARAMETERS
CE Variable Pointer	Array 		Description
CE   a	    AU(LALFE)	ALFE(LA,NE)	Incompatible displacements
CE   H	    AU(LHINV)	HINV(LA,LA,NE)	Inverse incompatible stiffness matrix
CE   G	    AU(LGEEK)	GEEK(LA,ND,NE)	Mixed stiffness matrix
CE   h	    AU(LHAEM)	HAEM(LA,NE)	Incompatible internal forces
CE	  LA = number of incompatible displacements
CE	  NE = number of elements
CE	  ND = number of degrees of freedom per element
CE	  HAEML(30) = auxiliary vector
CE	  LM(ND) = vector of equation numbers for element
CE	  NGENL = type analysis indicator (=0-linear;>0-nonlinear)
CE	  ISKNP = calculating indicator
CE             (= 0; STIFFNESS MATRIX, STRAIN, STRESS, INTERNAL FORCES
CE              = 1; STIFFNESS MATRIX ONLY (FOR LINEAR ANALYSIS)
CE              = 2; STRAIN, STRESS, INTERNAL FORCES)
CE	  IALFA = method of incompatible modes
CE             (=-1; NOT USED
CE              = 0; IALFA=1
CE              = 1; 9 PARAMETERS - TAYLOR
CE              = 2; 18 PARAMETERS
CE              = 3; 12 PARAMETERS)
      IF(IALFA.GE.0) THEN
         IF(ISKNP.NE.1) THEN
C
CS          RACUNANJE IZRAZA - F * U + h
CE          CALCULATE EXPRESSION - F * U + h
C
            DO 180 I=1,LA
               HAEML(I)=0.D0
               DO 190 J=1,ND
                  LL=LM(J)
                  IF(LL.EQ.0) GO TO 190
                  IF(NGENL.GT.0) THEN
                     HAEML(I)=HAEML(I)+GEEK(I,J,NLM)*DUEL(J)
C                     HAEML(I)=HAEML(I)+GEEK(I,J,NLM)*UPRI(LL)
                  ELSE
                     HAEML(I)=HAEML(I)+GEEK(I,J,NLM)*UEL(J)
C                     HAEML(I)=HAEML(I)+GEEK(I,J,NLM)*RTDT(LL)
                  ENDIF
  190          CONTINUE
               IF(NGENL.GT.0) HAEML(I)=HAEML(I)+HAEM(I,NLM)
  180       CONTINUE
C
CS          RACUNANJE PARAMETARA - ALFA
CE          CALCULATE PARAMETERS - ALFA
C           ALFA = ALFA - (H**-1) * (F * U + h )
C
            IF(NGENL.EQ.0) CALL CLEAR(ALFE(1,NLM),LA)
            CALL INTEV1(ALFE(1,NLM),HINV(1,1,NLM),HAEML,-1.D0,LA,LA)
C
         ENDIF
C
CS       BRISANJE PROSTORA ZA MATRICE H, F, h, E
CE       CLEAR SPACE FOR MATRIX H, F, h, E
C
         IF(ISKNP.NE.2) CALL CLEAR(HINV(1,1,NLM),LA*LA)
         IF(ISKNP.NE.2) CALL CLEAR(GEEK(1,1,NLM),LA*ND)
         IF(NGENL.GT.0) CALL CLEAR(HAEM(1,NLM),LA)
         CALL CLEAR(EKOR,6*LA)
C
CE    Variable  Pointer	Array 		Description
CE    oX	    A(LCORD)	CORD(NP,3)	Initial coordinate (IATYP<3)
CE    tX	    A(LCORUL)	CORD(NP,3)	Current coordinate (IATYP>2)
CE	  NP = number of nodal points
CE	  NOP(NE,NCVE) = node numbers of elements
CE	  NCVE = number of nodal points per element
CE	  HE(NCVE,4) = Interpolation functions and their local derivatives
CE	  R,S,T = natural coordinates
CE	  XJJ(3,3) = Jacobian matrix J
CE	  XJ(3,3) = Inverse Jacobian matrix J-1 (see 13)
CE	  DET0 = Jacobian determinant at the element center j0 (R=S=T=0)
CE	  FOT(6,6) = transposition transformation matrix (Ts)T (see 12)
CE	  IATYP = indicator for type of analysis (card /13/ in user manual)
C
CE       SHAPE FUNCTIONS AND THEIR DERIVATIVES HE(NCVE,4), 
CE       JACOBIAN MATRIX XJJ(3,3) AND INVERSE JACOBIAN XJ(3,3)
         IF(IPODT.EQ.3) THEN
         CALL JACTE33A(NOP,CORD,HE,R,S,T,0)
             ELSE
         CALL JACTE3(NOP,CORD,HE,R,S,T,0)
         ENDIF
C
CE       JACOBIAN DETERMINANT AT THE ELEMENT CENTER Jo
         DET0=DET
C
CS       MATRICA TRANSFORMACIJE - FOT (KOVARIJANTNI - GLOBALNI DEKARTOV) 
CE       TRANSFORMATION MATRIX - FOT (COVARIANT - GLOBAL CARTESIAN)
         CALL TRANSE(FOT,XJ)
C
      ENDIF 
CELYK    END OF INCOMPATIBLE MODE TREATMENT
C
C
CS    P E T L J A    P O    S L O J E V I M A
CE    L O O P    O V E R    L A Y E R S
C
CE       PREPARATION FOR MATERIAL PROPERTIES
C
CE       IBTC: INTEGRATING POINT NUMBER FOR NONLINEAR MATERIAL MODELS
CE       IRAC=2: COMPUTING TRIAL CONSTITUTIVE MATRIX, ONLY; (NMODM>4)
         IBTC=0
         IRAC=2
C
CE       NMODM: MATERIAL MODEL FOR GROUP OF ELEMENTS (NGE)
CE       MAT: MATERIAL NUMBER FOR ELEMENT (NLM)
         MAT=NMAT(NLM)
C
CE       GUST: MATERIAL DENSITY OF ELEMENT (NLM)
CE       DIMENSION GUSM(50,*) WILL BE CHANGED INTO GUSM(100,*)
CE       IN NEW VERSION OF PROGRAM IN ALL MODULES *.FOR
         GUST=GUSM(NMODM,MAT)
C
         GO TO (  1,  2,999, 40,999,999,999,999,999, 40,
     1          999,999,999,999,999,999, 40, 40, 40,999,
     2           40,999,999,999,999,999,999,999,999,999,
     3          999,999,999,999,999,999,999,999,999,999,
     4          999,999,999,999,999,999,999,999,999,999,
     5          999,999,999,999,999,999,999,999,999,999,
     6          999,999,999,999,999,999,999,999,999,999,
     7          999,999,999,999,999,999,999,999,999,999,
     8          999,999,999,999,999,999,999,999,999,999,
     9          999,999,999,999,999,999,999,999,999,999),NMODM
C
CE       ELAST(6,6): ELASTIC COEFFICIENT MATRIX IN CONSTITUTIVE EQUATION
CE                   FOR ISOTROPIC CASE
CE       LFUN: POINTER FOR MATERIAL DATA
    1    LFUN=MREPER(1)
         CALL MEL31(A(LFUN))
         GO TO 999
C
CE       ELAST(6,6): ELASTIC COEFFICIENT MATRIX IN CONSTITUTIVE EQUATION
CE                   FOR ANISOTROPIC CASE
CE       LFUN: POINTER FOR MATERIAL DATA
    2    LFUN=MREPER(1)
CE       COMPUTE ELASTIC COEFFICIENT MATIX USING ELASTIC MODULUS AND 
CE       POISSON'S RATIO IN X,Y,Z DIRECTIONS
         CALL MEL32(A(LFUN))
C
CE       TAKE THE ORIENTATION OF MATERIAL INTO ACCOUNT
C
CE       IBB0: INDICATOR FOR FIBER DIRECTION
CE       (=0-IN LOCAL R,S PLANE (BETA); =1-IN SPACE [CPP(3,3)],
CE        SEE CARDS /13-3/A AND /13-3/A1 IN USER MANUAL)
CE       TBETA(6,6): CONSTITUTIVE TRANSFORMATION MATRIX FOR ANGLE (BETA)
CE       BETA: ANGLE BETWEEN FIBER AND LOCAL AXIS R IN R,S PLANE
CE       TSGE(6,6,NE): CONSTITUTIVE TRANSFORMATION MATRIX 
CE                 [LOCAL CARTESIAN - MATERIAL (FIBER) DIRECTIONS]
CE       TSS(6,6): CONSTITUTIVE TRANSFORMATION MATRIX 
CE                 [GLOBAL CARTESIAN - LOCAL CARTESIAN]
CE       TSG(6,6): CONSTITUTIVE TRANSFORMATION MATRIX FOR (NMODM)=2
CE                 [GLOBAL CARTESIAN - MATERIAL (FIBER) DIRECTIONS]
CE       XJJ(3,3): JACOBIAN MATRIX
C        (Cg=QeT*Cl*Qe)
         IF(IBB0.EQ.1) THEN
            IF(IATYP.GT.1) THEN
         IF(IPODT.EQ.3) THEN
         CALL JACTE33A(NOP,CORD,HE,R,S,T,0)
             ELSE
         CALL JACTE3(NOP,CORD,HE,R,S,T,0)
         ENDIF
               CALL TRANAL(XJJ,TSS,0)
               CALL MNOZM1(TSG,TSGE(1,1,NLM),TSS,6,6,6)
            ENDIF
         ELSE
            IF(IATYP.LE.1) THEN
               CALL JEDNA1(TSG,TSGE(1,1,NLM),36)
            ELSE
         IF(IPODT.EQ.3) THEN
         CALL JACTE33A(NOP,CORD,HE,R,S,T,0)
             ELSE
         CALL JACTE3(NOP,CORD,HE,R,S,T,0)
         ENDIF
               CALL TRANAL(XJJ,TSS,0)
               CALL MNOZM1(TSG,TBETA,TSS,6,6,6)
            ENDIF
         ENDIF
CE       TRANSFORM  CONSTITUTIVE MATRIX (Cl-LOCAL) TO (Cg-GLOBAL)
C        (Cg=QeT*Cl*Qe)
         CALL TRAETP(ELAST,ELAST,TSG)
         GO TO 999
C
CE       TSG(6,6): CONSTITUTIVE TRANSFORMATION MATRIX FOR (NMODM)=4
   40    IF(IBB0.EQ.1) THEN
            IF(IATYP.GT.1) THEN
         IF(IPODT.EQ.3) THEN
         CALL JACTE33A(NOP,CORD,HE,R,S,T,0)
             ELSE
         CALL JACTE3(NOP,CORD,HE,R,S,T,0)
         ENDIF
               CALL TRANAL(XJJ,TSS,0)
               CALL MNOZM1(TSG,TSGE(1,1,NLM),TSS,6,6,6)
            ENDIF
         ELSE
            IF(IATYP.LE.1) THEN
               CALL JEDNA1(TSG,TSGE(1,1,NLM),36)
            ELSE
         IF(IPODT.EQ.3) THEN
         CALL JACTE33A(NOP,CORD,HE,R,S,T,0)
             ELSE
         CALL JACTE3(NOP,CORD,HE,R,S,T,0)
         ENDIF
               CALL TRANAL(XJJ,TSS,0)
               CALL MNOZM1(TSG,TBETA,TSS,6,6,6)
            ENDIF
         ENDIF
C
CS       PETLJA PO GAUSOVIM TACKAMA 
CE       LOOP OVER GAUSS POINTS
C
CE       JG: INTEGRATING POINT NUMBER
  999    JG=0
         JGCR=0
CE       ZAPRE: VOLUME OF ELEMENT (NLM)
         ZAPRE=0.D0
CE       AMASA: MASS OF ELEMENT (NLM)
         AMASA=0.D0
         SNAP=0.D0
C
CE       THERE ARE THREE LOOP FOR R-, S- AND T-DIRECTIONS
C
CE       FOR R-DIRECTION
CE       NGAUSX: NUMBER OF INTEGRATION POINTS IN R-DIRECTIONS
CE       INCOTX: INDICATOR FOR NEWTON-COTES INTEGRATION (=0-NO,>0-YES)
CE       WR,WS,WT: INTEGRATING COEFFICIENTS
CE       R,S,T: NATURAL COORDINATES
         PET=5.
         DO 20 NGR=1,NGAUSX
            JGR=NREF(NGAUSX)+NGR
            IF(INCOTX.EQ.0)THEN
              IF(NGAUSX.EQ.9)THEN
                R=XG9(NGR)
                S=YG9(NGR)
                T=ZG9(NGR)
                WR=WG9(NGR)
                WS=1.D0
                WT=1.D0
                NGAUSY=1
              ELSE
                R=XG(JGR)
                WR=WGT(JGR)
              ENDIF
            ELSE
               R =XNC(JGR)
               WR=WNC(JGR)
            ENDIF
C
CE       FOR S-DIRECTION
CE       NGAUSY: NUMBER OF INTEGRATION POINTS IN S-DIRECTIONS
CE       INCOTY: INDICATOR FOR NEWTON-COTES INTEGRATION (=0-NO,>0-YES)
         DO 20 NGS=1,NGAUSY
            JGR=NREF(NGAUSY)+NGS
            IF(INCOTY.EQ.0)THEN
              IF(NGAUSX.NE.9)THEN
                S=XG(JGR)
                WS=WGT(JGR)
              ENDIF
            ELSE
               S =XNC(JGR)
               WS=WNC(JGR)
            ENDIF
C
CE       FOR T-DIRECTION
CE       NGAUSZ: NUMBER OF INTEGRATION POINTS IN T-DIRECTIONS
CE       INCOTZ: INDICATOR FOR NEWTON-COTES INTEGRATION (=0-NO,>0-YES)
         DO 20 NGT=1,NGAUSZ
            JGR=NREF(NGAUSZ)+NGT
            IF(INCOTZ.EQ.0)THEN
              IF(NGAUSX.NE.9)THEN
                T=XG(JGR)
                WT=WGT(JGR)
              ENDIF
            ELSE
               T =XNC(JGR)
               WT=WNC(JGR)
            ENDIF
C
            NGIP=NGAUSX
            IF(IPODT.EQ.3) THEN
              IF(NGIP.EQ.1) THEN
                   R = 0.25
                   S = 0.25
                   T = 0.25 
                   WR= 1./6.
                   WS= 1.
                   WT= 1.
               ENDIF
              IF(NGIP.EQ.4) THEN
                   AA=(5.+3.*DSQRT(PET))/20.
                   BB=(5.-   DSQRT(PET))/20.
               IF(NGR.EQ.1) THEN
                   R=BB
                   S=BB
                   T=BB
               ENDIF
               IF(NGR.EQ.2) THEN
                   R=AA
                   S=BB
                   T=BB
               ENDIF
               IF(NGR.EQ.3) THEN
                   R=BB
                   S=AA
                   T=BB
               ENDIF
               IF(NGR.EQ.4) THEN
                   R=BB
                   S=BB
                   T=AA
               ENDIF
               WR=1./24.
               WS=1.
               WT=1.
               ENDIF
              IF(NGIP.EQ.5) THEN
               IF(NGR.EQ.1) THEN
                   R= 1./4
                   S= 1./4
                   T= 1./4
                  WR=-4./30
               ENDIF
               IF(NGR.EQ.2) THEN
                   R= 1./6
                   S= 1./6
                   T= 1./6
                  WR= 9./120
               ENDIF
               IF(NGR.EQ.3) THEN
                   R= 1./2
                   S= 1./6
                   T= 1./6
                  WR= 9./120
               ENDIF
               IF(NGR.EQ.4) THEN
                   R= 1./6
                   S= 1./2
                   T= 1./6
                  WR= 9./120
               ENDIF
               IF(NGR.EQ.5) THEN
                   R= 1./6
                   S= 1./6
                   T= 1./2
                  WR= 9./120
               ENDIF
               WS= 1.
               WT= 1.
               ENDIF
            ENDIF
C
CE          START OF COMPUTATION IN GAUSS-POINT LOOP BLOCK
            JG=JG+1
C       WRITE(3,*) 'NLM,NGR,NGS,NGT,R,S,T',NLM,NGR,NGS,NGT,R,S,T
C
CE          SHAPE FUNCTIONS AND THEIR DERIVATIVES HE(NCVE,4), 
CE          JACOBIAN MATRIX XJJ(3,3) AND INVERSE JACOBIAN XJ(3,3)
CS          INTERPOLACIJSKE FUNKCIJE I JAKOBIJAN U TACKI R, S, T
C
         IF(IPODT.EQ.3) THEN
         CALL JACTE33A(NOP,CORD,HE,R,S,T,0)
             ELSE
         CALL JACTE3(NOP,CORD,HE,R,S,T,0)
         ENDIF
C            CALL WRR3(XJJ,9,'XJJ ')
C
CS          TEMPERATURA, GLOBALNE KOORDINATE GAUSOVE TACKE
CE          TEMPHERATURE AND GLOBAL COORDINATES OF GAUSS POINT
CE          ICORGT: INDICATOR FOR CALCULATING GLOBAL COORDINATES 
CE                  OF INTEGRATIG POINTS (=0-NO;=1-YES)
CE          CORGT(3,NGS12,NE): GLOBAL COORDINATES OF INTEGRATING POINTS
CE          ITERME: INDICATOR FOR THERMAL ANALYSIS (=0-NO;=1-YES)
CE          LTECV: POINTER FOR TEMPERATURE AT NODAL POINTS
CE          TEMGT(NGS12,NE): TEMPERATURE AT INTEGRATING POINTS        
            IF(ICORGT.EQ.1.OR.ITERME.EQ.1)
     1      CALL JACGA3(NOP,CORD,A(LTECV),HE,CORGT(1,JG,NLM),TGT)
            IF(ITERME.EQ.1) TEMGT(JG,NLM)=TGT
C
CE          TREATMENT FOR INCOMPATIBLE MODES
            DETT=1.D0
CE          IF IALFA>0, INCOMPATIBLE MODE TREATMENT IS TAKEN INTO ACCOUNT
CE          DET0 = Jacobian determinant at the element center j0 (R=S=T=0)
CE          DET = Jacobian determinant at integrating point j (R,S,T)
            IF(IALFA.GE.0) THEN
               DETT=DET0/DET
C
CS             FORMIRANJE MATRICE - E (KOVARIJANTNA)
CE             FORM MATRIX - E (COVARIANT) (see eq. 9)
C
CE             IALFA= 1;  9 PARAMETERS
CE             IALFA= 2; 18 PARAMETERS
               IF(IALFA.EQ.1.OR.IALFA.EQ.2) THEN
                  EKOR(1,1)=R*DETT
                  EKOR(2,2)=S*DETT
                  EKOR(3,3)=T*DETT
                  EKOR(4,4)=R*DETT
                  EKOR(5,5)=S*DETT
                  EKOR(6,6)=T*DETT
                  EKOR(6,7)=R*DETT
                  EKOR(4,8)=S*DETT
                  EKOR(5,9)=T*DETT
               ENDIF
               IF(IALFA.EQ.2) THEN
                  EKOR(1,10)=R*S*DETT
                  EKOR(2,10)=-R*S*DETT
                  EKOR(4,10)=(R*R-S*S)*DETT
                  EKOR(5,11)=R*T*DETT
                  EKOR(6,11)=S*T*DETT
                  EKOR(4,12)=R*T*DETT
                  EKOR(6,12)=R*S*DETT
                  EKOR(2,13)=S*T*DETT
                  EKOR(3,13)=-S*T*DETT
                  EKOR(5,13)=(S*S-T*T)*DETT
                  EKOR(4,14)=S*T*DETT
                  EKOR(5,14)=R*S*DETT
                  EKOR(1,15)=-R*T*DETT
                  EKOR(3,15)=R*T*DETT
                  EKOR(6,15)=(T*T-R*R)*DETT
                  EKOR(1,16)=R*S*T*DETT
                  EKOR(4,16)=R*R*T*DETT
                  EKOR(6,16)=R*R*S*DETT
                  EKOR(2,17)=R*S*T*DETT
                  EKOR(4,17)=S*S*T*DETT
                  EKOR(5,17)=R*S*S*DETT
                  EKOR(3,18)=R*S*T*DETT
                  EKOR(5,18)=R*T*T*DETT
                  EKOR(6,18)=S*T*T*DETT
               ENDIF
C
CE             IALFA= 3; 12 PARAMETERS
               IF(IALFA.EQ.3) THEN
                  EKOR(1,1)=-R*XJJ(1,1)*DETT
                  EKOR(1,2)=-R*XJJ(1,2)*DETT
                  EKOR(1,3)=-R*XJJ(1,3)*DETT
                  EKOR(2,4)=-S*XJJ(2,1)*DETT
                  EKOR(2,5)=-S*XJJ(2,2)*DETT
                  EKOR(2,6)=-S*XJJ(2,3)*DETT
                  EKOR(3,7)=-T*XJJ(3,1)*DETT
                  EKOR(3,8)=-T*XJJ(3,2)*DETT
                  EKOR(3,9)=-T*XJJ(3,3)*DETT
                  EKOR(4,1)=-R*XJJ(2,1)*DETT
                  EKOR(4,2)=-R*XJJ(2,2)*DETT
                  EKOR(4,3)=-R*XJJ(2,3)*DETT
                  EKOR(4,4)=-S*XJJ(1,1)*DETT
                  EKOR(4,5)=-S*XJJ(1,2)*DETT
                  EKOR(4,6)=-S*XJJ(1,3)*DETT
                  EKOR(5,4)=-S*XJJ(3,1)*DETT
                  EKOR(5,5)=-S*XJJ(3,2)*DETT
                  EKOR(5,6)=-S*XJJ(3,3)*DETT
                  EKOR(5,7)=-T*XJJ(2,1)*DETT
                  EKOR(5,8)=-T*XJJ(2,2)*DETT
                  EKOR(5,9)=-T*XJJ(2,3)*DETT
                  EKOR(6,1)=-R*XJJ(3,1)*DETT
                  EKOR(6,2)=-R*XJJ(3,2)*DETT
                  EKOR(6,3)=-R*XJJ(3,3)*DETT
                  EKOR(6,7)=-T*XJJ(1,1)*DETT
                  EKOR(6,8)=-T*XJJ(1,2)*DETT
                  EKOR(6,9)=-T*XJJ(1,3)*DETT
                  EKOR(1,10)=S*T*XJJ(1,1)*DETT
                  EKOR(1,11)=S*T*XJJ(1,2)*DETT
                  EKOR(1,12)=S*T*XJJ(1,3)*DETT
                  EKOR(2,10)=R*T*XJJ(2,1)*DETT
                  EKOR(2,11)=R*T*XJJ(2,2)*DETT
                  EKOR(2,12)=R*T*XJJ(2,3)*DETT
                  EKOR(3,10)=S*R*XJJ(3,1)*DETT
                  EKOR(3,11)=S*R*XJJ(3,2)*DETT
                  EKOR(3,12)=S*R*XJJ(3,3)*DETT
                  EKOR(4,10)=(S*XJJ(2,1)+R*XJJ(1,1))*T*DETT
                  EKOR(4,11)=(S*XJJ(2,2)+R*XJJ(1,2))*T*DETT
                  EKOR(4,12)=(S*XJJ(2,3)+R*XJJ(1,3))*T*DETT
                  EKOR(5,10)=(T*XJJ(3,1)+S*XJJ(2,1))*R*DETT
                  EKOR(5,11)=(T*XJJ(3,2)+S*XJJ(2,2))*R*DETT
                  EKOR(5,12)=(T*XJJ(3,3)+S*XJJ(2,3))*R*DETT
                  EKOR(6,10)=(T*XJJ(3,1)+R*XJJ(1,1))*S*DETT
                  EKOR(6,11)=(T*XJJ(3,2)+R*XJJ(1,2))*S*DETT
                  EKOR(6,12)=(T*XJJ(3,3)+R*XJJ(1,3))*S*DETT
               ENDIF
C
CE             IALFA= 6; 30 PARAMETERS (PROBATIONARY CASE - NOT AVAILABLE)
               IF(IALFA.EQ.6) THEN
                  EKOR(1,1)=R*DETT
                  EKOR(2,2)=S*DETT
                  EKOR(3,3)=T*DETT
                  EKOR(4,4)=R*DETT
                  EKOR(4,5)=S*DETT
                  EKOR(5,6)=R*DETT
                  EKOR(5,7)=T*DETT
                  EKOR(6,8)=S*DETT
                  EKOR(6,9)=T*DETT
                  EKOR(4,10)=R*T*DETT
                  EKOR(4,11)=S*T*DETT
                  EKOR(5,12)=R*S*DETT
                  EKOR(5,13)=S*T*DETT
                  EKOR(6,14)=R*S*DETT
                  EKOR(6,15)=R*T*DETT
                  EKOR(1,16)=R*S*DETT
                  EKOR(1,17)=R*T*DETT
                  EKOR(2,18)=R*S*DETT
                  EKOR(2,19)=S*T*DETT
                  EKOR(3,20)=R*T*DETT
                  EKOR(3,21)=S*T*DETT
                  EKOR(4,22)=R*S*DETT
                  EKOR(5,23)=R*T*DETT
                  EKOR(6,24)=S*T*DETT
                  EKOR(1,25)=R*S*T*DETT
                  EKOR(2,26)=R*S*T*DETT
                  EKOR(3,27)=R*S*T*DETT
                  EKOR(4,28)=R*S*T*DETT
                  EKOR(5,29)=R*S*T*DETT
                  EKOR(6,30)=R*S*T*DETT
               ENDIF
C
CS             FORMIRANJE MATRICE - G (GLOBALNI DEKARTOV)
CE             FORM MATRIX - G (GLOBAL CARTESIAN) (see eq. 11)
C
               CALL MNOZM1(GERS,FOT,EKOR,6,LA,6)
            ENDIF
CE          END OF TREATMENT FOR INCOMPATIBLE MODES
C
CELYK       CONSTITUTIVE RELATION BETWEEN STRAIN AND STRESS
C
CELYK		  THIS PART COMPOSES THE CONSTITUTIVE
CELYK		  MATRIX ACCORDING TO THE MATERIAL MODEL, NMODM.
CELYK		  IF NMODM<5, THE MODEL IS BASICALLY LINEAR MODEL
CELYK		  OTHERWISE, THE MODEL IS NONLINEAR.
C
CS          FORMIRANJE KONSTITUITIVNE MATRICE
CE          CONSTITUITIVE MATRIX
C
CELYK		  FOR NMODM=1 OR 2, THE CONSTITUTIVE MATRIX HAS BEEN
CELYK			COMPUTED AT THE START OF THIS ROUTINE AND THERE
CELYK			NO NEED TO UPDATE THIS MATRIX. HENCE THE COMPUTATION
CELYK			WILL BE SKIPPED (JUMP TO 70).
CE                      ELASTIC ISOTROPIC OR ORTHOTROPIC.
CELYK		  FOR NMODM=3 OR 4, THE MATERIAL MODEL IS LINEAR BUT
CELYK			A SPECIAL TREATMENT MAY BE NEEDED.
CE                      THERMO-ELASTIC ISOTROPIC OR ORTHOTROPIC.
CELYK		  FOR NMODM=5, THIS CASE IS FOR NONLINEAR MATERIAL.
CELYK			IN THE CORRESPONDING PART, THE CONSTITUTIVE MATRIX
CELYK			WILL BE COMPUTED BY dS/dE(S:stress, E:strain).
C
            GO TO ( 70, 70,  3,  4,  5,  5,  5,  5,  5,  5,
     1               5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
     2               5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
     3               5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
     4               5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
     5               5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
     6               5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
     7               5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
     8               5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
     9               5,  5,  5,  5,  5,  5,  5,  5,  5,  5),NMODM
C
CELYK  	  THERMO-ELASTIC ISOTROPIC CASE 3
C
CELYK  	  FORM THERMO-ELASTIC ISOTROPIC CONSTITUTIVE MATRIX USING
CELYK  		E(T): YOUNG'S MODULUS
CELYK  		V(T): POISSON RATIO
CE                T : TEMPERATURE AT INTEGRATING POINT
C
    3       LFUN=MREPER(1)
            LNTA=MREPER(2)
            LTEM=MREPER(3)
            MATE=MREPER(4)
            CALL MEL33(A(LFUN),A(LNTA),A(LTEM),MATE,TGT)
            GO TO 70
C
CELYK	    THERMO-ELASTIC ORTHOTROPIC CASE 4:
CE
CE  	    FORM THERMO-ELASTIC ORTHOTROPIC CONSTITUTIVE MATRIX USING
CE  		Ex(T),Ey(T),Ez(T)   : YOUNG'S MODULES
CE  		Vxy(T),Vyz(T),Vzx(T): POISSON RATIOS
CE  		Gxy(T),Gyz(T),Gzx(T): SHEAR MODULES
CE                T : TEMPERATURE AT INTEGRATING POINT
C
    4       LFUN=MREPER(1)
            LNTA=MREPER(2)
            LTEM=MREPER(3)
            MATE=MREPER(4)
            CALL MEL34(A(LFUN),A(LNTA),A(LTEM),MATE,TGT)
CE          TRANSFORM  CONSTITUTIVE MATRIX (Cl-LOCAL) TO (Cg-GLOBAL)
C           (Cg=QeT*Cl*Qe)
            CALL TRAETP(ELAST,ELAST,TSG)
            GO TO 70
C
CELYK       NONLINEAR CASE (NMODM>4)
C
CELYK       CONDUCT STRESS INTEGRATION FOR NONLINEAR MODELS
C
CE          IBTC: INTEGRATING POINT NUMBER FOR NONLINEAR MATERIAL MODELS
CE          IRAC=2: COMPUTING TRIAL CONSTITUTIVE MATRIX, ONLY; (NMODM>4)
CE          NNXYZ: AUXILIARY VARIABLE FOR MATERIAL MODELS (NMODM>4)
CE          MODPRO(NMODM): NEEDED ARRAY PER ONE INTEGRATING POINT
    5       IBTC=IBTC+1
            KBTC=KBTC+1
            IRAC=2
            NPROS=(NNXYZ+IBTC)*MODPRO( NMODM )*IDVA
C
CE          LPLAST: POINTER FOR ALL VARIABLES IN CONFIGURATION (T) FOR
CE                  GROUP OF ELEMENTS
CE          LPLAS : POINTER FOR VARIABLES IN CONFIGURATION (T) FOR
CE                  CURRENT INTEGRATING POINT
CE          LPLAS1: POINTER FOR ALL VARIABLES IN CONFIGURATION (T+DT) FOR
CE                  GROUP OF ELEMENTS
CE          LPLA1 : POINTER FOR VARIABLES IN CONFIGURATION (T+DT) FOR
CE                  CURRENT INTEGRATING POINT
!            LPLAS=LPLAST+NPROS     
!            LPLA1=LPLAS1+NPROS
!            LPLA0=LPLAS0+NPROS
            LPLAS=1+NPROS/IDVA     
            LPLA1=1+NPROS/IDVA
            LPLA0=1+NPROS/IDVA
C
CE          PART OF CODE FOR CRACK OF CONCRETE
            IF(ICRACK.LT.0) ICRACK=-1
            IF(ICRACK.EQ.-1) THEN
               DO 810 JGI=1,NBRCR
                  IF(NBTC(JGI,1).LT.0) ICRACK=-2
                  IF(KBTC.EQ.IABS(NBTC(JGI,1)).OR.KBTC.EQ.NBTC(JGI,2))
     1              GO TO 820 
  810          CONTINUE
               GO TO 20
  820          JGCR=1
               IF(NBTC(JGI,2).EQ.KBTC) ICRACK=-NBTC(JGI,3)-2
            ENDIF
C
CE          TA(6)    : STRESS VECTOR
CE          STRAIN(6): STRAIN VECTOR
            IF(IRAC.EQ.2) THEN
              CALL CLEAR(TA,6)
              CALL CLEAR(STRAIN,6)
            ENDIF
C
CELYK       CONTROL MODULE FOR NONLINEAR STRESS INTEGRATION
CELYK       TO CALL PROGRAMS FOR STRESS INTEGRATION FOR MATERIAL MODELS
CE    NOTE: THIS CALL IS NOT NECESSARY, IT WILL BE REPEATED BELOW (IRAC=1)
      CALL MDMAT3(STRAIN,TA,NMODM,IRAC,LPLAS,LPLA1,IBTC,TGT,INTGL,lpla0)
C
CELYK       TRANSFORM THE LOCAL MATRIX TO GLOBAL MATRIX
CELYK       ELAST:	INPUT(LOCAL)/OUTPUT(GLOBAL) TANGENT STIFFNESS
CELYK       TSG:	TRANSFORMATION BETWEEN LOCAL-GLOBAL COORD. SYSTEM
            IF(MODORT(NMODM).EQ.1) THEN
               CALL TRAETP(ELAST,ELAST,TSG)
            ENDIF
C
CELYK  	    END OF TRIAL NONLINEAR CONSTITUTIVE MATRIX
C
CELYK
CELYK       WEIGHT OF THE INTEGRATION POINT
CELYK       WEIGHT=(WEIGHT IN R) * (WEIGHT IN S) * (WEIGHT IN T) * (DET. OF J)
   70       WTU=WR*WS*WT*DET
C
CE          ITER : NUMBER OF ITERATION
CE          INDZS: INDICATOR FOR BODY FORCES (=0-NO;=1-YES)
CE          ZAPRE: VOLUME OF ELEMENT (NLM)
CE          AMASA: MASS OF ELEMENT (NLM)
CE          HE(NCVE,4): SHAPE FUNCTIONS AND THEIR DERIVATIVES
CE          AMASC(NCVE): NODAL MASSES OF ELEMENT
            IF(ITER.EQ.0.AND.INDZS.GT.0)THEN
               WD=WTU*GUST
               ZAPRE=ZAPRE+WTU
               AMASA=AMASA+WD
               DO 149 I=1,NCVE
                  AMASC(I)=AMASC(I)+HE(I,1)*WD
  149          CONTINUE
            ELSE
               ZAPRE=ZAPRE+WTU
            ENDIF
C
            IF(ITER.EQ.0)ZAPREL=ZAPRE
C
CS          FORMIRANJE MATRICE BL LINEARNO
CE          FORM LINEAR STRAIN-DISPLACEMENT MATRIX - B
C
            CALL BETBE3(HE,BLT,NOP)
            if(NMODM.eq.28) CALL BMATRIX(BLT,BT,ncve)
C
CS          FORMIRANJE MATRICE B1 LINEARNO
CELYK       FORM LINEAR B1 MATRIX FOR TOTAL LAGRANGIAN APPROACH
C
            IF(IATYP.EQ.2) CALL BETL13(BLT,NOP,LM,UEL,STRAIN,0)
C            IF(IATYP.EQ.2) CALL BETL13(BLT,NOP,LM,RTDT,STRAIN,0)
C
CS          MATRICA TRANSFORM. DEFORMACIJA - TSG (GLOBALNI - LOKALNI DEKARTOV)
CELYK       STRAIN TRANSFORMATION MATRIX TSG(6,6): (GLOBAL - LOCAL CARTESIAN) 
CE          MODORT(NMODM) : INDICATOR FOR MATERIAL MODELS 
CE                          (=0-ISOTROPIC,=1-ORTHOTROPIC)
C
C           CALL WRR3(XJJ,9,'XJJ ')
            CALL JEDNA1(XJ0,XJJ,9)
C            IF(MODORT(NMODM).NE.1) CALL TRANAL(XJ0,TED,0)
            CALL TRANAL(XJ0,TED,0)
C           CALL WRR3(XJJ,9,'XJ1 ')
C           CALL WRR6(TED,36,'TED ')
C
CE	  ISKNP = calculating indicator
CE           (= 0; STIFFNESS MATRIX, STRAIN, STRESS, INTERNAL FORCES
CE            = 1; STIFFNESS MATRIX ONLY (FOR LINEAR ANALYSIS)
CE            = 2; STRAIN, STRESS, INTERNAL FORCES)
CE	  IALFA = method of incompatible modes
CE              =-1; NOT USED
CE              = 0; IALFA=1
CE              = 1; 9 PARAMETERS - TAYLOR
CE              = 2; 18 PARAMETERS
CE              = 3; 12 PARAMETERS
      IF(ISKNP.NE.1) THEN
C
CS       RACUNANJE DEFORMACIJA U GLOBALNOM DEKARTOVOM
CE       CALCULATE STRAINS IN GLOBAL CARTESIAN COORDINATE SYSTEM
C
C
         CALL CLEAR(STRAIN,6) 
C
CS       LINEARNOST I M.N.O.
CE       LINEAR PART AND M.N.O., E=B*U
CELYK	 IATYP=0: LINEAR ELEMENT OR
CELYK	 IATYP=1: ONLY MATERIAL NONLINEAR CASE
         IF(IATYP.EQ.0.OR.IATYP.EQ.1)
     1   CALL MNOZI1(STRAIN,BLT,UEL,6,ND)
C         call wrr6(blt,nd*6,'blt ')
c         if(jg.eq.1) call wrr6(uel,nd,'uel ')
c         if(jg.eq.1) call wrr6(strain,6,'stra')
C
CS       GEOMETRIJSKA NELINEARNOST - UKUPNE DEFORMACIJE ZA T.L. I U.L.
CE       GEOMETRICAL NONLINEARITY - TOTAL STRAIN FOR T.L. AND U.L.
C
         IF(IATYP.EQ.2) CALL BETL13(BLT,NOP,LM,UEL,STRAIN,1)
         IF(IATYP.EQ.3) CALL STRUL3(BLT,NOP,LM,UEL,STRAIN)
C         IF(IATYP.EQ.2) CALL BETL13(BLT,NOP,LM,RTDT,STRAIN,1)
C         IF(IATYP.EQ.3) CALL STRUL3(BLT,NOP,LM,RTDT,STRAIN)
C
C        nmodm=28: mooney-rivlin material model
CELYK	 NMODM=31: MEANS HILL'S MATERIAL MODEL
C
         IHYPER=0
         IF(nmodm.eq.28.or.NMODM.EQ.31) THEN
            IF(NMODM.EQ.28) IHYPER=1
C
CELYK  	    COMPUTE CURRENT OR UNDEFORMED CONFIGURATION 
C
            II=0
            DO 14 I=1,NCVE
            DO 14 K=1,3
               II=II+1
               IF (IATYP.LE.2) THEN 
CE               COORDINATE IN TIME - T+DT
                 CON(I,K)=COR(I,K)+UEL(II)
               ELSE             
CE               COORDINATE IN TIME - 0
                 CON(I,K)=COR(I,K)-UEL(II)
               ENDIF
   14       CONTINUE

c       write(3,*)'CON',CON(1,1),CON(1,2)
c       write(3,*)'COR',COR(1,1),COR(1,2)
c       write(3,*)'UEL',UEL(1),UEL(2)
C
C           CALL WRR(COR,18,'COR ')
C           CALL WRR(CON,18,'CON ')
C           CALL WRR(UEL,ND,'UEL ')
C
CELYK       COMPUTE JACOBIAN MATRIX
CELYK	    AT THE UNDEFORMED / DEFORMED CONFIGURATION
C
CS          ZBOG RACUNANJA VEKTORA GR U T+DT
CS          JAKOBIJEVA MATRICA U GAUSOVOJ TACKI U TRENUTKU - T+DT
CE          JACOBIAN MATRIX IN GAUSS POINT IN TIME - T+DT
C
               IF(IATYP.LE.2) THEN 
                 CALL GRGSG3(CON,XJJ,HE,NCVE)
               ELSE             
                 CALL GRGSG3(COR,XJJ,HE,NCVE)
               ENDIF
C
              CALL JEDNA1(VMS,XJJ,9) 
C
CS          JAKOBIJEVA MATRICA U GAUSOVOJ TACKI U TRENUTKU - 0
CE          JACOBIAN MATRIX IN GAUSS POINT IN TIME - 0
C
               IF (IATYP.LE.2) THEN 
                 CALL GRGSG3(COR,XJJ,HE,NCVE)
               ELSE             
                 CALL GRGSG3(CON,XJJ,HE,NCVE)
               ENDIF
C
              CALL JEDNA1(VMS1,XJJ,9) 
C
CS          INVERTOVAN JAKOBIJAN - XJJ
CE          INVERSE JACOBIAN - XJJ
C
            CALL MINV3(XJJ,DUM)
C
CELYK  	    NONLINEAR COMPUTATION
C
CS          RACUNANJE GRADIJENTA DEFORMACIJE OD 0 DO T+DT
CE          CALCULATE DEFORMATION GRADIENT FROM 0 TO T+DT
C
               IF (IATYP.LE.2) THEN 
                  CALL GRAD3T(XJJ,HE,CON,COR,GRAD,NCVE)
               ELSE             
                  CALL GRAD3T(XJJ,HE,COR,CON,GRAD,NCVE)
               ENDIF
C
C            CALL JEDNA1(GRAD1R,GRAD,9)
C            DLAMZ=GRAD(3,3)
C
CS          INVERTOVAN GRADIJENT - GRAD
CE          INVERSE GRADIENT - GRAD
C
            CALL MINV3(GRAD,DET)
            CALL JEDNA1(RACGR,GRAD,9)

            CALL MINV3(RACGR,DETG)
C
	  ENDIF
C
	 ENDIF
C     RACA - !!!!!!!!!!!!!!!!!!!!!!!
CELYK 	 END IF HILL'S MATERIAL MODEL
         iboj=1
         if(nmodm.eq.28.and.iboj.eq.1) then
C
CS          JAKOBIJEVA MATRICA U TACKI (R,S,T) U TRENUTKU - T,0
CE          JACOBIAN MATRIX IN POINT (R,S,T) IN TIME - T,0
C
CS          KOORDINATE U TRENUTKU - 0
CE          COORDINATE IN TIME - 0
            
            II=0
            DO I=1,NCVE
            DO K=1,3
               II=II+1
               CON(I,K)=COR(I,K)-UEL(II)
            enddo
            enddo
CS          KOVARIJANTNI BAZNI VEKTORI U KONFIGURACIJI - ,XJ0
CE          COVARIANT BASIS VECTORS IN CONFIGURATION - XJ0
            CALL GRGSG3(CON,XJ0,HE,NCVE)
C
CS          INVERTOVAN JAKOBIJAN - XJ0
CE          INVERSE JACOBIAN - XJ0
C
            CALL MINV3(XJ0,DUM)
C
CS          RACUNANJE GRADIJENTA DEFORMACIJE OD 0 DO T+DT
CE          CALCULATE DEFORMATION GRADIENT FROM 0 TO T+DT
C
            CALL GRAD3T(XJ0,HE,COR,CON,GRAD,NCVE)
            CALL DETER3(GRAD,DETG)
            call mnozm3(grae,grad,grad,3,3,3)
            strain(1)=0.5*(grae(1,1)-1.)
            strain(2)=0.5*(grae(2,2)-1.)
            strain(3)=0.5*(grae(3,3)-1.)
	      strain(4)=0.5*(grae(1,2))
	      strain(5)=0.5*(grae(2,3))
	      strain(6)=0.5*(grae(1,3))

         endif
C
CS       VELIKE DEFORMACIJE
CE       LARGE STRAIN
C
CLYK		 I, LEE YOUNG-KYU, THINK THAT THIS PART IS RELATED TO
CLYK		 THE FORMULATION FOR LARGE STRAIN, OR FINITE STRAIN.
CLYK		 IN THE FINITE STRAIN FORMULATION, THE BODY UNDER
CLYK		 UNDER CONSIDERATION WILL BE SUBJECTED TO A TIME-DEPENDENT
CLYK		 ROTATION. BY THE RESULT, THERE EXISTS A SPIN(OR ANGULAR
CLYK		 VELOCITY) ASSOCIATED WITH THE ROTATION.
C
CE               THIS VERSION OF PROGRAM USES ONLY DISPLACEMENT METHOD
CE               FOR LARGE STRAIN, LIKE SIMO'S PAPERS FOR Be (IATYP.EQ.4)
CE               (see References in PAKS EXAMPLES MANUAL) 
C
CELYK    IATYP = 4, ILEDE=1: LARGE STRAIN, GREEN-LAGRANGE TENSOR
CELYK    IATYP = 4, ILEDE=0: LARGE STRAIN, ROTATED GREEN-LAGRANGE TENSOR
CELYK    IATYP = 5, ILEDE=1: LARGE STRAIN, LOGARITHMIC TENSOR
CELYK    IATYP = 5, ILEDE=0: LARGE STRAIN, ROTATED LOGARITHMIC TENSOR
CE       ILEDE: INDICATOR FOR LEFT-HAND OR RIGHT-HAND BASIS FOR LARGE STRAINS
CE              (=0-LEFT-HAND;=1-RIGHT-HAND)
CE       ICPM1: INDICATOR FOR STORAGE OF MATRIX FOR LARGE STRAINS
C               [Be (ICPM1=0); Cp**-1 (ICPM1=1); Fp (ICPM1=2)]
CE       NLD  : DIMENSION OF MATRIX FOR STORAGE: 6=(Be, Cp**-1); 9=(Fp)
         IF(IATYP.GE.4) THEN
C
CS          STARO - Be, Cp**-1, Fp
CE          STRESS(6): OLD - Be, Cp**-1
CE          GRAP(3,3): OLD - Fp
C
            IF(ILEDE.EQ.0.AND.ICPM1.LE.1) THEN
               CALL JEDNA1(STRESS,TAU(1,JG,NLM),NLD)
C               IF(IST.EQ.1) CALL WRR(STRESS,NLD,'BOLD')
            ENDIF
            IF(ILEDE.EQ.1.OR.(ILEDE.EQ.0.AND.ICPM1.EQ.2)) THEN 
               CALL JEDNA1(GRAP,TAU(1,JG,NLM),NLD)
CE             Fp**-1
               CALL MINV3(GRAP,DUM)
C               IF(IST.EQ.1) CALL WRR(GRAP,NLD,'BOLD')
            ENDIF
C
CS          JAKOBIJEVA MATRICA U TACKI (R,S,T) U TRENUTKU - T,0
CE          JACOBIAN MATRIX IN POINT (R,S,T) IN TIME - T,0
C
            CALL GRGSG3(CORT,XJT,HE,NCVE)
            CALL GRGSG3(CON,XJ0,HE,NCVE)
C
CS          INVERTOVAN JAKOBIJAN - XJT,XJ0
CE          INVERSE JACOBIAN - XJT,XJ0
C
            CALL MINV3(XJT,DUM)
            CALL MINV3(XJ0,DUM)
C
CS          INKOMPATIBILNE DEFORMACIJE
CE          GRAN(3,3): DEFORMATION GRADIENT OF INCOMPATIBILE DISPLACEMENT
CE                     FOR LARGE STRAIN (IT DOES NOT WORK PROPERLY, YET)!?
            IF(IALFA.GE.0) THEN
               GRAD(1,1)=-R*ALFE(1,NLM)
               GRAD(2,1)=-R*ALFE(2,NLM)
               GRAD(3,1)=-R*ALFE(3,NLM)
               GRAD(1,2)=-S*ALFE(4,NLM)
               GRAD(2,2)=-S*ALFE(5,NLM)
               GRAD(3,2)=-S*ALFE(6,NLM)
               GRAD(1,3)=-T*ALFE(7,NLM)
               GRAD(2,3)=-T*ALFE(8,NLM)
               GRAD(3,3)=-T*ALFE(9,NLM)
c               alft verovatno moze da se izbaci posto se dobijaju ista resenja
c               GRAD(1,1)=-R*(ALFE(1,NLM)-ALFT(1,NLM))
c               GRAD(2,1)=-R*(ALFE(2,NLM)-ALFT(2,NLM))
c               GRAD(3,1)=-R*(ALFE(3,NLM)-ALFT(3,NLM))
c               GRAD(1,2)=-S*(ALFE(4,NLM)-ALFT(4,NLM))
c               GRAD(2,2)=-S*(ALFE(5,NLM)-ALFT(5,NLM))
c               GRAD(3,2)=-S*(ALFE(6,NLM)-ALFT(6,NLM))
c               GRAD(1,3)=-T*(ALFE(7,NLM)-ALFT(7,NLM))
c               GRAD(2,3)=-T*(ALFE(8,NLM)-ALFT(8,NLM))
c               GRAD(3,3)=-T*(ALFE(9,NLM)-ALFT(9,NLM))
C     OVO PROVERITI
               CALL MNOZM3(GRADA,GRAD,XJT,3,3,3)
C               CALL WRR(GRADA,9,'GRDA')
            ENDIF
C
CS          RACUNANJE GRADIJENTA DEFORMACIJE OD T DO T+DT
CE          CALCULATE DEFORMATION GRADIENT FROM T TO T+DT OR 0 TO T+DT
C
            IF(ILEDE.EQ.0) THEN
               IF(ICPM1.EQ.0) CALL MNOZM4(GRAD,XJJ,XJT,3,3,3)
               IF(ICPM1.GE.1) CALL MNOZM4(GRAD,XJJ,XJ0,3,3,3)
            ENDIF
            IF(ILEDE.EQ.1) CALL MNOZM4(GRAD,XJJ,XJ0,3,3,3)
c            IF(IST.EQ.1) CALL WRR3(XJJ,9,'XJJ ')
c            IF(IST.EQ.1) CALL WRR3(XJT,9,'XJT ')
c            IF(IST.EQ.1) CALL WRR3(GRAD,9,'GRAD')
            IF(IALFA.GE.0) CALL ZBIRM1(GRAD,GRADA,9)
C
CELYK  	 THIS IF-BLOCK HAS NO ACTUAL MEANING, BECAUSE
CELYK  	 THE CONDITIONAL PARAMETER IS EXPLICITLY SET.
CE       IT DOES NOT INFLUENCE SIGNIFICANTLY
c        korekg=1 ne radi za primer 12
         KOREKG=1
         IF(KOREKG.EQ.1) THEN
CS          RACUNANJE NORMIRANOG GRADIJENTA DEFORMACIJE
CE          DETERMINANT (DETG) OF DEFORMATION GRADIENT [GRAD(3,3)]
            CALL DETER3(GRAD,DETG)
CE          DETGM: STORAGE OF MAXIMUM MODIFICATION OF VOLUME
            IF(DETG.GT.DETGM) DETGM=DETG
CS    SA KOREKCIJOM
            DETG=DEXP(-1.D0/3.D0*DLOG(DETG))
CS    BEZ KOREKCIJE
C            DETG=1.D0
CE          NORMALIZED DEFORMATION GRADIENT T TO T+DT OR 0 TO T+DT
            CALL JEDNAK(GRAN,GRAD,DETG,9)
         ELSE
CE          NON NORMALIZED DEFORMATION GRADIENT T TO T+DT OR 0 TO T+DT
            CALL JEDNA1(GRAN,GRAD,9)
         ENDIF
C            CALL WRR(GRAN,9,'GRAN')
C
CS          RACUNANJE GRADIJENTA DEFORMACIJE OD 0 DO T+DT
CE          CALCULATE DEFORMATION GRADIENT FROM 0 TO T+DT
            CALL MNOZM4(GRAD,XJJ,XJ0,3,3,3)
            IF(IALFA.GE.0) CALL ZBIRM1(GRAD,GRADA,9)
CE          DETERMINANT (DETG) OF DEFORMATION GRADIENT [GRAD(3,3)]
            CALL DETER3(GRAD,DETG)
            IF(DETG.LT.1.D-15) STOP 'DETG=0, PAK32.FOR'
C            IF(IST.EQ.1) CALL WRR3(XJJ,9,'XJJ ')
C            IF(IST.EQ.1) CALL WRR3(XJ0,9,'XJ0 ')
C            IF(IST.EQ.1) CALL WRR3(GRAD,9,'GRAD')
C            IF(IST.EQ.1) WRITE(3,*) 'DETG',DETG
C
CS          PROBNI LEVI KOSI-GRINOV TENZOR DEFORMACIJE
CE          TRIAL ELASTIC LEFT CAUCHY-GREEN'S DEFORMATION TENSOR
C           STRESS(6): Be* = Ft * Be * FtT  (ICPM1=0)
C           STRESS(6): Be* = F * (Cp**-1) * FT  (ICPM1=1)
            IF(ILEDE.EQ.0.AND.ICPM1.LE.1) CALL PIOKOS(GRAN,STRESS)
C
CS          RACUNANJE ELASTICNOG GRADIJENTA DEFORMACIJE
CE          TRIAL ELASTIC DEFORMATION GRADIENT
C           GRAE(3,3): Fe = F * Fp**-1
CE          TRIAL ELASTIC LEFT CAUCHY-GREEN'S DEFORMATION TENSOR
C           STRESS(6): Be = Fe * FeT
            IF(ILEDE.EQ.0.AND.ICPM1.EQ.2) THEN
C     GRAD ILI GRAN
               CALL MNOZM1(GRAE,GRAD,GRAP,3,3,3)
               CALL MNOZM3(GRAP,GRAE,GRAE,3,3,3)
               CALL TENVEK(GRAP,STRESS,1)
               CALL JEDNA1(XJ,GRAE,9)
            ENDIF
C
CE          TRIAL ELASTIC DEFORMATION GRADIENT
C           GRAE(3,3): Fe = F * Fp**-1 
CE          TRIAL ELASTIC RIGHT CAUCHY-GREEN'S DEFORMATION TENSOR
C           STRESS(6): Ce = FeT * Fe
            IF(ILEDE.EQ.1) THEN
C     GRAD ILI GRAN
               CALL MNOZM1(GRAE,GRAD,GRAP,3,3,3)
               CALL MNOZM2(GRAP,GRAE,GRAE,3,3,3)
               CALL TENVEK(GRAP,STRESS,1)
               CALL JEDNA1(XJ,GRAE,9)
            ENDIF
C
CS          GLAVNE VREDNOSTI I PRAVCI
CE          PRINCIPAL STRETCHES AND DIRECTIONS
C
CE           PRINC(3): PRINCIPAL VALUES
CE           QP(3,3) : PRINCIPAL DIRECTIONS
CE              IGLPR: INDICATOR FOR RECKONING OF PRINCIPAL DIRECTIONS FOR LARGE STRAINS
CE                     (=0-NO; =1-YES)
C            IF(IST.EQ.1) CALL WRR6(STRESS,6,'BECE')

            IF(IGLPR.EQ.1) THEN
C     DODAO DUNIC
               napdefdun=napdef
               NAPDEF=1
C     DODAO DUNIC
               CALL GLAVN(STRESS)
C     DODAO DUNIC
               NAPDEF=napdefdun
C     DODAO DUNIC
               CALL GLAPR3(STRESS,QP)
               IF(IST.EQ.1) CALL WRR3(PRINC,3,'PP  ')
               IF(IST.EQ.1) CALL WRR3(QP,9,'QP  ')
            ENDIF
C
CS          PROBNE ELASTICNE DEFORMACIJE
CE          TRIAL ELASTIC STRAIN
C
CELYK       IATYP=4: LARGE STRAIN - ROTATED GREEN LAGRANGE
            IF(IATYP.EQ.4) THEN
              IF(IGLPR.EQ.1) THEN
C     IZMENIO DUNIC
c               IF(INTGL.EQ.0) THEN
C     IZMENIO DUNIC
                  CALL CLEAR(STRESS,6)
                  STRESS(1)=PRINC(1)
                  STRESS(2)=PRINC(2)
                  STRESS(3)=PRINC(3)
               ENDIF
C              E* = .5 * ( Be* - I )
               CALL UKDEFV(STRAIN,STRESS)
            ENDIF
C
CELYK       IATYP=5: LARGE STRAIN - ROTATED LOGARITHMIC
            IF(IATYP.EQ.5) THEN
CS             GLAVNE VREDNOSTI
CS             LAMBDA
CE             P1,P2,P3: PRINCIPAL STRECHES
               P1=DSQRT(PRINC(1))
               P2=DSQRT(PRINC(2))
               P3=DSQRT(PRINC(3))
C               IF(IST.EQ.1) WRITE (3,*) 'L1,L2,L3',P1,P2,P3
CE             LOGARITHMIC STRAIN
               STRAIN(1)=DLOG(P1)
               STRAIN(2)=DLOG(P2)
               STRAIN(3)=DLOG(P3)
            ENDIF
C
CS          TRANSFORMACIJA DEFORMACIJA: GLAVNI PRAVCI - DEKARTOV SISTEM
CE          TRANSFORMATION OF STRAINS: PRINCIPAL DIRECTIONS - GLOBAL CARTESIAN
CE          INTGL:INTEGRATING INDICATOR FOR LARGE STRAINS
CE                (=0-IN PRINCIPAL DIRECTIONS (e.g. PAK3406.FOR);
CE                 =1-IN GLOBAL CARTESIAN COORDINATE SYSTEM (e.g. PAK3406K.FOR))
            IF(IGLPR.EQ.1) THEN
               IF(INTGL.EQ.1) CALL DIJADS(QP,STRAIN)
CE             ENGINEERING SHEAR STRAINS
               STRAIN(4)=2.D0*STRAIN(4)
               STRAIN(5)=2.D0*STRAIN(5)
               STRAIN(6)=2.D0*STRAIN(6)
            ENDIF
C            IF(IST.EQ.1) CALL WRR3(STRAIN,6,'STDE')
         ENDIF
CELYK    END OF LARGE STRAIN IF-BLOCK
CELYK    ASSOCIATED WITH SPIN TENSOR IN FINITE STRAIN FORMULATION
C
CS       INKOMPATIBILNE DEFORMACIJE
CE       INCOMPATIBLE SMALL STRAIN
C        e=e(u)+G*a  (see eq. 11 and Table 1.)
C                          OVAJ USLOV PROVERITI
         IF(IALFA.GE.0.AND.IATYP.LT.4)
     1   CALL MNOZI1(STRAIN,GERS,ALFE(1,NLM),6,LA)
C         call wrr6(gers,6*la,'gers')
C         call wrr6(alfe(1,nlm),la,'alfa')
C         CALL WRR6(STRAIN,6,'DEFO')
C
CS       TERMICKE DEFORMACIJE   ETH=ALFA*(T-T0)
CE       THERMAL STRAINS FOR THERMO-ELASTIC MATERIAL MODELS
C        Eth=A*(T-To);  E=E+Eth
C
         IF((NMODM.EQ.27.OR.NMODM.EQ.43.OR.NMODM.EQ.44.
     1   OR.NMODM.EQ.56).AND.INDTEM.EQ.1.AND.MAT.EQ.1) THEN
            TEMP0=TEMPC0
            ALFA(1)=ALFAC
            ALFA(2)=ALFAC
            ALFA(3)=ALFAC
         ENDIF
C        opasno, proveriti mat.eq.1!
         IF(NMODM.EQ.3.OR.NMODM.EQ.4.OR.
     1     (NMODM.EQ.27.AND.INDTEM.EQ.1.AND.MAT.EQ.1).OR.
     1     (NMODM.EQ.43.AND.INDTEM.EQ.1.AND.MAT.EQ.1).OR.
     1     (NMODM.EQ.44.AND.INDTEM.EQ.1.AND.MAT.EQ.1).OR.
     1(NMODM.EQ.56.AND.INDTEM.EQ.1.AND.MAT.EQ.1.AND.VREME.GE.AVRTEMP))
     1      CALL MAMOD3(STRAIN,TGT)
C
C
CS       RACUNANJE NAPONA
CE       CALCULATE STRESSES 
C
C
CELYK    CLEAR STRESS TA(6)
         CALL CLEAR(TA,6) 
C
CELYK    FOR LINEAR ELEMENTS, NMODM<5
         IF(NMODM.LT.5) THEN
C
C           DEFORMACIJE ZBOG KOREKCIJE DEBLJINE
            IF(NAPON.EQ.1) CALL JEDNA1(DEF(1,JG,NLM),STRAIN,6)
C
CS          MATERIJALNA LINEARNOST
CE          STRESS CALCULATION FOR LINEAR MATERIAL MODELS, S=C*E 
C
C            CALL WRR6(STRAIN,6,'STRA')
C            CALL WRR6(ELAST,36,'ELAS')
            CALL MNOZI1(TA,ELAST,STRAIN,6,6)
C            CALL WRR6(TA,6,'TA  ')
C
CS          RACUNANJE UNUTRASNJIH SILA
CE          CALCULATE INTERNAL FORCES
C           r = BT * S 
CELYK
CELYK 			COMPUTE R.H.S. LOAD VECTOR ASSOCIATED WITH
CELYK 			INTERNAL FORCE BY
CELYK 			FTDT = FTDT + (BLT * TA) * WTU
CELYK 			WHERE
CELYK 				FTDT:	R.H.S. LOAD VECTOR
CELYK 				BLT:	TRANSPOSED MATRIX OF B
CELYK 				TA:		STRESS
CELYK 				WTU:	WEIGHT FACTOR FOR G.Q. INTEGRATION
CELYK
CE          NZADP: NUMBER OF PRESCRIBED DISPLACEMENTS
CE          NGENL: INDICATOR FOR NONLINEAR ANALYSIS (=0-LINEAR)
CE          ISKNP: CALCULATING INDICATOR
CE                 (= 2; STRAIN, STRESS, INTERNAL FORCES)
            IF(NZADP.GT.0.AND.ISKNP.EQ.2.AND.NGENL.EQ.0)
     1      CALL INTEV2(FE,BLT,TA,WTU,ND,6)
C     1      CALL INTEGF(FTDT,BLT,TA,LM,WTU,ND,6)
C
CS          CISCENJE NUMERICKIH GRESAKA ZA NAPONE
CE          CLEANING NUMERICAL ERRORS FOR STRESSES
C
            CALL CISTIN(TA,6)
C
            DO 21 I=1,6
CS             KOSIJEVI NAPONI U GLOBAL. ILI LOKAL. DEKART. SISTEMU
CE             CAUCHY STRESS IN GLOBAL OR LOCAL CARTESIAN SYSTEM 
CE             ISN: INDICATOR FOR STRESS STORAGE (=0-LOCAL,=2-GLOBAL)
               CALL GLLOKN(TA,TED,TAU(I,JG,NLM),ISN,I)
   21       CONTINUE
C            IF(SNAP.LT.TAU(2,JG,NLM)) SNAP=TAU(2,JG,NLM)
C            SNAP=SNAP+TAU(2,JG,NLM)
C
         ELSE
C
CELYK       STRESS COMPUTATION FOR NONLINEAR ELEMENTS
C
CS          NAPONI ZA PLASTICAN MODEL
CELYK       STRESS COMPUTATION RELATED TO MATERIAL NONLINEARITY
C
C            CALL WRR6(STRAIN,6,'STRU')
            IRAC=1
CELYK       CONTROL MODULE FOR NONLINEAR STRESS INTEGRATION
CELYK       TO CALL PROGRAMS FOR STRESS INTEGRATION FOR MATERIAL MODELS
      CALL MDMAT3(STRAIN,TA,NMODM,IRAC,LPLAS,LPLA1,IBTC,TGT,INTGL,lpla0)
C stampanje napona na mernim mestima za BOCAC
      IF(NAPON.EQ.1) then
       ibocac=0
       if(ibocac.eq.1) then
         CALL BOCACN1(TA,TED,JG,NLM,AU(LCEL),ICVEL,KOR,VREME)
         CALL BOCACN2(TA,TED,JG,NLM,AU(LCEL),ICVEL,KOR,VREME)
         CALL BOCACN3(TA,TED,JG,NLM,AU(LCEL),ICVEL,KOR,VREME)
         CALL BOCACN11(TA,TED,JG,NLM,AU(LCEL),ICVEL,KOR,VREME)
         CALL BOCACN21(TA,TED,JG,NLM,AU(LCEL),ICVEL,KOR,VREME)
         CALL BOCACN31(TA,TED,JG,NLM,AU(LCEL),ICVEL,KOR,VREME)
         CALL BOCACN4(TA,TED,JG,NLM,AU(LCEL),ICVEL,KOR,VREME)
       endif  
      ENDIF
c
         if(icrkli(nlm).eq.1) go to 10
C            IF(SNAP.LT.TA(2)) SNAP=TA(2)
C            SNAP=SNAP+TA(2)
C            IF(IST.EQ.1) CALL WRR3(STRAIN,6,'DEFL')
C            IF(IST.EQ.1) CALL WRR3(TA,6,'STRL')
C            CALL WRR(ELAST,36,'ELAS')
C
CELYK       TRANSFORM THE LOCAL MATRIX TO GLOBAL MATRIX
CELYK       ELAST:	INPUT(LOCAL)/OUTPUT(GLOBAL) TANGENT STIFFNESS
CELYK       TSG:	TRANSFORMATION BETWEEN LOCAL-GLOBAL COORD. SYSTEM
CE          MODORT(NMODM) : INDICATOR FOR MATERIAL MODELS 
CE                          (=0-ISOTROPIC,=1-ORTHOTROPIC)
            IF(ISKNP.NE.2.AND.MODORT(NMODM).EQ.1) THEN
C OVO PROVERITI ZA ANIZOTROPNE KOD 3D I GREDE
               CALL TRAETP(ELAST,ELAST,TSG)
            ENDIF
C
CS          PROMENA ELASTICNOG LEVOG KOSI - GRINOVOG TENZORA DEFORMACIJE
CE          UPDATE ELASTIC LEFT CAUCHY - GREEN DEFORMATION TENSOR Be
C
C  OVO PROVERITI ????????????????????????????
CE          NAPON: INDICATOR FOR CONVERGENCE OF PROCEDURE (=0-NO;=1-YES)
CELYK       IATYP = 4, ILEDE=1: LARGE STRAIN, GREEN-LAGRANGE TENSOR
CELYK       IATYP = 4, ILEDE=0: LARGE STRAIN, ROTATED GREEN-LAGRANGE TENSOR
CELYK       IATYP = 5, ILEDE=1: LARGE STRAIN, LOGARITHMIC TENSOR
CELYK       IATYP = 5, ILEDE=0: LARGE STRAIN, ROTATED LOGARITHMIC TENSOR
CE          ILEDE: INDICATOR FOR LEFT-HAND OR RIGHT-HAND BASIS FOR LARGE STRAINS
CE                 (=0-LEFT-HAND;=1-RIGHT-HAND)
CE          ICPM1: INDICATOR FOR STORAGE OF MATRIX FOR LARGE STRAINS
C                  [Be (ICPM1=0); Cp**-1 (ICPM1=1); Fp (ICPM1=2)]
CE          NLD  : DIMENSION OF MATRIX FOR STORAGE: 6=(Be, Cp**-1); 9=(Fp)
            IF(NAPON.EQ.1.AND.IATYP.GE.4) THEN
C               CALL WRR6(TAU(1,JG,NLM),NLD,'BST ')
CE             LEFT-HAND BASIS
               IF(ILEDE.EQ.0) THEN
C
CE                STORAGE OF ELASTIC LEFT CAUCHY - GREEN DEFOR. TENS.
CE                STRAIN(6)      : Be
CE                TAU(6,NGS12,NE): Be
                  IF(ICPM1.EQ.0) CALL JEDNA1(TAU(1,JG,NLM),STRAIN,NLD)
C
CE                STORAGE OF INVERSE PLASTIC RIGHT CACHY-GREEN DEFOR. TENS.
CE                STRAIN(6)      : Be
CE                GRAN(3,3)      : F
CE                TAU(6,NGS12,NE): CP**-1
                  IF(ICPM1.EQ.1) THEN
CS                   TRANSF. ELAS. LEVOG KOSI - GRINOVOG TENZORA DEFOR.
CS                   U DESNI PLASTICNI INVERZNI
CE                   TRANSFORM. ELASTIC LEFT CAUCHY - GREEN DEFOR. TENS.
C                    CP**-1 = F**-1 * Be * F**-T
                     CALL MINV3(GRAN,DUM)
C                     CALL WRR(GRAN,6,'GR-1')
                     CALL PIOKOS(GRAN,STRAIN)
C                     CALL WRR6(STRAIN,6,'CP-1')
C                     CALL WRR6(TAU(1,JG,NLM),6,'BST ')
                     CALL JEDNA1(TAU(1,JG,NLM),STRAIN,6)
C                     CALL WRR6(TAU(1,JG,NLM),6,'BNOV')
CS                    PROVERA PROMENE GLAVNIH PRAVACA ZA NOVO Be
CE                    CHECK OF INFLECTION OF PRINCIPAL DIRECTIONS FOR NEW Be
C                     IF(NLM.EQ.1.AND.JG.EQ.1) THEN
C                        WRITE(3,*) 'NLM,JG,ITER,KOR',NLM,JG,ITER,KOR
C                        CALL WRR3(PRINC,3,'PRI0')
C                        CALL WRR3(QP,9,'QP0 ')
C                        CALL GLAVN(STRAIN)
C                        CALL GLAPR3(STRAIN,QP)
C                        CALL WRR3(PRINC,3,'PRIN')
C                        CALL WRR3(QP,9,'QP  ')
C                     ENDIF
                  ENDIF
               ENDIF
C
CE             STORAGE OF PLASTIC DEFORMATION GRADIENT
CE             TAU(9,NGS12,NE): Fp
               IF(ILEDE.EQ.1.OR.(ILEDE.EQ.0.AND.ICPM1.EQ.2)) THEN 
                  CALL JEDNA1(GRAD,TAU(1,JG,NLM),NLD)
                  P1=DEXP(STRAIN(1))
                  P2=DEXP(STRAIN(2))
                  P3=DEXP(STRAIN(3))
                  CALL DIJAD(GRAN,QP,QP,P1,P2,P3)
CE                Fp=EXP(dEp)*Fp
                  CALL MNOZM1(GRAP,GRAN,GRAD,3,3,3)
                  CALL JEDNA1(TAU(1,JG,NLM),GRAP,NLD)
c                  CALL WRR3(TAU(1,JG,NLM),9,'tau(')
C
CS                 PROVERA PLASTICNE ROTACIJE
CE                 CHECK OF PLASTIC ROTATION TENSOR Rp (MUST BE Rp=I)
C                  IF(NLM.EQ.1.AND.JG.EQ.1) THEN
C                     WRITE(3,*) 'NLM,JG,ITER,KOR',NLM,JG,ITER,KOR
C                     CALL WRR3(GRAD,9,'GRAD')
C                     CALL WRR3(PRINC,3,'PRI0')
C                     CALL WRR3(QP,9,'QP0 ')
C                     CALL WRR3(GRAP,9,'GRAP')
C                     CALL MNOZM2(GRAN,GRAP,GRAP,3,3,3)
C                     CALL WRR3(GRAN,9,'GRAN')
C                     CALL TENVEK(GRAN,STRESS,1)
C                     CALL GLAVN(STRESS)
C                     CALL GLAPR3(STRESS,QP)
C                     CALL WRR3(PRINC,3,'PRIN')
C                     CALL WRR3(QP,9,'QP  ')
C                     CALL MNOZM3(GRAN,GRAP,GRAP,3,3,3)
C                     CALL WRR3(GRAN,9,'GRA1')
C                     CALL TENVEK(GRAN,STRESS,1)
C                     CALL GLAVN(STRESS)
C                     CALL GLAPR3(STRESS,QP)
C                     CALL WRR3(PRINC,3,'PRI1')
C                     CALL WRR3(QP,9,'QP1 ')
C                  ENDIF
C
CELYK             THIS IF-BLOCK DOESN'T ACTUALLY AFFECT,
CELYK             BECAUSE NAPKO IS EXPLICITLY SET AS 0.
CE                TRANSFORMATION OF STRESSES AND CONSTITUTIVE TENSOR
CE                FROM REFERENT TO CURRENT CONFIGURATION
                  NAPKO=0
                  IF(NAPKO.EQ.1) THEN
                     IF(IATYP.EQ.4.AND.ILEDE.EQ.1) THEN
                        CALL MINV3(GRAP,DETP)
CE                      DETGP: MUST BE ZERO FOR PLASTIC DEFORMATION GRADIENT
                        IF(DETP.GT.DETGP) DETGP=DETP
                        CALL MNOZM1(GRAE,GRAD,GRAP,3,3,3)
CS                      TRANSF. PIOLA KIRKOFOV - KOSIJEV NAPON 
CE                      TRANSFORM. SECOND PIOLA KIRCHHOFF - CAUCHY STRESS
C                       s = F * S * FT
                        CALL PIOKOS(GRAE,TA)
                        CALL CEPMT(ELAST,CT,0)
C                       Cmnop = Fmi Fnj Fok Fpl Cijkl
                        CALL RRRRC(ELAST,CT,GRAE,1)
                     ENDIF
                  ENDIF
               ENDIF
C               IF(IST.EQ.1) CALL WRR6(TAU(1,JG,NLM),NLD,'BNOV')
            ENDIF
C
         ENDIF
C
CELYK    END OF IF-BLOCK FOR STRESS COMPUTATION
C
C
CS       RACUNANJE UNUTRASNJIH SILA
CE       CALCULATE INTERNAL FORCES 
C
C
CE Variable   Pointer	Array 		Description
CE   H	     AU(LHINV)	HINV(LA,LA,NE)	Incompatible stiffness matrix
CE   G	     AU(LGEEK)	GEEK(LA,ND,NE)	Mixed stiffness matrix
CE   h	     AU(LHAEM)	HAEM(LA,NE)	Incompatible internal forces
CE   f(u)    A(LFTDT)	FTDT(JEDN)	Internal forces
CE   k(u)    AE(LSKE)	SKE(NWE) 	Element stiffness matrix
CE   (G)T*C  AE(LCEGE)	CEGE(LA,6)	Auxiliary matrix
CE   B	     AE(LBET)	BLT(6,ND)	Strain-displacement matrix
CE   JEDN = number of equations
CE   NCVE = number of nodal points per element
CE   HE(NCVE,4) = Interpolation functions and their local derivatives
CE   WTU=WR*WS*WT*DET -  Integration coefficient
CE   LA = number of incompatible displacements
CE   ND = number of degrees of freedom per element
CE   NWE=ND*(ND+1)/2
CE   GERS(6,30) = Matrix G (see eq. 11)
CE   TA(6) = stress  
CE   ELAST(6,6) = constitutive matrix C(i)
CE   LM(ND) = vector of equation numbers for element
CE   NGENL = type analysis indicator (=0-linear;>0-nonlinear) 
CE   ISKNP = calculating indicator 
CE          (= 0; STIFFNESS MATRIX, STRAIN, STRESS, INTERNAL FORCES
CE           = 1; STIFFNESS MATRIX ONLY (FOR LINEAR ANALYSIS)
CE           = 2; STRAIN, STRESS, INTERNAL FORCES)
CE   IALFA = method of incompatible modes 
CE          (=-1; NOT USED
CE           = 0; IALFA=1
CE           = 1; 9 PARAMETERS - TAYLOR
CE           = 2; 18 PARAMETERS
CE           = 3; 12 PARAMETERS)
CE   IATYP = indicator for type of analysis
C
         IF(NGENL.GT.0) THEN
C
CS          INTEGRACIJA VEKTORA - h
CE          INTEGRATE VECTOR h FOR INCOMPATIBLE DISPL. (see Table 1.) 
C           h = GT * S
C
            IF(IALFA.GE.0)
     1      CALL INTEV2(HAEM(1,NLM),GERS,TA,WTU,LA,6)
C
CS          RACUNANJE UNUTRASNJIH SILA
CE          CALCULATE INTERNAL FORCES
C           r = BT * S 
C
            if(ihyper.eq.1) then
c             call iwrr(nop,ne*ncve,'nopu')
            
             call FINTER(BT,P2kStress,NCVe,3,grad,WTU,FE,nop,ne)
            
            else
               CALL INTEV2(FE,BLT,TA,WTU,ND,6)
C            CALL INTEGF(FTDT,BLT,TA,LM,WTU,ND,6)
            endif

c	 call iwrr(nop,ne*ncve,'nopp')
C
         ENDIF
C
CE       CALCULATE INTERNAL FORCES AT ELEMENT NODES FOR PRINTING
CE       (SEE /13-3/b IN USER MANUAL)
         IF(IPG.GT.0) THEN
c	 call iwrr(nop,ne*ncve,'nopd')
            CALL JEDNAK(STRAIN,TA,WTU,6)
            CALL MNOZI2(ESILA(1,IPG),BLT,STRAIN,ND,6)
         ENDIF
C
c        call iwrr(nop,ne*ncve,'nop2')
C
CE    END OF STRAIN, STRESS, INTERNAL FORCES CALCULATION ISKNP=2 OR 0;
C
CS    INTEGRACIJA MATRICE KRUTOSTI ELEMENTA - SKE
CE    INTEGRATE ELEMENT STIFFNESS MATRIX - SKE
C     SKE = BT * C * B
C
C
      IF(ISKNP.EQ.2) GO TO 20
C      WRITE(3,'(6G10.4)')((ELAST(I,J),J=1,6),I=1,6)
      if (ihyper.eq.1) then
c	    call iwrr(nop,ne*ncve,'nop1')
         CALL KELAST(SKE,ncve,3,BT,GRAD,CTENS,WTU)
c	WRITE(3,*)'KRUT',SKE(1),SKE(2),SKE(3),ske(4),ske(5),ske(6)
      else
         CALL INTEGK(SKE,BLT,ELAST,LM,WTU,ND,6)
      endif
C
CS    GEOMETRIJSKI NELINEARAN DEO MATRICE KRUTOSTI
CE    GEOMETRIC NONLINEAR PART OF STIFFNESS MATRIX   
C
      IF(IATYP.GT.1.AND.INDKOV.NE.2) CALL KNL3(SKE,HE,NOP,LM,TA,WTU,ND)
C      IF(IATYP.GT.1) CALL KNL3(SKE,HE,NOP,LM,TA,WTU,ND)
C
      IF(IALFA.GE.0) THEN
C
CS       PROIZVOD MATRICA - GT * C
CE       MULTIPLY MATRIX - GT * C  (Auxiliary matrix)
C
         CALL MNOZM2(CEGE,GERS,ELAST,LA,6,6)
C
CS       INTEGRACIJA MATRICE - H
CE       INTEGRATE MATRIX - H  (see Table 1.)
C        H = GT * C * G
C
         CALL INTEM1(HINV(1,1,NLM),CEGE,GERS,WTU,LA,LA,6)
C
CS       INTEGRACIJA MATRICE - GAMA
CE       INTEGRATE MATRIX - GAMA  (see Table 1.)
C        GAMA = GT * C * B
C
         CALL INTEM1(GEEK(1,1,NLM),CEGE,BLT,WTU,LA,ND,6)
      ENDIF
C
   20    CONTINUE
C
CS-------------------------- KRAJ PETLJE PO GAUSOVIM TACKAMA --------
CE-------------------------- END OF LOOP-BLOCK FOR INTEGRATING POINTS  --------
C
C KOSOVO
c         IF(NAPON.EQ.1.AND.INDDTH.EQ.1.AND.IPG.GT.0) 
c         maksimalni napon (sada aktivno gore)
c     +   CALL KOSOVO(SNAP,1,NLM,AU(LTDTH),VREME,BETA)
c         srednji napon
C     +   CALL KOSOVO(SNAP,NGS12,NLM,AU(LTDTH),VREME,BETA)
C KOSOVO
C
CE          CONDITION FOR CRACK OF CONCRETE
            IF(ICRACK.LT.0.AND.JGCR.EQ.0) GO TO 10 
C
CELYK    CORRECT R.H.S. LOAD VECTOR AND STIFFNESS MATRIX FOR INCOMP. DISPL.
CE       (see Table 1.)
C
         IF(IALFA.GE.0) THEN
C
CS          INVERTOVANJE MATRICE - H
CE          INVERSE MATRIX - H
C
            IF(ISKNP.NE.2) CALL MINV(HINV(1,1,NLM),LA,DET,LJA,MJA)
C
            IF(NGENL.GT.0) THEN
C
CS             RACUNANJE IZRAZA - (H**-1) * h
CE             CALCULATE EXPRESSION - (H**-1) * h
C
               CALL CLEAR(HAEML,LA)
               CALL MNOZI1(HAEML,HINV(1,1,NLM),HAEM(1,NLM),LA,LA)
C
CS             KOREKCIJA UNUTRASNJIH SILA
CE             CORECTION INTERNAL FORCES (see Table 1.)
C              r = r - FT * (H**-1) * h
C
               CALL MNOZ2I(FE,GEEK(1,1,NLM),HAEML,ND,LA)
C               CALL INTEGF(FTDT,GEEK(1,1,NLM),HAEML,LM,-1.D0,ND,LA)
C
               IF(IPG.GT.0) 
     1         CALL MNOZ2I(ESILA(1,IPG),GEEK(1,1,NLM),HAEML,ND,LA)
C
            ENDIF
C
CS          KOREKCIJA MATRICE KRUTOSTI
CE          CORECTION STIFFNESS MATRIX (see Table 1.)
C           K = K - FT * (H**-1) * F
C
            IF(ISKNP.NE.2)
     1    CALL INTEGK(SKE,GEEK(1,1,NLM),HINV(1,1,NLM),LM,-1.D0,ND,LA)
C
         ENDIF
CELYK     END OF CORRECTION IF-BLOCK FOR INCOMPATIBLE MODES TREATMENT
C
CE       CORRECTIONS FOR ACOUSTIC PROBLEM
         IF(ISKNP.NE.2.AND.IAKUS.EQ.1) CALL AKUST(SKE,NCVE,NLM,NWE)
C
CS       RASPOREDJIVANJE MATRICE KRUTOSTI (SKE)
CE       ASSEMBLE STIFFNESS MATRIX 
C
         IF(ISKNP.NE.2) CALL SPAKUJ(A(LSK),A(LMAXA),SKE,LM,ND)
C
CS       RAZMESTANJE UNUTRASNJIH SILA FE U GLOBALNI VEKTOR FTDT
CE       ASSEMBLE INTERNAL FORCE VECTOR
C
         IF(NGENL.GT.0.OR.(NZADP.GT.0.AND.ISKNP.EQ.2.AND.NGENL.EQ.0))
     1   CALL SILPAK(FTDT,FE,LM,ND,A(LCMPC),A(LMPC))
C
C        ASSEMBLE NODAL MASS IN VECTOR ZAPS(JEDN) FOR BODY FORCES
CE       ITER : NUMBER OF ITERATION
CE       INDZS: INDICATOR FOR BODY FORCES (=0-NO;=1-YES)
         IF(ITER.EQ.0.AND.INDZS.GT.0)THEN
C            WRITE(3,*) 'AMASA,NCVE,ND,NLM',AMASA,NCVE,ND,NLM
C            CALL WRR(AMASC,NCVE,'AMAS')
            IK=0
            DO 500 I=1,NCVE
            DO 500 K=1,3
               IK=IK+1
               NJ=LM(IK)
               IF(NJ.GT.0) THEN
                  NPRNJ=NPRZ(NJ)
                  IF(NPRNJ.GT.0.AND.NPRNJ.NE.K) STOP 'NPRNJ'
                  NPRZ(NJ)=K
                  ZAPS(NJ)=ZAPS(NJ)+AMASC(I)
               ENDIF
  500       CONTINUE
         ENDIF
CE       GRZAP: VOLUME OF ELEMENT GROUP (NGE)
CE       GRMAS: MASS OF ELEMENT GROUP (NGE)
         IF(ITER.EQ.0.AND.INDZS.GT.0) THEN
            GRZAP=GRZAP+ZAPRE
            GRMAS=GRMAS+AMASA
         ELSE
            GRZAP=GRZAP+ZAPRE
         ENDIF
C
CELYK    END OF ASSEMBLING IF-BLOCK
C
   10 CONTINUE
C
CELYK END OF LOOP FOR ELEMENTS
C
CE    CONDITION FOR CRACK OF CONCRETE
      IF(ICRACK.GT.0) GO TO 900
C
C     PROMENLJIV BROJ CVOVORA ZA MEHANIKU LOMA
      NCVE=NNCVE
      ND=NCVE*3
      MODEL=0
C
C     GOCA      
C     FAKTORI INTEZIVNOSTI NAPONA KI, KII, KIII
      IF(NCRACK.GT.0.AND.NAPON.EQ.1.AND.NGENL.EQ.0.AND.NCVE.GT.3
     +          .AND.NGE.EQ.1) THEN
       CALL S_FUN_3D(CORD,NOP,AU(LPSI),A(LNERING),A(LMIE),A(LQST),A(LQ),
     1            NP,NE,A(LXL),A(LYL),A(LZL),A(LXGG),A(LYGG),
     1            A(LZGG),AU(LNNOD),MODEL,DEB)
 
         NDI=3
         CALL J3D(NOP,A(LNERING),A(LMIE),A(LQST),A(LXL),A(LYL),A(LZL),
     1            A(LXGG),A(LYGG),A(LZGG),
     1            A(LSIF1),TAU,N45,NDI,LM,LMEL,RTDT,DEF,AU(LNNOD),MODEL,
     1            DEB)

      ENDIF
C
CE    PRINTING VOLUME AND MASS FOR ELEMENT GROUP
      IF(ITER.EQ.0.AND.INDZS.GT.0) THEN
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2000) NGE,GRZAP,NGE,GRMAS
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6000) NGE,GRZAP,NGE,GRMAS
      ELSE
C      WRITE(3,*) 'DETGM,DETGP',DETGM,DETGP
      WRITE(3,*) 'NGE,GRZAP,ITER',NGE,GRZAP,ITER
      ENDIF
      RETURN
C-----------------------------------------------------------------------
 2000 FORMAT(///
     111X,'GRUPA ELEMENATA',I5,' ZAPREMINA =',1PD12.5/
     111X,'GRUPA ELEMENATA',I5,'      MASA =',1PD12.5)
C-----------------------------------------------------------------------
 6000 FORMAT(///
     111X,'ELEMENT GROUP',I5,' VOLUME =',1PD12.5/
     111X,'ELEMENT GROUP',I5,'   MASS =',1PD12.5)
C-----------------------------------------------------------------------
      END
C======================================================================
      SUBROUTINE MEL31(FUN)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   P R O G R A M
CE.       TO FORM ELASTIC MATRIX FOR MATERIAL MODEL 1, SEE /11/
C .
C ......................................................................
C
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /ELEMEN/ ELAST(6,6),XJ(3,3),ALFA(6),TEMP0,DET,NLM,KK
      COMMON /MATIZO/ E,V
C
      DIMENSION FUN(2,*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' MEL31 '
C
      E=FUN(1,MAT)
      V=FUN(2,MAT)
      CALL MEL3EL(ELAST,E,V)
      RETURN
      END
C======================================================================
      SUBROUTINE MEL3EL(ELAST,E,V)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
CS     FORMIRANJE 3D MATRICE ELAST
CE     3D ELAST MATRIX
C
      COMMON /AKUSTI/ ROAKUS,IAKUS
      COMMON /CDEBUG/ IDEBUG
      DIMENSION ELAST(6,*)
C
      IF(IDEBUG.GT.0) PRINT *, ' MEL3EL '
C     NULOVANJE ELAST
      DO 15 I=1,6
      DO 15 J=I,6
   15 ELAST(I,J)=0.D0
C     MATRICA ELAST
      IF(IAKUS.EQ.0) THEN
         ELAST(1,1)=E*(1.-V)/(1.+V)/(1.-2.*V)
         ELAST(2,2)=ELAST(1,1)
         ELAST(3,3)=ELAST(1,1)
         ELAST(1,2)=ELAST(1,1)*V/(1.-V)
         ELAST(2,1)=ELAST(1,2)
         ELAST(1,3)=ELAST(1,2)
         ELAST(3,1)=ELAST(1,2)
         ELAST(2,3)=ELAST(1,2)
         ELAST(3,2)=ELAST(1,2)
         ELAST(4,4)=ELAST(1,1)*(1.-2.*V)/(1.-V)/2.
         ELAST(5,5)=ELAST(4,4)
         ELAST(6,6)=ELAST(4,4)
	ELSE
         ELAST(1,1)=1.
         ELAST(2,2)=ELAST(1,1)
         ELAST(3,3)=ELAST(1,1)
      ENDIF
      RETURN
      END
C======================================================================
      SUBROUTINE MEL32(FUN)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
CS     FORMIRANJE MATRICE ELAST
CE     ELAST MATRIX
C
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /ELEMEN/ ELAST(6,6),XJ(3,3),ALFA(6),TEMP0,DET,NLM,KK
      COMMON /MATANI/ EX,EY,EZ,VXY,VYZ,VZX,GXY,GYZ,GZX
C
      DIMENSION FUN(9,*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' MEL32 '
C
      EX=FUN(1,MAT)
      EY=FUN(2,MAT)
      EZ=FUN(3,MAT)
      VXY=FUN(4,MAT)
      VYZ=FUN(5,MAT)
      VZX=FUN(6,MAT)
      GXY=FUN(7,MAT)
      GYZ=FUN(8,MAT)
      GZX=FUN(9,MAT)
C     MODUL SMICANJA
C     NULOVANJE ELAST
      DO 15 I=1,6
      DO 15 J=1,6
   15 ELAST(I,J)=0.0D0
C     MATRICA ELAST
      POM=(1.-2.*VXY*VYZ*VZX-EX/EZ*VZX*VZX-EY/EX*VXY*VXY
     1-EZ/EY*VYZ*VYZ)/(EX*EY*EZ)
      ELAST(1,1)=(1./EZ-VYZ*VYZ/EY)/(EY*POM)
      ELAST(2,2)=(1./EX-VZX*VZX/EZ)/(EZ*POM)
      ELAST(3,3)=(1./EY-VXY*VXY/EX)/(EX*POM)
      ELAST(1,2)=(VZX*VYZ/EY+VXY/EX)/(EZ*POM)
      ELAST(1,3)=(VXY*VYZ/EX+VZX/EZ)/(EY*POM)
      ELAST(2,3)=(VXY*VZX/EZ+VYZ/EY)/(EX*POM)
      ELAST(4,4)=GXY
      ELAST(5,5)=GYZ
      ELAST(6,6)=GZX
      DO 50 I=1,6
      DO 50 J=I,6
   50 ELAST(J,I)=ELAST(I,J)
      RETURN
      END
C======================================================================
      SUBROUTINE MEL33(FUN,NTA,TEM,MATE,TGT)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
CS     FORMIRANJE MATRICE ELAST
CE     ELAST MATRIX
C
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /ELEMEN/ ELAST(6,6),XJ(3,3),ALFA(6),TEMP0,DET,NLM,KK
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      COMMON /MATIZO/ E,V
      COMMON /SRPSKI/ ISRPS
C
      DIMENSION FUN(2,MATE*3,*),NTA(*),TEM(*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' MEL33 '
C
C     UCITAVANJE FUNKCIJE E,V,ALFA
C
      DO 6 J=1,3
      NFE=(MAT-1)*3+J
      CALL TABF(FUN,NTA,NFE,MATE*3,TGT,EVA,NTMX,IND)
      IF(IND.GT.0) GO TO 120
      IF(J.EQ.1) E=EVA
      IF(J.EQ.2) V=EVA
    6 CONTINUE
      DO 7 I=1,3
    7 ALFA(I)=EVA
      TEMP0=TEM(MAT)
C     NULOVANJE ELAST
      DO 15 I=1,6
      DO 15 J=1,6
   15 ELAST(I,J)=0.0D0
C     MATRICA ELAST
      ELAST(1,1)=E*(1.-V)/(1.+V)/(1.-2.*V)
      ELAST(2,2)=ELAST(1,1)
      ELAST(3,3)=ELAST(1,1)
      ELAST(1,2)=ELAST(1,1)*V/(1.-V)
      ELAST(1,3)=ELAST(1,2)
      ELAST(2,3)=ELAST(1,2)
      ELAST(4,4)=ELAST(1,1)*(1.-2.*V)/(1.-V)/2.
      ELAST(5,5)=ELAST(4,4)
      ELAST(6,6)=ELAST(4,4)
      DO 50 I=1,6
      DO 50 J=I,6
   50 ELAST(J,I)=ELAST(I,J)
      RETURN
  120 CONTINUE
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2000) NFE,TGT
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6000) NFE,TGT
      STOP
C-----------------------------------------------------------------------
 2000 FORMAT(///' ARGUMENT VAN OPSEGA ZADATE KRIVE U MEL33'/
     1' TEMPERATURSKA FUNKCIJA BROJ =',I5/
     2' ARGUMENT TEMPERATURA =',1PD12.4)
 6000 FORMAT(///' ARGUMENT IS OUT OF RANGE'/
     1' TEMPERATURE FUNCTION  =',I5/
     2' ARGUMENT TEMPERATURE  =',1PD12.4)
C-----------------------------------------------------------------------
      END
C======================================================================
      SUBROUTINE MEL34(FUN,NTA,TEM,MATE,TGT)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
CS     FORMIRANJE MATRICE ELAST
CE     ELAST MATRIX
C
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /ELEMEN/ ELAST(6,6),XJ(3,3),ALFA(6),TEMP0,DET,NLM,KK
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      COMMON /MATANI/ EX,EY,EZ,VXY,VYZ,VZX,GXY,GYZ,GZX
      COMMON /SRPSKI/ ISRPS
C
      DIMENSION FUN(2,MATE*12,*),NTA(*),TEM(*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' MEL34 '
C
C     UCITAVANJE FUNKCIJE E,V,ALFA
C
      DO 6 J=1,12
      NFE=(MAT-1)*12+J
      CALL TABF(FUN,NTA,NFE,MATE*12,TGT,EVA,NTMX,IND)
      IF(IND.GT.0) GO TO 120
      IF(J.EQ.1) EX=EVA
      IF(J.EQ.2) EY=EVA
      IF(J.EQ.3) EZ=EVA
      IF(J.EQ.4) VXY=EVA
      IF(J.EQ.5) VYZ=EVA
      IF(J.EQ.6) VZX=EVA
      IF(J.EQ.7) GXY=EVA
      IF(J.EQ.8) GYZ=EVA
      IF(J.EQ.9) GZX=EVA
      IF(J.EQ.10) ALFA(1)=EVA
      IF(J.EQ.11) ALFA(2)=EVA
      IF(J.EQ.12) ALFA(3)=EVA
    6 CONTINUE
      TEMP0=TEM(MAT)
C     MODUL SMICANJA
C     NULOVANJE ELAST
      DO 15 I=1,6
      DO 15 J=1,6
   15 ELAST(I,J)=0.0D0
C     MATRICA ELAST
      POM=(1.-2.*VXY*VYZ*VZX-EX/EZ*VZX*VZX-EY/EX*VXY*VXY
     1-EZ/EY*VYZ*VYZ)/(EX*EY*EZ)
      ELAST(1,1)=(1./EZ-VYZ*VYZ/EY)/(EY*POM)
      ELAST(2,2)=(1./EX-VZX*VZX/EZ)/(EZ*POM)
      ELAST(3,3)=(1./EY-VXY*VXY/EX)/(EX*POM)
      ELAST(1,2)=(VZX*VYZ/EY+VXY/EX)/(EZ*POM)
      ELAST(1,3)=(VXY*VYZ/EX+VZX/EZ)/(EY*POM)
      ELAST(2,3)=(VXY*VZX/EZ+VYZ/EY)/(EX*POM)
      ELAST(4,4)=GXY
      ELAST(5,5)=GYZ
      ELAST(6,6)=GZX
      DO 50 I=1,6
      DO 50 J=I,6
   50 ELAST(J,I)=ELAST(I,J)
      RETURN
  120 CONTINUE
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2000) NFE,TGT
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6000) NFE,TGT
      STOP
C-----------------------------------------------------------------------
 2000 FORMAT(///' ARGUMENT VAN OPSEGA ZADATE KRIVE U MEL34'/
     1' TEMPERATURSKA FUNKCIJA BROJ =',I5/
     2' ARGUMENT TEMPERATURA =',1PD12.4)
 6000 FORMAT(///' ARGUMENT IS OUT OF RANGE'/
     1' TEMPERATURE FUNCTION  =',I5/
     2' ARGUMENT TEMPERATURE  =',1PD12.4)
C-----------------------------------------------------------------------
      END
C======================================================================
      SUBROUTINE MEL35(FUN,NTA,MATE)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
CS     FORMIRANJE MATRICE ELAST
CE     ELAST MATRIX
C
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /ELEMEN/ ELAST(6,6),XJ(3,3),ALFA(6),TEMP0,DET,NLM,KK
      COMMON /MATIZO/ E,V
C
      DIMENSION FUN(2,MATE,*),NTA(*)
      COMMON /CDEBUG/ IDEBUG
C
      IF(IDEBUG.GT.0) PRINT *, ' MEL35 '
C
      NCT=NTA(MAT) 
      E=FUN(1,MAT,1)
      V=FUN(2,MAT,1)
C     NULOVANJE ELAST
      DO 15 I=1,6
      DO 15 J=1,6
   15 ELAST(I,J)=0.0D0
C     MATRICA ELAST
      ELAST(1,1)=E*(1.-V)/(1.+V)/(1.-2.*V)
      ELAST(2,2)=ELAST(1,1)
      ELAST(3,3)=ELAST(1,1)
      ELAST(1,2)=ELAST(1,1)*V/(1.-V)
      ELAST(1,3)=ELAST(1,2)
      ELAST(2,3)=ELAST(1,2)
      ELAST(4,4)=ELAST(1,1)*(1.-2.*V)/(1.-V)/2.
      ELAST(5,5)=ELAST(4,4)
      ELAST(6,6)=ELAST(4,4)
      DO 50 I=1,6
      DO 50 J=I,6
   50 ELAST(J,I)=ELAST(I,J)
      RETURN
      END
C======================================================================
      SUBROUTINE BETBE3(H,BLT,NOP)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   P R O G R A M
CE.       TO FORM ELEMENT STRAIN-DISPLACEMENT MATRIX B
CE.   P R O G R A M
CS.       ZA FORMIRANJE MATRICE BLT
C .
C ......................................................................
C
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /ELEALL/ NETIP,NE,IATYP,NMODM,NGE,ISKNP,LMAX8
      COMMON /ELEMEN/ ELAST(6,6),XJ(3,3),ALFA(6),TEMP0,DET,NLM,KK
      DIMENSION H(NCVE,*),BLT(6,*),NOP(NE,*)
C
      JJ=-2
      DO 40 I=1,NCVE
      JJ=JJ+3
      IF(NOP(NLM,I).EQ.0) GO TO 40
C     D/DX
      BLT(1,JJ)=XJ(1,1)*H(I,2)+XJ(1,2)*H(I,3)+XJ(1,3)*H(I,4)
C     D/DY
      BLT(2,JJ+1)=XJ(2,1)*H(I,2)+XJ(2,2)*H(I,3)+XJ(2,3)*H(I,4)
C     D/DZ
      BLT(3,JJ+2)=XJ(3,1)*H(I,2)+XJ(3,2)*H(I,3)+XJ(3,3)*H(I,4)
C     D/DY , D/DX
      BLT(4,JJ)=BLT(2,JJ+1)
      BLT(4,JJ+1)=BLT(1,JJ)
C     D/DZ , D/DY
      BLT(5,JJ+1)=BLT(3,JJ+2)
      BLT(5,JJ+2)=BLT(2,JJ+1)
C     D/DZ , D/DX
      BLT(6,JJ)=BLT(3,JJ+2)
      BLT(6,JJ+2)=BLT(1,JJ)
   40 CONTINUE
      RETURN
      END
C======================================================================
      SUBROUTINE JACTE3(NOP,CORD,H,R,S,T,KFIX)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   P R O G R A M
CE.       FOR INTERPOLATION FUNCTIONS AND JACOBIAN MATRIX IN CURRENT
CE.       INTEGRATION POINT (R,S,T - ARE NATURAL COORDINATES)
C .
C ......................................................................
C
      COMMON /GLAVNI/ NP,NGELEM,NMATM,NPER,
     1                IOPGL(6),KOSI,NDIN,ITEST
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /ELEALL/ NETIP,NE,IATYP,NMODM,NGE,ISKNP,LMAX8
      COMMON /ELEMEN/ ELAST(6,6),XJ(3,3),ALFA(6),TEMP0,DET,NLM,KK
      COMMON /ORIENT/ CPP(3,3),XJJ(3,3),TSG(6,6),BETA,LBET0,IBB0
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      COMMON /SRPSKI/ ISRPS
      COMMON /CDEBUG/ IDEBUG
      DIMENSION NOP(NE,*),CORD(NP,*),H(NCVE,*),IPERM(8),NCVOR(21)
      DATA IPERM/2,3,4,1,6,7,8,5/
C
      IF(IDEBUG.GT.0) PRINT *, ' JACTE3'
      RP=1.0+R
      SP=1.0+S
      TP=1.0+T
      RM=1.0-R
      TM=1.0-T
      SM=1.0-S
      RR=1.0-R*R
      SS=1.0-S*S
      TT=1.0-T*T
C
C     INTERPOLACIJSKE FUNKCIJE I NJIHOVI IZVODI
C
C
C     PRVIH 8 CVOROVA
C
      H(1,1)=0.125*RP*SP*TP
      H(2,1)=0.125*RM*SP*TP
      H(3,1)=0.125*RM*SM*TP
      H(4,1)=0.125*RP*SM*TP
      H(5,1)=0.125*RP*SP*TM
      H(6,1)=0.125*RM*SP*TM
      H(7,1)=0.125*RM*SM*TM
      H(8,1)=0.125*RP*SM*TM
C
      H(1,2)=0.125*SP*TP
      H(2,2)=-H(1,2)
      H(3,2)=-0.125*SM*TP
      H(4,2)=-H(3,2)
      H(5,2)=0.125*SP*TM
      H(6,2)=-H(5,2)
      H(7,2)=-0.125*SM*TM
      H(8,2)=-H(7,2)
C
      H(1,3)=0.125*RP*TP
      H(2,3)=0.125*RM*TP
      H(3,3)=-H(2,3)
      H(4,3)=-H(1,3)
      H(5,3)=0.125*RP*TM
      H(6,3)=0.125*RM*TM
      H(7,3)=-H(6,3)
      H(8,3)=-H(5,3)
C
      H(1,4)=0.125*RP*SP
      H(2,4)=0.125*RM*SP
      H(3,4)=0.125*RM*SM
      H(4,4)=0.125*RP*SM
      H(5,4)=-H(1,4)
      H(6,4)=-H(2,4)
      H(7,4)=-H(3,4)
      H(8,4)=-H(4,4)
C
      IF(NCVE.EQ.8) GO TO 50
      NND9=NCVE-8
      I=0
    5 I=I+1
      IF(I.GT.NND9) GO TO 80
      NN=I+8
      IF(NOP(NLM,NN).EQ.0) GO TO 5
      GO TO (9,10,11,12,13,14,15,16,17,18,19,20,21),I
C
C     STEPENE SLOBODE ZA CVOROVE PREKO 8
C
C     DEVETI CVOR
    9 H(9,1)=0.25*RR*SP*TP
      H(9,2)=-0.50*R*SP*TP
      H(9,3)=0.25*RR*TP
      H(9,4)=0.25*RR*SP
      GO TO 5
C     DESETI CVOR
   10 H(10,1)=0.25*RM*SS*TP
      H(10,2)=-0.25*SS*TP
      H(10,3)=-0.50*RM*S*TP
      H(10,4)=0.25*RM*SS
      GO TO 5
C     JEDANAESTI CVOR
   11 H(11,1)=0.25*RR*SM*TP
      H(11,2)=-0.50*R*SM*TP
      H(11,3)=-0.25*RR*TP
      H(11,4)=0.25*RR*SM
      GO TO 5
C     DVANAESTI CVOR
   12 H(12,1)=0.25*RP*SS*TP
      H(12,2)=0.25*SS*TP
      H(12,3)=-0.50*RP*S*TP
      H(12,4)=0.25*RP*SS
      GO TO 5
C     TRINAESTI CVOR
   13 H(13,1)=0.25*RR*SP*TM
      H(13,2)=-0.50*R*SP*TM
      H(13,3)=0.25*RR*TM
      H(13,4)=-0.25*RR*SP
      GO TO 5
C     CETRNAESTI CVOR
   14 H(14,1)=0.25*RM*SS*TM
      H(14,2)=-0.25*SS*TM
      H(14,3)=-0.50*RM*S*TM
      H(14,4)=-0.25*RM*SS
      GO TO 5
C     PETNAESTI CVOR
   15 H(15,1)=0.25*RR*SM*TM
      H(15,2)=-0.50*R*SM*TM
      H(15,3)=-0.25*RR*TM
      H(15,4)=-0.25*RR*SM
      GO TO 5
C     SESNAESTI CVOR
   16 H(16,1)=0.25*RP*SS*TM
      H(16,2)=0.25*SS*TM
      H(16,3)=-0.50*RP*S*TM
      H(16,4)=-0.25*RP*SS
      GO TO 5
C     SEDAMNAESTI CVOR
   17 H(17,1)=0.25*RP*SP*TT
      H(17,2)=0.25*SP*TT
      H(17,3)=0.25*RP*TT
      H(17,4)=-0.50*RP*SP*T
      GO TO 5
C     OSAMNAESTI CVOR
   18 H(18,1)=0.25*RM*SP*TT
      H(18,2)=-0.25*SP*TT
      H(18,3)=0.25*RM*TT
      H(18,4)=-0.50*RM*SP*T
      GO TO 5
C     DEVETNAESTI CVOR
   19 H(19,1)=0.25*RM*SM*TT
      H(19,2)=-0.25*SM*TT
      H(19,3)=-0.25*RM*TT
      H(19,4)=-0.50*RM*SM*T
      GO TO 5
C     DVADESETI CVOR
   20 H(20,1)=0.25*RP*SM*TT
      H(20,2)=0.25*SM*TT
      H(20,3)=-0.25*RP*TT
      H(20,4)=-0.50*RP*SM*T
      GO TO 5
C     DVADESETPRVI CVOR
   21 H(21,1)=RR*SS*TT
      H(21,2)=-2.0*R*SS*TT
      H(21,3)=-2.0*S*RR*TT
      H(21,4)=-2.0*T*RR*SS
C
C     KOREKCIJE PRVIH 20 FINKCIJA AKO JE UPOTREBLJEN CVOR 21
C
      DO 150 I=1,8
      DO 150 J=1,4
  150 H(I,J)=H(I,J)-0.125*H(21,J)
      DO 160 I=9,20
      IF(NOP(NLM,I).EQ.0) GO TO 160
      DO 155 J=1,4
  155 H(I,J)=H(I,J)-0.25*H(21,J)
  160 CONTINUE
C
C     KOREKCIJE PRVIH 8 FUNKCIJA AKO SU UPOTREBLJENI CVOROVI PREKO 8
C
C  MEDJUCVOROVI OD 9 DO 16
   80 I16=16
      IF(NND9.LT.8) I16=NCVE
      DO 200 I=9,I16
      IF(NOP(NLM,I).EQ.0) GO TO 200
      DO 210 J=1,4
      I1=I-8
      I2=IPERM(I1)
      H(I1,J)=H(I1,J)-0.5*H(I,J)
  210 H(I2,J)=H(I2,J)-0.5*H(I,J)
  200 CONTINUE
C  MEDJUCVOROVI OD 17 DO 20
      IF(NCVE.LE.16) GO TO 50
      I20=20
      IF(NND9.LT.20) I20=NCVE
      DO 250 I=17,I20
      IF(NOP(NLM,I).EQ.0) GO TO 250
      DO 260 J=1,4
      I1=I-16
      I2=I1+4
      H(I1,J)=H(I1,J)-0.5*H(I,J)
  260 H(I2,J)=H(I2,J)-0.5*H(I,J)
  250 CONTINUE
C
C     JAKOBIJAN U TACKI R,S,T
C
   50 DO 60 I=1,3
      DO 60 J=1,3
      XJ(I,J)=0.
      DO 60 KM=1,NCVE
      K=NOP(NLM,KM)
      IF(K.EQ.0) GO TO 60
      XJ(I,J)=XJ(I,J)+H(KM,I+1)*CORD(K,J)
   60 CONTINUE
      CALL JEDNA1(XJJ,XJ,9) 
      IF(KFIX.GT.0) GO TO 70
C
C     DERERMINANTA JAKOBIJANA U TACKI R,S,T
C
      CALL MINV3(XJ,DET)
CZ    DET=DABS(DET)
      IF(DET.GT.1.D-13) RETURN
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2000) NLM,KFIX,R,S,T,DET
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6000) NLM,KFIX,R,S,T,DET
	write(izlaz,*) 'ncve',ncve
C      IF(NCVE.GT.8) NCVE=8
      I0=0
      I1=1
      I7=7
      I8=8
      I19=19
      I115=115
      DO 61 KM=1,NCVE
      K=NOP(NLM,KM)
      IF(K.EQ.0) GO TO 61
      NCVOR(KM)=K
      WRITE(IZLAZ,1000) K,I0,I0,I8,(CORD(K,J),J=1,3)
C      write(izlaz,1200) (h(km,j),j=1,4)
   61 CONTINUE
      WRITE(IZLAZ,1100) NLM,I19,I115,I1,I1,I7,NCVE
      WRITE(IZLAZ,1100) (NCVOR(J),J=1,NCVE)

      STOP 'PROGRAM STOP - PAK32 - JACTE3'
C
C     DETERMINATA POVRSINSKOG JAKOBIJANA
   70 GO TO (71,72,73),KFIX
C     KONSTANTNO KSI
   71 DET=(XJ(2,2)*XJ(3,3)-XJ(2,3)*XJ(3,2))**2+(XJ(3,1)*XJ(2,3)-
     1XJ(3,3)*XJ(2,1))**2+(XJ(2,1)*XJ(3,2)-XJ(2,2)*XJ(3,1))**2
      GO TO 74
C     KONSTANTNO ETA
   72 DET=(XJ(1,2)*XJ(3,3)-XJ(1,3)*XJ(3,2))**2+(XJ(1,1)*XJ(3,3)-
     1XJ(1,3)*XJ(3,1))**2+(XJ(1,1)*XJ(3,2)-XJ(1,2)*XJ(3,1))**2
      GO TO 74
C     KONSTANTNO ZETA
   73 DET=(XJ(1,2)*XJ(2,3)-XJ(1,3)*XJ(2,2))**2+(XJ(1,1)*
     1XJ(2,3)-XJ(1,3)*XJ(2,1))**2+(XJ(1,1)*XJ(2,2)-XJ(1,2)*XJ(2,1))**2
   74 DET=DSQRT(DET)
      IF(DET.GT.1.D-13) RETURN
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2000) NLM,KFIX,R,S,T,DET
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6000) NLM,KFIX,R,S,T,DET
      STOP 'PROGRAM STOP - PAK32 - JACTE3'
C
 1000 FORMAT(4I10,3(1PE13.5))
 1100 FORMAT(8I10)
 1200 FORMAT(' h',4(1PE13.5))
C-----------------------------------------------------------------------
 2000 FORMAT(' ** GRESKA **: NEGATIVNA ILI NULA DETERMINATA JAKOBIJANA',
     1       ' ZA ELEMENT BR.',I5/
     1       9X,'KFIX=',I5/
     2       12X,'R=',F10.5/
     3       12X,'S=',F10.5/
     4       12X,'T=',F10.5/
     5       10X,'DET=',F12.5)
C-----------------------------------------------------------------------
 6000 FORMAT(/' ','ZERO OR NEGATIVE JACOBIAN DETERMINANTE'/
     1' ','ELEMENT NUM. =',I5/
     1       9X,'KFIX=',I5/
     2       12X,'R=',F10.5/
     3       12X,'S=',F10.5/
     4       12X,'T=',F10.5/
     5       10X,'DET=',D12.5)
C-----------------------------------------------------------------------
      END
C======================================================================
      SUBROUTINE JACGA3(NOP,CORD,TECV,H,CORGT,TGT)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
CS    TEMPERATURA I KOORDINATE U INTEGRACIONOJ TACKI
CE    TEMPERATURE AND COORDINATES IN INTEGRATE POINT
C
      COMMON /GLAVNI/ NP,NGELEM,NMATM,NPER,
     1                IOPGL(6),KOSI,NDIN,ITEST
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /ELEALL/ NETIP,NE,IATYP,NMODM,NGE,ISKNP,LMAX8
      COMMON /ELEMEN/ ELAST(6,6),XJ(3,3),ALFA(6),TEMP0,DET,NLM,KK
      COMMON /GAUSVR/ LTEMGT,LCORGT,ICORGT
C
      DIMENSION NOP(NE,*),CORD(NP,*),TECV(*),H(NCVE,*),CORGT(*)
C
      X1=0.0
      X2=0.0
      X3=0.0
      TGT=0.0
      DO 80 I=1,NCVE
         IC=NOP(NLM,I)
         IF(IC.EQ.0) GO TO 80
         IF(ICORGT.EQ.1) THEN 
             X1=X1+H(I,1)*CORD(IC,1)
             X2=X2+H(I,1)*CORD(IC,2)
             X3=X3+H(I,1)*CORD(IC,3)
         ENDIF
         IF(ITERME.EQ.1) TGT=TGT+H(I,1)*TECV(IC)
   80 CONTINUE
      IF(ICORGT.EQ.0) RETURN
      CORGT(1)=X1
      CORGT(2)=X2
      CORGT(3)=X3
      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE GRGSG3(CO,X,H,NCVE)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   P R O G R A M
CE.      TO CALCULATE DERIVATION CARTESIAN BY NATURAL COORDINATES
CE.      COVARIANT BASIS VECTORS - JACOBIAN MATRIX
CS.   P R O G R A M
CS.      ZA RACUNANJE IZVODA DEKARTOVIH PO PRIRODNIM KOORDINATAMA
CS.      KOVARIJANTNI BAZNI VEKTORI - JAKOBIJEVA MATRICA
C .
C ......................................................................
C
      DIMENSION X(3,*),CO(21,*),H(NCVE,*)
C
      DO 10 I=1,3
         I1=I+1
      DO 10 J=1,3
         X(I,J)=0.D0
      DO 10 K=1,NCVE
         X(I,J)=X(I,J)+H(K,I1)*CO(K,J)
   10 CONTINUE
      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE GRAD3T(XJ,H,CT,C0,GRAD,NCVE)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   P R  O G R A M
CE.      TO CALCULATE DEFORMATION GRADIENT
CE.      INVERSE JACOBIAN - XJ IS FORMED WITH C0 AND G0
CS.   P R O G R A M
CS.      ZA RACUNANJE GRADIJENTA DEFORMACIJE
CS.      INVERZNI JAKOBIJAN - XJ FORMIRAN JE SA C0 I G0
C .
C ......................................................................
C
      DIMENSION XJ(3,*),H(NCVE,*),GRAD(3,*),CT(21,*),C0(21,*)
C
      CALL CLEAR(GRAD,9)
      GRAD(1,1)=1.D0
      GRAD(2,2)=1.D0
      GRAD(3,3)=1.D0
      DO 10 J=1,3
      DO 10 K=1,NCVE
         HKJ=XJ(J,1)*H(K,2)+XJ(J,2)*H(K,3)+XJ(J,3)*H(K,4)
      DO 10 I=1,3
         GRAD(I,J)=GRAD(I,J)+HKJ*(CT(K,I)-C0(K,I))
   10 CONTINUE
      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE BE30TE(TAU,TA,GRAD,DEF,ISN)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   P R  O G R A M
CE.      TO UPDATE ELASTIC LEFT CAUCHY - GREEN DEFORMATION TENSOR
CS.   P R O G R A M
CS.      ZA PROMENU ELASTICNOG LEVOG KOSI - GRINOVOG TENZORA DEFORMACIJE
C .
C ......................................................................
C
      COMMON /MATIZO/ E,V
      COMMON /MATANI/ EX,EY,EZ,VXY,VYZ,VZX,GXY,GYZ,GZX
C
      DIMENSION TAU(*),TA(*),GRAD(3,*),STRAIN(6),DEF(*)
C
CS    TACNE ELASTICNE DEFORMACIJE U LOKALNOM DEKARTOVOM SISTEMU
CE    EXACT ELASTIC STRAIN IN LOCAL CARTESIAN SYSTEM
C     
      AE=2.D0*(1.D0+V)/E
      STRAIN(1)=(TA(1)-V*(TA(2)+TA(3)))/E
      STRAIN(2)=(TA(2)-V*(TA(1)+TA(3)))/E
      STRAIN(3)=(TA(3)-V*(TA(1)+TA(2)))/E
      STRAIN(4)=AE*TA(4)
      STRAIN(5)=AE*TA(5)
      STRAIN(6)=AE*TA(6)
      CALL JEDNA1(DEF,STRAIN,6)
C
CS    TRANSFORMACIJA DEFORMACIJA (ALMANSI - GREEN LAGRANGE)
CE    TRANSFORM STRAIN (ALMANSI - GREEN LAGRANGE) 
C
CZ    IF(ISN.EQ.4) CALL ALMGRL(GRAD,STRAIN,1)
C
CS    TRANSFORMACIJA DEFORMACIJA (GREEN - ROTIRANA GREEN)
CE    TRANSFORM STRAIN (GREEN  LAGRANGE - ROTI GREEN LAGRANGE) 
C
CZ    IF(ISN.EQ.4) CALL ROTGRL(GRAD,STRAIN,0)
C
      TAU(1)=2.D0*STRAIN(1)+1.D0
      TAU(2)=2.D0*STRAIN(2)+1.D0
      TAU(3)=2.D0*STRAIN(3)+1.D0
      TAU(4)=STRAIN(4)
      TAU(5)=STRAIN(5)
      TAU(6)=STRAIN(6)
      RETURN
      END
C=======================================================================
      SUBROUTINE MAMOD3(STRAIN,TGT)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   P R O G R A M
CE.       TO SUBSTRACT THERMAL STRAIN FROM TOTAL STRAIN
CS.   P R O G R A M
CS.       ZA ODUZIMANJE TERMICKE DEFORMACIJE OD UKUPNE DEFORMACIJE
C .
C ......................................................................
C
      DIMENSION STRAIN(6),ETHERM(3)
C
CE    THERMAL STRAIN
      CALL STERM3(ETHERM,TGT)
      DO 10 I=1,3
   10   STRAIN(I)=STRAIN(I)-ETHERM(I)
      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE MDMAT3(DEF,TAU,NMODM,IRAC,LPLAS,LPLA1,IBTC,TGT,INTGL,
     1                  lpla0)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C ......................................................................
C .
CE.   P R O G R A M
CE.       TO CALL PROGRAMS FOR STRESS INTEGRATION FOR MATERIAL MODELS
CS.   P R O G R A M
CS.       PODPROGRAM ZA POZIVANJE PODPROGRAMA INTEGRACIJU KONSTITUTIVNIH
CS.       RELACIJA
C .
C ......................................................................
C
      GO TO (   999,999,999,999,  5,  6,  7,  8,  9, 10,
     1          999,999, 13, 14, 15, 16, 17, 18, 19, 20,
     2           21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
     3           31,999,999,999,999,999,999,999,999,999,
     4           41, 42, 43, 44, 45,999,999,999,999,999,
     5          999, 52, 53, 54,999, 56,999,999,999,999,
     6           61,999,999,999,999,999,999,999,999,999,
     7          999,999,999,999,999,999,999,999,999,999,
     8          999,999,999,999,999,999,999,999,999,999,
     9          999,999,999,999,999,999,999,999,999,999),NMODM
C
    5 CALL D3M5 (TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
CE    STRESS INTEGRATION FOR MATERIAL MODEL 6, SEE /11/ USER MANUAL
    6 IF(INTGL.EQ.0) CALL D3M6 (TAU,DEF,IRAC,LPLAS,LPLA1)
      IF(INTGL.EQ.1) CALL D3M6D (TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
    7 CALL D3M7(TAU,DEF,IRAC,LPLAS,LPLA1,IBTC)
      RETURN
    8 CALL D3M7(TAU,DEF,IRAC,LPLAS,LPLA1,IBTC)
      RETURN
    9 CALL D3M9 (TAU,DEF,IRAC,LPLAS,LPLA1,IBTC,lpla0)
      RETURN
   10 CALL D3M10(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
   13 CALL D3M13(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
   14 CALL D3M14(TAU,DEF,TGT,IRAC,LPLAS,LPLA1)
      RETURN
   15 CALL D3M15(TAU,DEF,TGT,IRAC,LPLAS,LPLA1)
      RETURN
   16 CALL D3M16(TAU,DEF,TGT,IRAC,LPLAS,LPLA1)
      RETURN
   17 CALL D3M17(TAU,DEF,TGT,IRAC,LPLAS,LPLA1)
      RETURN
   18 CALL D3M18(TAU,DEF,TGT,IRAC,LPLAS,LPLA1)
      RETURN
   19 CALL D3M19(TAU,DEF,TGT,IRAC,LPLAS,LPLA1)
      RETURN
   20 CALL D3M20(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
   21 CALL D3M21(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
   22 CALL D3M22(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
   23 CALL D3M23(TAU,DEF,IRAC,LPLAS,LPLA1,IBTC)
      RETURN
   24 CALL D3M24(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
   25 CALL D3M25(TAU,DEF,IRAC,LPLAS,LPLA1,IBTC)
      RETURN
   26 CALL D3M26(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
   27 CALL D3M27(TAU,DEF,TGT,IRAC,LPLAS,LPLA1)
      RETURN
   28 CALL D3M28(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
   29 CALL D3M29(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
   30 CALL D3M30(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
   31 CALL D3M31(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
C     Drucker-Prager (rakic)
   41 CALL D3M41(TAU,DEF,IRAC,LPLAS,LPLA1,IBTC)
      RETURN
C     Mohr-Coulomb (rakic)
   42 CALL D3M42(TAU,DEF,IRAC,LPLAS,LPLA1,IBTC)
      RETURN
C     Hoek-Brown (rakic)
   43 CALL D3M43(TAU,DEF,IRAC,LPLAS,LPLA1,IBTC)
      RETURN
C     Hoek-Brown (rakic)
   44 CALL D3M44(TAU,DEF,IRAC,LPLAS,LPLA1,IBTC)
      RETURN
C     Maksimovic (rakic)
   45 CALL D3M45(TAU,DEF,IRAC,LPLAS,LPLA1,IBTC)
      RETURN      
C     Crystal
   52 CALL D3M52(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN      
C     SMA
   53 CALL D3M53(TAU,DEF,TGT,IRAC,LPLAS,LPLA1)
      RETURN
C     SMA VLADA
   54 CALL D3M54(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN
C     CONCRETE DAMAGE
   56 CALL D3M56(TAU,DEF,IRAC,LPLAS,LPLA1)
      RETURN         
C     Isotropic Damage Model (Oliver 1996)
   61 CALL D3M61(TAU,DEF,IRAC,LPLAS,LPLA1)
  999 RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE AKUST(SKE,NCVE,NLM,NWE)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C      DIMENSION SKE(*),POMOC(NCVE*3,NCVE*3)
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      DIMENSION SKE(*),POMOC(24,24)

C      WRITE(IZLAZ,*)'CLANOVI NIZA SKE0',NLM
C      WRITE(IZLAZ,106)SKE(1),SKE(70),SKE(130),SKE(181),SKE(223),
C     1SKE(256),SKE(280),SKE(295)
C      CALL WRR6(SKE,NWE,'SKEC')
C
      ND=NCVE*3
      IJ=0
       DO I=1,ND
	DO J=I,ND
  	 IJ=IJ+1
          POMOC(I,J)=SKE(IJ)
	  POMOC(J,I)=POMOC(I,J)
        ENDDO
       ENDDO

C       WRITE(IZLAZ,*)'PRE SABIRANJA POMOCNA MATRICA'

C       DO I=1,ND
C          WRITE(IZLAZ,100) (POMOC(I,J),J=1,ND)
C       ENDDO
 
C  100  FORMAT(8(F10.3))

       IJ=0	
       DO I=1,ND,3
	DO J=1,ND,3
	POMOC(I,J)=POMOC(I,J)+POMOC(I+1,J+1)+POMOC(I+2,J+2)
      	ENDDO
       ENDDO
C       WRITE(IZLAZ,*)'POSLE SABIRANJA POMOCNA MATRICA'
C       DO I=1,ND,3
C          WRITE(IZLAZ,100) (POMOC(I,J),J=1,ND,3)
C       ENDDO
 
       DO I=1,ND
        DO J=I,ND
        IJ=IJ+1
        IF (I.EQ.J.AND.DABS(POMOC(I,J)).LT.1.D-4) THEN
           WRITE(IZLAZ,*) 'I,J,POMOC(I,J)',I,J,POMOC(I,J)
           STOP ' PROGRAM STOP - PAK32 - AKUST '
        ENDIF
        SKE(IJ)=POMOC(I,J)
        ENDDO
       ENDDO
      NSKE=ND*(ND+1)/2
C      WRITE(IZLAZ,*)'Niz SKE'
C      WRITE(IZLAZ,100)(SKE(IJ),IJ=1,NSKE)
C      WRITE(IZLAZ,*)'CLANOVI NIZA SKE1',NLM
C      WRITE(IZLAZ,106)SKE(1),SKE(70),SKE(130),SKE(181),SKE(223),
C     1SKE(256),SKE(280),SKE(295)
C  106 FORMAT(F14.3/)
      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE SHIFTA(AK,AM,RO)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON /SISTEM/ LSK,LRTDT,NWK,JEDN,LFTDT
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      DIMENSION AK(*),AM(*)
      RO=-10000.D0
C      WRITE(IZLAZ,101)RO
C  101 FORMAT('   RO=',F12.4)
C      WRITE(IZLAZ,*)'PRE ODUZIMANJA AK'
C      WRITE(IZLAZ,*)(AK(I),I=1,NWK)
      DO 10 I=1,NWK  
       AK(I)=AK(I)-RO*AM(I)
 10   CONTINUE
C      WRITE(IZLAZ,*)'PRE ODUZIMANJA AM'
C      WRITE(IZLAZ,*)(AM(I),I=1,NWK)
C      WRITE(IZLAZ,*)'POSLE ODUZIMANJA AK'
C      WRITE(IZLAZ,*)(AK(I),I=1,NWK)
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE KOSOVO(SNAP,NGS12,NLM,TDTH,VREME,BETA)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON /CRKLI/ MRTVI,MRTVIU
      DIMENSION TDTH(*)
      SNAP=SNAP/NGS12
      IF(BETA.LT.SNAP) THEN
         MRTVI=MRTVI+1
         MRTVIU=MRTVIU+1
         TDTH(NLM)=VREME+.01
         IF(MRTVI.EQ.1) WRITE(3,*) ' NLM,SNAP,CRKLI',VREME
         WRITE(*,*) NLM,SNAP,MRTVI,MRTVIU
         WRITE(3,*) NLM,SNAP,MRTVI,MRTVIU
      ENDIF
      RETURN
      END
C=======================================================================
C
CB=======================================================================
      SUBROUTINE BMATRIX(BLT,BT,nCV)
c     sluzi za pretvaranje u novu B matricu prema Jeremicu
c     nd br cvor x br. step slob
c     ndof br step slob.
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
     
      DIMENSION BLT(6,*),BT(21,3)
	
      i=-2;
	
	
      DO K=1,NCV
         i=i+3;
         BT(K,1)=BLT(1,i);
         BT(K,2)=BLT(2,i+1);
         BT(K,3)=BLT(3,i+2);
      end do 
c	write(3,*)'matrica B U POD'
c	write(3,*),BLT(1,1),BLT(2,2),BLT(3,3),BLT(1,4),BLT(2,5),BLT(3,6)

      RETURN
      END
C=======================================================================
C
C=======================================================================
      SUBROUTINE KELAST(SKE,NCV,nDF,BT,AF,CC,WEIGHT)
c 
c     Racuna clan matrice krutosti K=BT*GRAD*GRAD*C*BT
c     tj. clan Bt*C*B tekuce konfiguracije izrazen uz pomoc clanova pocetne konfiguracije 
c
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
	DIMENSION SKE(*),AK(21,3,3,21)
	DIMENSION AF(3,3)
	DIMENSION CC(3,3,3,3),BT(21,3),akmat(63,63)
	dimension temp04(3,3,3,3),temp05(3,3,3,21)
	dimension temp03(3,3,3,21),temp06(3,21,3,21)
       
   
      do n=1,ndf
	DO A=1,NDF
	DO B=1,NDF
	dO D=1,NDF
	temp04(a,b,n,d)=0;
	do c=1,ndf
      temp04(a,b,n,d)= temp04(a,b,n,d)+AF(N,C) * CC(A,B,C,D);
	end do
	end do
	end do
	end do
      end do
      
	do n=1,ndf
	do a=1,ndf
	do b=1,ndf
	do q=1,ncv
	temp05(a,b,n,q)=0;
	do d=1,ndf
      temp05(a,b,n,q)=temp05(a,b,n,q)+ temp04(a,b,n,d) * BT(Q,D);
	end do
	end do
	end do
	end do
	end do

	do m=1,ndf
	do b=1,ndf
	do n=1,ndf
	do q=1,ncv
	temp03(m,b,n,q)=0;
	do a=1,ndf
	 temp03(m,b,n,q)=temp03(m,b,n,q)+temp05(a,b,n,q)*AF(m,a);
	end do
	end do
	end do
	end do
	end do
      
	do m=1,ndf
	do n=1,ndf
	do q=1,ncv
	do p=1,ncv
	temp06(m,p,n,q)=0;	
	do b=1,ndf
      temp06(m,p,n,q)=temp06(m,p,n,q)+temp03(m,b,n,q)*BT(p,b)*weight;
	end do
	AK(p,m,n,q)=AK(p,m,n,q)+temp06(m,p,n,q);
	end do
	end do
	end do
	end do

	write(3,*)'ak',ak(1,1,1,1),ak(1,1,2,2),ak(1,1,3,3),ak(1,1,1,2)
	write(3,*)'ak',ak(1,1,2,3),ak(1,1,3,1)


c
c    Prevodjenje tenzora krutosti cetvrtog reda u niz SKE 

c      nd=ndf*ncv
c      mm=0;
c      do i=1,nd
c      do j=i,nd
c         mm=mm+1;
c         p=(i-1)/3+1
c         m=mod(i,3)
c         if(m.eq.0) m=3
c         q=(j-1)/3+1
c         n=mod(j,3)
c         if(n.eq.0) n=3
c         SKE(mm)=AK(p,m,n,q);
c      end do
c      end do
	kki=0;
	kkj=0;
      do i=1,ncv
      do j=i,ncv
	do k=1,ndf
	do l=1,ndf
      kki=k+ndf*(i-1);
	kkj=l+ndf*(j-1)
	akmat(kki,kkj)=ak(i,k,l,j);
	end do
	end do
      end do
	end do
	k=0;
      nnm=ncv*ndf;
      do i=1,nnm
	do j=i,nnm
	k=k+1;
	Ske(k)=akmat(i,j);
	end do
	end do


      RETURN
      END
C=======================================================================
C
C=======================================================================

      SUBROUTINE FINTER(BT,P2kStress,NCV,nDF,AF,WEIGHT,FE,nop,ne)
      
c      podprogram za racunanje unutrasnjih sila 
c   
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
	DIMENSION P2KStress(3,3),FE(*),nop(ne,*)
	DIMENSION AF(3,3),BT(21,3),R(21,3)
	
	 call iwrr(nop,ne*ncv,'no11')

      do I=1,ncv    
      do j=1,ndf
        R(I,j)=0;
       do M=1,ndf
        do N=1,ndf
        R(i,j)=R(i,j)+AF(j,M)*P2KStress(M,N)*Bt(I,n);
        end do
        end do
       R(I,j)=R(I,j)*weight;
      end do
      end do
       call iwrr(nop,ne*ncv,'no22')

	write(3,*)'I,j',I,j
C PREVODJENJE U VEKTOR
      NM=0;
      DO I=1,NCV
      DO J=1,NDF
      NM=NM+1;
      FE(NM)=FE(NM)+R(I,J)
      END DO
      END DO
      
	call iwrr(nop,ne*ncv,'no33')
      write(3,*)'ncv',ncv
	write(3,*)'ndf',ndf
	write(3,*)'nm',nm
   
   	
      RETURN
      END
C======================================================================
      SUBROUTINE JACTE33(NOP,CORD,H,R,S,T,KFIX)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   P R O G R A M
CE.       FOR INTERPOLATION FUNCTIONS AND JACOBIAN MATRIX IN CURRENT
CE.       INTEGRATION POINT (R,S,T - ARE NATURAL COORDINATES)
C .
C ......................................................................
C
      COMMON /GLAVNI/ NP,NGELEM,NMATM,NPER,
     1                IOPGL(6),KOSI,NDIN,ITEST
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /ELEALL/ NETIP,NE,IATYP,NMODM,NGE,ISKNP,LMAX8
      COMMON /ELEMEN/ ELAST(6,6),XJ(3,3),ALFA(6),TEMP0,DET,NLM,KK
      COMMON /ORIENT/ CPP(3,3),XJJ(3,3),TSG(6,6),BETA,LBET0,IBB0
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      COMMON /SRPSKI/ ISRPS
      COMMON /CDEBUG/ IDEBUG
      DIMENSION NOP(NE,*),CORD(NP,*),H(NCVE,*),IPERM(8),NCVOR(10)
      DATA IPERM/2,3,4,1,6,7,8,5/
C
      IF(IDEBUG.GT.0) PRINT *, ' JACTE33'
C
C     INTERPOLACIJSKE FINKCIJE I NJIHOVI IZVODI
C
C
C     PRVIH 4 CVOROVA
C
      H(1,1)=T
      H(2,1)=R
      H(3,1)=1-R-S-T
      H(4,1)=S
C
      H(1,2)= 0.
      H(2,2)= 1.
      H(3,2)=-1.
      H(4,2)= 0.
C
      H(1,3)= 0.
      H(2,3)= 0.
      H(3,3)=-1.
      H(4,3)= 1.
C
      H(1,4)= 1.
      H(2,4)= 0.
      H(3,4)=-1.
      H(4,4)= 0.
C
      IF(NCVE.EQ.4) GO TO 50
      IF(NCVE.NE.10) STOP 'NCVE.NE.10'
      I=0
   55 I=I+1
      NN=I+4
      IF(NOP(NLM,NN).EQ.0) GO TO 55
      GO TO (5,6,7,8,9,10),I
C
C     STEPENE SLOBODE ZA CVOROVE PREKO 4
C
C     PETI CVOR
    5 H(5,1)= 4.*R*S
      H(5,2)= 4.*S
      H(5,3)= 4.*R
      H(5,4)= 0.
      GO TO 55
C     SESTI CVOR
    6 H(6,1)= 4.*R*T
      H(6,2)= 4.*T
      H(6,3)= 0.
      H(6,4)= 4.*R
      GO TO 55
C     SEDMI CVOR
    7 H(7,1)= 4.*S*T
      H(7,2)= 0.
      H(7,3)= 4.*T
      H(7,4)= 4.*S
      GO TO 55
C     OSMI CVOR
    8 H(8,1)= 4.*R*(1.-R-S-T)
      H(8,2)= 4.*(1.-R-S-T)-4.*R
      H(8,3)=-4.*R
      H(8,4)=-4.*R
      GO TO 55
C     DEVETI CVOR
    9 H(9,1)= 4.*S*T
      H(9,2)= 0.
      H(9,3)= 4.*T
      H(9,4)= 4.*S
      GO TO 55
C     DESETI CVOR
   10 H(10,1)= 4.*S*(1.-R-S-T)
      H(10,2)= 4.*(1.-R-S-T)-4.*S
      H(10,3)=-4.*S
      H(10,4)=-4.*S
C
C     KOREKCIJE PRVIH 4 FUNKCIJA AKO SU UPOTREBLJENI CVOROVI PREKO 4
C
C  MEDJUCVOROVI OD 5 DO 10
      DO 210 J=1,4
      H(1,J)=H(1,J)-0.5*(H(5,J)+H(7,J)+H(10,J))
      H(2,J)=H(2,J)-0.5*(H(5,J)+H(6,J)+H(8,J))
      H(3,J)=H(3,J)-0.5*(H(6,J)+H(7,J)+H(9,J))
      H(4,J)=H(4,J)-0.5*(H(7,J)+H(8,J)+H(9,J))
  210 CONTINUE
C
C     JAKOBIJAN U TACKI R,S,T
C
   50 DO 60 I=1,3
      DO 60 J=1,3
      XJ(I,J)=0.
      DO 60 KM=1,NCVE
      K=NOP(NLM,KM)
      IF(K.EQ.0) GO TO 60
      XJ(I,J)=XJ(I,J)+H(KM,I+1)*CORD(K,J)
   60 CONTINUE
      CALL JEDNA1(XJJ,XJ,9) 
C
C     DERERMINANTA JAKOBIJANA U TACKI R,S,T
C
      CALL MINV3(XJ,DET)
      IF(DET.GT.1.D-13) RETURN
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2000) NLM,KFIX,R,S,T,DET
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6000) NLM,KFIX,R,S,T,DET
	write(izlaz,*) 'ncve',ncve
      I0=0
      I1=1
      I7=7
      I8=8
      I19=19
      I115=115
      DO 61 KM=1,NCVE
      K=NOP(NLM,KM)
      IF(K.EQ.0) GO TO 61
      NCVOR(KM)=K
      WRITE(IZLAZ,1000) K,I0,I0,I8,(CORD(K,J),J=1,3)
C      write(izlaz,1200) (h(km,j),j=1,4)
   61 CONTINUE
      WRITE(IZLAZ,1100) NLM,I19,I115,I1,I1,I7,NCVE
      WRITE(IZLAZ,1100) (NCVOR(J),J=1,NCVE)

      STOP 'PROGRAM STOP - PAK32 - JACTE33'
C
C
 1000 FORMAT(4I10,3(1PE13.5))
 1100 FORMAT(8I10)
 1200 FORMAT(' h',4(1PE13.5))
C-----------------------------------------------------------------------
 2000 FORMAT(' ** GRESKA **: NEGATIVNA ILI NULA DETERMINATA JAKOBIJANA',
     1       ' ZA ELEMENT BR.',I5/
     1       9X,'KFIX=',I5/
     2       12X,'R=',F10.5/
     3       12X,'S=',F10.5/
     4       12X,'T=',F10.5/
     5       10X,'DET=',F12.5)
C-----------------------------------------------------------------------
 6000 FORMAT(/' ','ZERO OR NEGATIVE JACOBIAN DETERMINANTE'/
     1' ','ELEMENT NUM. =',I5/
     1       9X,'KFIX=',I5/
     2       12X,'R=',F10.5/
     3       12X,'S=',F10.5/
     4       12X,'T=',F10.5/
     5       10X,'DET=',D12.5)
C-----------------------------------------------------------------------
      END
C======================================================================
      SUBROUTINE JACTE33A(NOP,CORD,H,R,S,T,KFIX)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C ......................................................................
C .
CE.   P R O G R A M
CE.       FOR INTERPOLATION FUNCTIONS AND JACOBIAN MATRIX IN CURRENT
CE.       INTEGRATION POINT (R,S,T - ARE NATURAL COORDINATES)
C .
C ......................................................................
C
      COMMON /GLAVNI/ NP,NGELEM,NMATM,NPER,
     1                IOPGL(6),KOSI,NDIN,ITEST
      COMMON /ELEIND/ NGAUSX,NGAUSY,NGAUSZ,NCVE,ITERME,MAT,IETYP
      COMMON /ELEALL/ NETIP,NE,IATYP,NMODM,NGE,ISKNP,LMAX8
      COMMON /ELEMEN/ ELAST(6,6),XJ(3,3),ALFA(6),TEMP0,DET,NLM,KK
      COMMON /ORIENT/ CPP(3,3),XJJ(3,3),TSG(6,6),BETA,LBET0,IBB0
      COMMON /TRAKEJ/ IULAZ,IZLAZ,IELEM,ISILE,IRTDT,IFTDT,ILISK,ILISE,
     1                ILIMC,ILDLT,IGRAF,IDINA,IPOME,IPRIT,LDUZI
      COMMON /SRPSKI/ ISRPS
      COMMON /CDEBUG/ IDEBUG
      DIMENSION NOP(NE,*),CORD(NP,*),H(NCVE,*),IPERM(8),NCVOR(10)
      DATA IPERM/2,3,4,1,6,7,8,5/
C
      IF(IDEBUG.GT.0) PRINT *, ' JACTE33A'
C
C     INTERPOLACIJSKE FINKCIJE I NJIHOVI IZVODI
C
C      WRITE(3,1001) NCVE
C      DO I=1,47
C        WRITE(3,1001) (NOP(I,J), J=1,10)
C      ENDDO
C 1001 FORMAT(10I5)
C      STOP
C
C     PRVIH 4 CVOROVA
C
      H(1,1)= 1-R-S-T
      H(2,1)= R
      H(3,1)= S
      H(4,1)= T
C
      H(1,2)=-1.
      H(2,2)= 1.
      H(3,2)= 0.
      H(4,2)= 0.
C
      H(1,3)=-1.
      H(2,3)= 0.
      H(3,3)= 1.
      H(4,3)= 0.
C
      H(1,4)=-1.
      H(2,4)= 0.
      H(3,4)= 0.
      H(4,4)= 1.
C
      IF(NCVE.EQ.4) GO TO 50
      IF(NCVE.NE.10) STOP 'NCVE.NE.10'
      I=0
   55 I=I+1
      NN=I+4
      IF(NOP(NLM,NN).EQ.0) GO TO 55
      GO TO (5,6,7,8,9,10),I
C
C     STEPENE SLOBODE ZA CVOROVE PREKO 4
C
C     PETI CVOR
    5 H(5,1)= 4.*R*(1.-R-S-T)
      H(5,2)= 4.*(1.-R-S-T)-4.*R
      H(5,3)=-4.*R
      H(5,4)=-4.*R
      GO TO 55
C     SESTI CVOR
    6 H(6,1)= 4.*R*S
      H(6,2)= 4.*S
      H(6,3)= 4.*R
      H(6,4)= 0.
      GO TO 55
C     SEDMI CVOR
    7 H(7,1)= 4.*S*(1.-R-S-T)
      H(7,2)=-4.*S
      H(7,3)= 4.*(1.-R-S-T)-4.*S
      H(7,4)=-4.*S
      GO TO 55
C     OSMI CVOR
    8 H(8,1)= 4.*T*(1.-R-S-T)
      H(8,2)=-4.*T
      H(8,3)=-4.*T
      H(8,4)= 4.*(1.-R-S-T)-4.*T
      GO TO 55
C     DEVETI CVOR
    9 H(9,1)= 4.*R*T
      H(9,2)= 4.*T
      H(9,3)= 0.
      H(9,4)= 4.*R
      GO TO 55
C     DESETI CVOR
   10 H(10,1)= 4.*S*T
      H(10,2)= 0.
      H(10,3)= 4.*T
      H(10,4)= 4.*S
C
C     KOREKCIJE PRVIH 4 FUNKCIJA AKO SU UPOTREBLJENI CVOROVI PREKO 4
C
C  MEDJUCVOROVI OD 5 DO 10
      DO 210 J=1,4
      H(1,J)=H(1,J)-0.5*(H(5,J)+H(7,J)+H(8,J))
      H(2,J)=H(2,J)-0.5*(H(5,J)+H(6,J)+H(9,J))
      H(3,J)=H(3,J)-0.5*(H(6,J)+H(7,J)+H(10,J))
      H(4,J)=H(4,J)-0.5*(H(8,J)+H(9,J)+H(10,J))
  210 CONTINUE
C
C     JAKOBIJAN U TACKI R,S,T
C
   50 DO 60 I=1,3
      DO 60 J=1,3
      XJ(I,J)=0.
      DO 60 KM=1,NCVE
      K=NOP(NLM,KM)
      IF(K.EQ.0) GO TO 60
      XJ(I,J)=XJ(I,J)+H(KM,I+1)*CORD(K,J)
   60 CONTINUE
      CALL JEDNA1(XJJ,XJ,9) 
C
C     DERERMINANTA JAKOBIJANA U TACKI R,S,T
C
      CALL MINV3(XJ,DET)
      IF(DET.GT.1.D-13) RETURN
      IF(ISRPS.EQ.0)
     1WRITE(IZLAZ,2000) NLM,KFIX,R,S,T,DET
      IF(ISRPS.EQ.1)
     1WRITE(IZLAZ,6000) NLM,KFIX,R,S,T,DET
	write(izlaz,*) 'ncve',ncve
      I0=0
      I1=1
      I7=7
      I8=8
      I19=19
      I115=115
      DO 61 KM=1,NCVE
      K=NOP(NLM,KM)
      IF(K.EQ.0) GO TO 61
      NCVOR(KM)=K
      WRITE(IZLAZ,1000) K,I0,I0,I8,(CORD(K,J),J=1,3)
C      write(izlaz,1200) (h(km,j),j=1,4)
   61 CONTINUE
      WRITE(IZLAZ,1100) NLM,I19,I115,I1,I1,I7,NCVE
      WRITE(IZLAZ,1100) (NCVOR(J),J=1,NCVE)

      STOP 'PROGRAM STOP - PAK32 - JACTE33A'
C
C
 1000 FORMAT(4I10,3(1PE13.5))
 1100 FORMAT(8I10)
 1200 FORMAT(' h',4(1PE13.5))
C-----------------------------------------------------------------------
 2000 FORMAT(' ** GRESKA **: NEGATIVNA ILI NULA DETERMINATA JAKOBIJANA',
     1       ' ZA ELEMENT BR.',I5/
     1       9X,'KFIX=',I5/
     2       12X,'R=',F10.5/
     3       12X,'S=',F10.5/
     4       12X,'T=',F10.5/
     5       10X,'DET=',F12.5)
C-----------------------------------------------------------------------
 6000 FORMAT(/' ','ZERO OR NEGATIVE JACOBIAN DETERMINANTE'/
     1' ','ELEMENT NUM. =',I5/
     1       9X,'KFIX=',I5/
     2       12X,'R=',F10.5/
     3       12X,'S=',F10.5/
     4       12X,'T=',F10.5/
     5       10X,'DET=',D12.5)
C-----------------------------------------------------------------------
      END